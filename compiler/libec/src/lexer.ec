#line 2 "lexer.ec"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 179
#define YY_END_OF_BUFFER 180
static yyconst short int yy_accept[732] =
    {   0,
      114,  114,  180,  178,  176,  175,  174,  177,  161,  178,
        1,  173,  167,  160,  178,  155,  156,  165,  164,  152,
      163,  159,  166,  120,  120,  153,  149,  168,  154,  169,
      172,  114,  114,  114,  157,  158,  170,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  150,  171,  151,  162,  148,
        0,  125,    0,  134,  151,  143,  135,    0,    0,  132,
      140,  130,  141,  131,  142,    0,  123,    2,    3,  133,
      124,  119,    0,  120,    0,  120,  114,  158,  150,  157,
      139,  145,  147,  146,  138,    0,  114,    0,  114,    0,

        0,  136,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,   11,  114,  114,  114,  114,  114,  114,  114,  114,
       19,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  137,  144,  121,  127,    0,  123,
      123,    0,  124,  119,    0,  122,    0,  115,  114,  129,
      128,  114,  114,    0,  126,    0,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,   94,  114,  114,  114,  114,  114,  114,

      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,   17,   46,  114,  114,  114,  114,   20,
      114,  114,  114,   52,  114,  114,  114,  114,  114,  114,
      114,   45,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,    0,  123,    0,  123,    0,  124,  122,  117,  118,
      115,    0,   63,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,    4,  114,    6,    7,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,

      114,  114,   13,   14,  114,  114,  114,   18,  114,  114,
      114,  114,  114,   22,  114,   53,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,   21,  114,  114,  114,   39,  114,
      114,  114,    0,  123,  117,  117,    0,  117,  117,  118,
        0,    0,  116,   64,  114,  114,  114,   95,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,    5,   48,    8,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,   16,  114,  114,  114,   59,   47,  114,  114,

      114,  114,  114,   54,  114,  114,   25,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,   37,  114,  114,
      114,   97,   43,    0,  117,  117,  117,    0,    0,  118,
      116,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,   57,   51,  114,  114,   12,   15,  114,   56,   90,
       74,  114,  114,  114,   86,  114,   55,  114,   24,   26,
       29,   32,  114,  114,   34,  114,   35,  114,  114,  114,
      114,  114,  114,  114,    0,  117,  114,  114,  114,   93,

      114,  114,   78,   84,  114,  114,  114,  114,   58,  114,
      114,  114,  114,  114,  114,  114,   72,  114,  114,  114,
      114,  114,  114,  114,  114,  111,  112,  110,   10,  114,
      114,  114,  114,   87,  114,  114,  114,   82,  114,  114,
      114,  114,   36,  114,   50,  114,  114,   65,  114,  114,
      114,  114,  114,  114,   73,   60,  114,   27,  114,   33,
       96,  114,  114,   81,  114,  114,  114,  114,  114,  114,
        9,  114,  114,  114,  114,  114,   44,   23,   67,  114,
      108,  114,  114,   38,   40,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,   79,  114,  114,  114,  114,

      114,  114,  114,  114,  114,  114,   76,   77,  114,  109,
      114,  114,   49,  114,  100,   66,  114,  114,  114,  114,
      114,   71,   83,   28,  114,   42,  114,   89,  106,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,   30,
       70,  114,  114,    0,  114,  114,   80,  114,   92,  114,
      114,  103,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,   75,    0,  114,   85,   41,  114,  114,  114,
      114,  114,   99,  114,   98,   88,   69,  114,  114,  114,
       91,  114,  114,  114,  114,  113,  114,  114,  114,  114,
      114,  114,  101,  114,  107,  114,  114,  114,  114,  114,

      114,  114,  114,  114,  114,   62,  114,  114,  114,  114,
      114,  114,   61,  114,  114,  105,  114,   31,  114,  102,
      114,  114,  114,  114,  114,  114,  114,  104,  114,   68,
        0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   24,   26,   24,   27,   24,   28,   29,   30,
       31,   32,   33,    1,   34,   35,   36,   34,   37,   38,
       39,   39,   40,   41,   39,   42,   39,   39,   39,   43,
       39,   39,   39,   39,   44,   39,   39,   45,   39,   39,
       46,   47,   48,   49,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   39,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[80] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    3,    1,    4,    1,    1,    1,    1,    5,    1,
        6,    6,    6,    6,    6,    6,    6,    2,    1,    1,
        1,    1,    1,    7,    7,    7,    7,    7,    8,    9,
        9,    9,    9,    8,    8,    1,    1,    1,    1,    8,
        7,    7,    7,    7,    7,    7,    8,    8,    9,    9,
        8,    9,    8,    8,    8,    9,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[741] =
    {   0,
        0,    0,  244, 2810, 2810, 2810, 2810, 2810,  211,   73,
     2810, 2810,   50,   72,  193, 2810, 2810,  203,   68, 2810,
       69,   67,   82,  102,   85,   86, 2810,  105,  202,   64,
     2810,   94,  106,  138, 2810, 2810,  200,  141,  120,  126,
      127,  152,  154,  140,  183,  187,  145,  184,  159,  197,
      202,  195,  209,  217,  208, 2810,  109, 2810, 2810, 2810,
      112, 2810,  218, 2810, 2810, 2810, 2810,  120,  171, 2810,
     2810, 2810, 2810, 2810, 2810,  182,  262, 2810, 2810, 2810,
      304,  348,  289,  292,  178,    0,    0, 2810, 2810, 2810,
      148, 2810, 2810, 2810,  129,  125,  213,  113,  236,  215,

       69, 2810,  270,  312,  280,  408,  221,  327,  268,  235,
      337,  328,  264,  365,  269,  350,  368,  370,  371,  393,
      383,  384,  398,  394,  403,  406,  409,  413,  414,  418,
      267,  424,  440,  437,  442,  395,  458,  460,  470,  467,
      471,  473,  480,  492,  489,  483,  485,  486,  499,  501,
      504,  505,  493,  517, 2810, 2810, 2810, 2810,  556,  546,
      588,  573,  578,  611,  635,  661,    0,  649,  523, 2810,
     2810,    0,  528,  340, 2810,  101,  538,  564,  542,  638,
      537,  611,  667,  652,  557,  685,  686,  699,  666,  701,
      613,  705,  713,  707,  715,  721,  719,  723,  725,  726,

      728,  733,  737,  747,  749,  741,  755,  739,  757,  753,
      760,  771,  776,  775,  778,  791,  794,  796,  802,  806,
      800,  807,  810,  812,  809,  818,  814,  820,  830,  825,
      832,  834,  838,  839,  840,  841,  843,  846,  859,  861,
      862,  864,  870,  871,  872,  880,  890,  893,  895,  896,
      898,  929,  940,  967,  963,  947, 1005,  995, 1028, 1036,
     1041,  990,  900,  947,  996, 1047, 1061,  916,  908, 1069,
      902, 1045, 1010, 1080, 1082, 1031, 1095, 1094, 1096, 1101,
     1102, 1103, 1106, 1104, 1105,  905, 1107,  906, 1108, 1110,
     1114, 1115, 1128, 1126, 1134, 1144, 1148, 1149, 1158, 1162,

     1171, 1164, 1173, 1174, 1176, 1178, 1180, 1182, 1184, 1183,
     1189, 1194, 1186, 1187, 1192, 1196, 1205, 1212, 1214, 1217,
     1218, 1219, 1220, 1226, 1233, 1241, 1230, 1246, 1248, 1251,
     1252, 1254, 1255, 1264, 1253, 1266, 1282, 1273, 1285, 1287,
     1288, 1289, 1300, 1336,    0, 1291, 1363, 1359,    0, 1367,
     1412, 1343, 1419, 1291, 1344, 1324, 1392, 1343, 1383, 1403,
     1436, 1440, 1441, 1442, 1443, 1462, 1444, 1452, 1465, 1455,
     1466, 1463, 1471, 1476, 1481, 1484, 1300, 1487, 1489, 1494,
     1495, 1500, 1496, 1514, 1515, 1516, 1519, 1520, 1522, 1527,
     1528, 1538, 1541, 1542, 1550, 1552, 1553, 1556, 1557, 1562,

     1568, 1572, 1576, 1580, 1582, 1584, 1586, 1588, 1587, 1591,
     1592, 1598, 1594, 1602, 1606, 1610, 1618, 1622, 1628, 1629,
     1641, 1647, 1648, 1660, 1680,    0, 1653, 1707, 1722, 1729,
     1719, 1686, 1660, 1699, 1649, 1754, 1650, 1755, 1668, 1762,
     1765, 1769, 1773, 1775, 1776, 1766, 1781, 1784, 1787, 1788,
     1791, 1794, 1796, 1795, 1797, 1799, 1800, 1820, 1809, 1828,
     1834, 1836, 1839, 1843, 1849, 1859, 1861, 1862, 1864, 1865,
     1867, 1868, 1869, 1870, 1873, 1874, 1877, 1883, 1888, 1889,
     1893, 1895, 1898, 1899, 1902, 1904, 1907, 1914, 1909, 1917,
     1922, 1923, 1927, 1929, 1969, 1976, 1933, 1935, 1942, 1930,

     1936, 1951, 1938, 1941, 1943, 1956, 1976, 1948, 1994, 1997,
     2000, 2001, 2012, 2002, 2009, 2015, 2016, 2022, 2023, 2031,
     2034, 2036, 2037, 2041, 2042, 2044, 2049, 2060, 2062, 2064,
     2070, 2072, 2074, 2078, 2080, 2083, 2084, 2088, 2092, 2094,
     2096, 2104, 2098, 2106, 2102, 2108, 2107, 2110, 2112, 2118,
     2130, 2131, 2133, 2137, 2140, 2138, 2144, 2156, 2159, 2164,
     2165, 2166, 2170, 2171, 2174, 2175, 2180, 2190, 2196, 2194,
     2198, 2201, 2202, 2203, 2204, 2205, 2206, 2209, 2212, 2227,
     2214, 2230, 2236, 2238, 2239, 2242, 2241, 2250, 2254, 2262,
     2246, 2264, 2266, 2265, 2275, 2276, 2273, 2277, 2278, 2280,

     2291, 2296, 2299, 2302, 2307, 2309, 2310, 2311, 2321, 2322,
     2325, 2332, 2333, 2334, 2335, 2337, 2340, 2341, 2347, 2353,
     2356, 2359, 2360, 2366, 2369, 2371, 2372, 2374, 2375, 2381,
     2387, 2395, 2396, 2397, 2400, 2403, 2402, 2415, 2405, 2406,
     2418, 2426, 2427,   84, 2431, 2434, 2428, 2436, 2429, 2437,
     2439, 2449, 2452, 2460, 2461, 2462, 2463, 2464, 2465, 2472,
     2483, 2474, 2810,   71, 2485, 2476, 2484, 2486, 2487, 2495,
     2497, 2508, 2509, 2520, 2517, 2522, 2529, 2530, 2532, 2533,
     2536, 2540, 2541, 2542, 2543, 2545, 2548, 2552, 2554, 2563,
     2551, 2566, 2570, 2575, 2576, 2585, 2586, 2588, 2591, 2596,

     2600, 2601, 2609, 2610, 2612, 2611, 2614, 2616, 2623, 2624,
     2634, 2630, 2635, 2638, 2643, 2644, 2645, 2650, 2657, 2663,
     2664, 2669, 2671, 2673, 2678, 2682, 2689, 2683, 2691, 2692,
     2810, 2756, 2765, 2773, 2778, 2779, 2788, 2792, 2794, 2800
    } ;

static yyconst short int yy_def[741] =
    {   0,
      731,    1,  731,  731,  731,  731,  731,  731,  731,  732,
      731,  731,  731,  731,  733,  731,  731,  731,  731,  731,
      731,  731,  731,  731,   24,  731,  731,  731,  731,  731,
      731,  734,  734,  734,  731,  731,  731,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  731,  731,  731,  731,  731,
      732,  731,  732,  731,  731,  731,  731,  733,  733,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  735,   25,  736,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  734,  731,  734,  737,

      733,  731,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  738,  735,  734,  731,
      731,  736,  734,  737,  731,  737,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  731,  731,  731,  731,  731,  731,  731,  738,  739,
      731,  731,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  731,  731,  259,  731,  731,  739,  348,  731,
      731,  731,  731,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  731,  731,  348,  731,  731,  731,  731,
      731,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  731,  731,  734,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  740,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  731,  740,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
        0,  731,  731,  731,  731,  731,  731,  731,  731,  731
    } ;

static yyconst short int yy_nxt[2890] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   25,   25,   25,   25,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   32,   32,   32,   32,   32,
       32,   34,   32,   32,   32,   35,    4,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   32,   46,   32,
       32,   47,   32,   48,   32,   49,   50,   51,   52,   53,
       54,   55,   32,   32,   32,   56,   57,   58,   59,   62,
       64,   65,   66,   71,  663,   76,   73,   77,   77,   77,
       77,   77,   77,   77,   94,   95,   78,  663,   72,   74,

       75,   79,   67,  731,   96,   86,   86,   86,   86,   86,
       86,   86,   80,   87,   89,   69,   96,   88,   62,   63,
       81,   98,   82,   82,   82,   82,   82,   82,   82,  731,
       96,  157,   90,   98,   91,   92,   96,   96,   83,  155,
      172,   84,   84,   84,  100,   84,   85,   98,   96,  101,
       96,   96,   98,   98,   98,   96,   83,  731,   63,  171,
       84,   84,   96,   84,   96,   98,   69,   98,   98,   96,
       99,   84,   98,  731,   85,  103,  104,  114,  170,   98,
      105,   98,   68,  110,  115,  156,   98,  111,  116,  112,
      106,  117,  113,   96,   96,  107,  167,   96,  126,  108,

      158,  127,  118,  119,  128,   96,  120,   96,  109,  135,
       98,   98,   96,  121,   98,  123,  122,  124,   96,   96,
      731,  175,   98,   96,   98,  138,  125,   96,  139,   98,
      102,   96,   93,   70,  136,   98,   98,  129,  137,   69,
       98,   60,  131,  731,   98,   96,   96,  130,   98,  132,
      133,  140,  147,  731,  134,  731,  141,  731,  153,  142,
      143,  176,   98,   98,  731,  154,  731,  149,  148,  731,
      144,  145,  150,  146,   96,  151,  731,   96,   96,   96,
       96,  152,   77,   77,   77,   77,   77,   77,   77,  731,
       96,   98,  731,  190,   98,   98,   98,   98,  159,  160,

      173,  160,  160,  160,  165,  731,  165,   98,  193,  166,
      166,  166,  166,  166,  166,  166,  159,  160,  196,  198,
      160,  160,   96,  160,  161,  161,  161,  161,  161,  161,
      161,   84,   84,   84,  177,   84,  192,   96,   96,   98,
      162,  163,  179,  163,  163,  163,  175,   96,  731,  731,
       84,   84,  731,   84,   98,   98,  731,  731,  162,  163,
       96,   84,  163,  163,   98,  163,   81,  731,   82,   82,
       82,   82,   82,   82,   82,   96,  178,   98,   96,  731,
       96,   96,  731,  731,   83,  731,  176,  164,  164,  164,
      191,  164,   98,   96,   96,   98,  195,   98,   98,  194,

      199,  731,   83,   96,   96,   96,  164,  164,   96,  164,
       98,   98,  731,   96,  731,  731,   96,  164,   96,   96,
       98,   98,   98,   96,   96,   98,  202,  731,   96,  203,
       98,  200,  197,   98,   96,   98,   98,  731,  201,  204,
       98,   98,  731,  731,  207,   98,  731,   96,  205,  731,
       96,   98,   96,  208,  206,  731,  731,  223,  180,  181,
      182,  183,  184,  210,   98,  209,  185,   98,   96,   98,
       96,  211,  212,  213,  186,  187,  188,   96,  189,  214,
       96,   96,  215,   96,  731,   98,  216,   98,  731,  217,
       96,  731,  218,   96,   98,   96,   96,   98,   98,   96,

       98,  219,   96,   96,  221,  222,  731,   98,  220,   96,
       98,   96,   98,   98,   96,   96,   98,  731,  225,   98,
       98,  227,  731,  228,  226,  731,   98,   96,   98,  224,
      229,   98,   98,   96,  230,  231,  234,  233,   96,  232,
      240,  241,  236,  242,   98,  237,  731,   96,   96,  731,
       98,  243,   96,  731,  235,   98,  238,  731,  239,  245,
      731,  250,  244,  248,   98,   98,  249,   96,  246,   98,
      247,  252,  731,  252,   96,  251,  253,  253,  253,  253,
      253,  253,  253,  160,   98,  160,  160,  160,  256,  263,
      256,   98,  266,  257,  257,  257,  257,  257,  257,  257,

      731,  160,  264,  731,  160,  160,  270,  160,  161,  161,
      161,  161,  161,  161,  161,  163,  731,  163,  163,  163,
      275,   96,  731,   96,  254,  255,  265,  255,  255,  255,
      731,  731,  731,  163,  731,  731,  163,  163,   98,  163,
       98,  731,  254,  255,  731,  731,  255,  255,   96,  255,
      164,  164,  164,  731,  164,  166,  166,  166,  166,  166,
      166,  166,   96,  731,  271,   98,  731,  260,  731,  164,
      164,  731,  164,  731,  283,  272,   96,   96,  731,   98,
      164,  166,  166,  166,  166,  166,  166,  166,  261,  261,
      261,  262,  261,   98,   98,   96,   96,  731,  258,  267,

      258,  258,  258,  731,  731,  268,  269,  261,  261,   96,
      261,   96,   98,   98,  262,   96,  258,   96,  261,  258,
      258,  273,  258,   96,  274,   96,   98,  731,   98,   96,
      281,   96,   98,   96,   98,   96,   96,  731,   96,  276,
       98,  731,   98,   96,  277,  731,   98,   96,   98,   96,
       98,   96,   98,   98,  278,   98,  279,   96,  284,   96,
       98,  731,  285,   96,   98,   96,   98,   96,   98,  282,
       96,  287,  280,  288,   98,  731,   98,  731,  293,  286,
       98,   96,   98,  731,   98,   96,   96,   98,   96,  289,
      302,  294,  290,  291,  292,  299,  731,  296,   98,  297,

      295,   96,   98,   98,   96,   98,   96,  298,  731,  300,
       96,  303,   96,  301,  305,  304,   96,   96,   98,   96,
       96,   98,   96,   98,   96,  306,  307,   98,   96,   98,
       96,  312,  316,   98,   98,   96,   98,   98,  731,   98,
       96,   98,   96,  731,   96,   98,  731,   98,   96,   96,
       96,   96,   98,   96,  313,  308,   96,   98,  309,   98,
      311,   98,  310,  314,  315,   98,   98,   98,   98,   96,
       98,   96,   96,   98,   96,  319,  731,  731,  320,  317,
       96,   96,   96,  318,  321,  731,   98,  731,   98,   98,
       96,   98,  731,  322,  326,  328,  731,   98,   98,   98,

       96,  323,  325,   96,  324,   96,   96,   98,   96,  327,
       96,  329,   96,  331,  731,   96,   96,   98,   96,  731,
       98,  731,   98,   98,  334,   98,   96,   98,  330,   98,
      332,  333,   98,   98,  731,   98,  336,  731,  337,  335,
      731,  731,  731,   98,  731,  340,  339,  731,  341,  253,
      253,  253,  253,  253,  253,  253,  361,   96,  338,  342,
      253,  253,  253,  253,  253,  253,  253,  257,  257,  257,
      257,  257,  257,  257,   98,  731,  359,  160,  358,  160,
      160,  160,  343,  731,  343,  731,  731,  344,  344,  344,
      344,  344,  344,  344,  731,  160,  731,  731,  160,  160,

      255,  160,  255,  255,  255,  352,   96,  352,  354,  731,
      353,  353,  353,  353,  353,  353,  353,  731,  255,  731,
       96,  255,  255,   98,  255,  257,  257,  257,  257,  257,
      257,  257,  258,  731,  258,  258,  258,   98,  731,  731,
      731,   96,  163,  731,  163,  163,  163,  731,  731,  731,
      258,  731,  731,  258,  258,   96,  258,   96,   98,  731,
      163,  355,  363,  163,  163,  345,  163,  346,  346,  346,
      347,   96,   98,  349,   98,  350,  350,  350,  351,   96,
      261,  261,  261,  345,  261,  731,  346,  346,   98,  346,
       96,  349,   96,  347,  350,  350,   98,  350,  367,  261,

      261,  351,  261,  356,   96,   96,   96,   98,  362,   98,
      261,   96,   96,   96,   96,   96,   96,   96,   96,  357,
       96,   98,   98,   98,   96,   96,  731,  360,   98,   98,
       98,   98,   98,   98,   98,   98,   96,   98,   96,  731,
      731,   98,   98,  365,   96,  731,  731,  369,  364,  731,
      366,  368,  731,   98,   96,   98,  375,  373,   96,   96,
      731,   98,  370,  372,  374,  731,  371,  377,   96,  376,
      731,   98,   96,  380,   96,   98,   98,  378,  731,  381,
      382,   96,  379,   96,   96,   98,   96,  383,   96,   98,
       96,   98,   96,   96,   96,  384,   96,   96,   98,   96,

       98,   98,   96,   98,   96,   98,   96,   98,  731,   98,
       98,   98,  386,   98,   98,   96,   98,  385,  397,   98,
      731,   98,   96,   98,   96,  390,  387,   96,   96,   96,
       96,  731,   98,  389,  388,  731,   96,  395,  731,   98,
       96,   98,  391,   96,   98,   98,   98,   98,  393,  392,
      394,   96,  396,   98,  398,  400,   96,   98,   96,  399,
       98,   96,   96,   96,   96,   96,  401,  731,   98,  731,
      731,  731,  402,   98,   96,   98,   96,  731,   98,   98,
       98,   98,   98,   96,  403,  405,  406,  408,  410,  404,
      731,   98,   96,   98,  407,   96,  411,   96,   96,   96,

       98,   96,  731,  413,  731,  409,  415,  416,  731,   98,
       96,  731,   98,  414,   98,   98,   98,  417,   98,  412,
      344,  344,  344,  344,  344,  344,  344,   98,  346,  418,
      346,  346,  346,  731,   96,  731,  731,  731,  419,  731,
      731,  731,  420,  423,  731,  422,  346,  731,  731,  346,
      346,   98,  346,   96,   96,  421,  344,  344,  344,  344,
      344,  344,  344,  353,  353,  353,  353,  353,  353,  353,
       98,   98,  731,  255,  731,  255,  255,  255,  424,  731,
      424,  731,  433,  425,  425,  425,  425,  425,  425,  425,
      731,  255,  435,   96,  255,  255,  426,  255,  427,  427,

      427,  428,   96,  731,  350,  432,  350,  350,  350,  731,
       98,  731,  731,   96,  426,  731,  731,  427,  427,   98,
      427,  731,  350,  731,  428,  350,  350,  429,  350,  429,
       98,  731,  430,  430,  430,  430,  430,  430,  430,  353,
      353,  353,  353,  353,  353,  353,   96,  731,  434,  436,
       96,   96,   96,   96,   96,  731,  431,  731,  431,  431,
      431,  731,   96,   98,  437,   96,  731,   98,   98,   98,
       98,   98,   96,   96,  431,   96,   96,  431,  431,   98,
      431,   96,   98,  443,  731,  731,   96,  444,  438,   98,
       98,   96,   98,   98,   96,  731,  441,   96,   98,   96,

      731,  442,  440,   98,   96,   96,   96,  439,   98,  448,
       96,   98,  445,  450,   98,  446,   98,  447,  731,  731,
      449,   98,   98,   98,   96,   96,   96,   98,  731,   96,
       96,  453,   96,  731,  451,  454,  455,   96,   96,  452,
      731,   98,   98,   98,  731,  457,   98,   98,   96,   98,
      459,   96,   96,  731,   98,   98,  731,  456,  731,  731,
       96,  458,   96,   96,  731,   98,   96,   96,   98,   98,
      462,  731,   96,  463,  731,  460,  461,   98,   96,   98,
       98,  466,   96,   98,   98,  464,   96,  465,  468,   98,
       96,  467,   96,  731,   96,   98,   96,   96,   96,   98,

      477,   96,   96,   98,   96,  470,  471,   98,   96,   98,
      469,   98,   96,   98,   98,   98,   96,  731,   98,   98,
       96,   98,  472,  731,  475,   98,  731,  731,   96,   98,
      473,  731,   96,   98,  474,  731,  731,   98,   96,   96,
      478,  480,  481,  482,  476,   98,  731,  479,  484,   98,
      731,   96,  486,  483,  731,   98,   98,   96,   96,   96,
       96,  731,  485,  487,  731,  731,  731,  489,   98,  731,
       96,  488,  490,  731,   98,   98,   98,   98,   96,  492,
      425,  425,  425,  425,  425,  425,  425,   98,  731,  731,
      427,  491,  427,  427,  427,   98,   96,  494,  500,  493,

      425,  425,  425,  425,  425,  425,  425,  731,  427,   96,
      731,  427,  427,   98,  427,  731,  731,  346,  502,  346,
      346,  346,  495,  498,  495,  731,   98,  496,  496,  496,
      496,  496,  496,  496,  731,  346,  504,  731,  346,  346,
      497,  346,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  431,  731,  431,  431,
      431,  731,  499,  731,   96,   96,  350,  731,  350,  350,
      350,  731,   96,  731,  431,   96,   96,  431,  431,   96,
      431,   98,   98,   96,  350,   96,   96,  350,  350,   98,
      350,   96,   98,   98,   96,  508,   98,   96,   96,  509,

       98,   96,   98,   98,   96,   96,   96,   96,   98,   96,
       96,   98,  501,  731,   98,   98,  503,  731,   98,   96,
      511,   98,   98,   98,   98,  731,   98,   98,  506,  505,
       96,  512,  507,  731,  513,  731,   98,  731,   96,  731,
      731,  731,  510,  731,   96,  731,   96,   98,  517,   96,
      520,  514,  521,   96,  519,   98,  515,  518,  516,   96,
      522,   98,  523,   98,  731,  731,   98,  525,  524,   96,
       98,   96,   96,  526,   96,   96,   98,   96,   96,   96,
       96,  527,  528,   96,   96,  731,   98,   96,   98,   98,
      731,   98,   98,   96,   98,   98,   98,   98,   96,   96,

       98,   98,  529,   96,   98,   96,  731,  530,   96,   96,
       98,  731,   96,  531,   96,   98,   98,   96,  533,   96,
       98,  731,   98,  534,   96,   98,   98,   96,  536,   98,
      532,   98,   96,   96,   98,  537,   98,   96,  535,   96,
       96,   98,  731,   96,   98,   96,   96,  731,   96,   98,
       98,   96,   96,   96,   98,  731,   98,   98,   96,  538,
       98,   96,   98,   98,  541,   98,   96,  539,   98,   98,
       98,  540,  543,  542,  556,   98,  544,  731,   98,  731,
      547,  731,  731,   98,  545,  549,   96,  551,  546,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,

      496,  496,  496,   98,   96,  548,  550,   96,  553,  552,
       96,   96,   96,  427,  731,  427,  427,  427,  731,   96,
      731,   98,   96,  554,   98,   96,   96,   98,   98,   98,
      555,  427,   96,   96,  427,  427,   98,  427,  731,   98,
      731,   96,   98,   98,   96,  731,   96,   96,  731,   98,
       98,   96,   96,  558,   96,  557,  731,  561,   98,   96,
      731,   98,  559,   98,   98,  560,  731,  562,   98,   98,
       96,   98,   96,  563,   96,  731,   98,  565,  731,  731,
       96,  566,   96,  564,   96,  567,  731,   98,   96,   98,
       96,   98,  568,   96,   96,  571,  572,   98,   96,   98,

      569,   98,   96,  570,   96,   98,   96,   98,   96,  731,
       98,   98,   96,  731,   96,   98,   96,   96,   96,   98,
       96,   98,   96,   98,  575,   98,  576,  731,   96,   98,
      573,   98,  731,   98,   98,   98,  574,   98,  731,   98,
       96,   96,  731,   96,  580,   98,  731,   96,   96,  578,
       96,  731,  579,  577,   96,  583,  731,   98,   98,  584,
       98,  581,  585,  582,   98,   98,   96,   98,  586,   96,
      731,   98,  731,  588,   96,   96,   96,  731,  587,  731,
       96,   96,  731,   98,   96,   96,   98,  591,  731,  593,
       96,   98,   98,   98,  590,  592,  594,   98,   98,  589,

       96,   98,   98,  731,   96,  595,   96,   98,   96,  731,
      731,   96,   96,   96,   96,   96,   96,   98,  731,   96,
      596,   98,   96,   98,   96,   98,  599,  597,   98,   98,
       98,   98,   98,   98,  598,  601,   98,   96,  731,   98,
       96,   98,  731,  600,  731,  604,   96,  602,   96,   96,
      606,   96,   96,  731,   98,  611,   96,   98,  605,  610,
       96,  609,  603,   98,   96,   98,   98,  731,   98,   98,
      607,  608,   96,   98,   96,   96,   96,   98,  731,  731,
      731,   98,  731,   96,  612,   96,   96,   96,   96,   98,
       96,   98,   98,   98,  731,  614,  615,  613,  620,  617,

       98,   96,   98,   98,   98,   98,   96,   98,  731,   96,
      731,  619,   96,  731,  616,  622,  731,   96,   98,   96,
       96,   96,  618,   98,  624,  625,   98,  626,  621,   98,
      629,   96,   96,  623,   98,   96,   98,   98,   98,  731,
      627,  630,   96,   96,   96,   96,  628,   96,   98,   98,
       96,   96,   98,  632,  631,  731,  633,   96,  731,   98,
       98,   98,   98,   96,   98,  644,   96,   98,   98,   96,
       96,  731,  634,  635,   98,  636,   96,  637,  731,   96,
       98,   96,   96,   98,   96,   96,   98,   98,  639,  640,
      638,   96,  731,   98,  731,  641,   98,   96,   98,   98,

      731,   98,   98,  731,  731,   96,   96,   96,   98,  646,
       96,  642,   96,   96,   98,   96,   96,  643,  647,  645,
      648,  649,   98,   98,   98,   96,  731,   98,   96,   98,
       98,  731,   98,   98,  731,  731,   96,   96,   96,   96,
      731,   96,   98,  651,   96,   98,   96,   96,  652,   96,
      650,  654,  657,   98,   98,   98,   98,  659,   98,   96,
      731,   98,   96,   98,   98,  655,   98,  660,  653,  656,
       96,   96,   96,   96,   96,   96,   98,  662,  658,   98,
      665,  661,   96,  666,   96,  667,   96,   98,   98,   98,
       98,   98,   98,   96,   96,   96,   96,   96,  668,   98,

      731,   98,  669,   98,  731,   96,  731,   96,  731,  731,
       98,   98,   98,   98,   98,  672,  731,  670,   96,   96,
      675,  677,   98,  680,   98,  678,  671,   96,  731,  673,
       96,  674,   96,  676,  681,   98,   98,  731,  679,   96,
       96,  683,   96,   96,   98,  684,   96,   98,  731,   98,
       96,   96,   96,   96,  682,   96,   98,   98,   96,   98,
       98,   96,   96,   98,   96,  685,  731,   98,   98,   98,
       98,  686,   98,   96,  687,   98,   96,  731,   98,   98,
       96,   98,  731,  690,  688,   96,   96,  731,  731,  692,
       98,  731,  731,   98,  691,   96,   96,   98,   96,  689,

      731,   96,   98,   98,  696,  694,   96,  693,  698,  700,
       96,   96,   98,   98,  731,   98,  695,  697,   98,   96,
       96,   96,   96,   98,   96,  731,   96,   98,   98,  699,
      731,  701,  731,   96,   96,  731,   98,   98,   98,   98,
       96,   98,  702,   98,   96,   96,  731,  706,   96,  703,
       98,   98,  704,   96,   96,   96,  705,   98,  731,  709,
       96,   98,   98,  707,  711,   98,  708,   96,  731,  731,
       98,   98,   98,   96,   96,  710,  712,   98,  731,   96,
      714,   96,  713,   96,   98,  718,  717,  715,   96,  731,
       98,   98,   96,   96,  731,  721,   98,  716,   98,   96,

       98,   96,   96,  719,  731,   98,  720,  731,  731,   98,
       98,  722,  731,  731,  731,  731,   98,  731,   98,   98,
      731,  731,  731,  731,  731,  725,  731,  731,  731,  731,
      731,  727,  723,  731,  731,  724,  731,  731,  729,  731,
      730,  726,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  728,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   68,   68,  731,   68,   68,
       68,   68,   68,   68,   97,  731,  731,  731,   97,   97,
       97,   97,  168,  168,  168,  169,  169,  169,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  259,  259,  348,

      348,  731,  348,  664,  731,  664,  664,  664,  664,    3,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731
    } ;

static yyconst short int yy_chk[2890] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   10,
       13,   13,   14,   19,  664,   22,   21,   22,   22,   22,
       22,   22,   22,   22,   30,   30,   23,  644,   19,   21,

       21,   23,   14,  176,   32,   25,   25,   25,   25,   25,
       25,   25,   23,   26,   28,  101,   33,   26,   61,   10,
       24,   32,   24,   24,   24,   24,   24,   24,   24,   25,
       39,   68,   28,   33,   28,   28,   40,   41,   24,   57,
       98,   24,   24,   24,   34,   24,   24,   39,   34,   34,
       44,   38,   96,   40,   41,   47,   24,   25,   61,   95,
       24,   24,   42,   24,   43,   34,   68,   44,   38,   49,
       33,   24,   47,   69,   24,   38,   38,   41,   91,   42,
       38,   43,   69,   39,   41,   57,   49,   39,   41,   39,
       38,   41,   40,   45,   48,   38,   85,   46,   44,   38,

       76,   44,   42,   42,   44,   52,   42,   50,   38,   47,
       45,   48,   51,   42,   46,   43,   42,   43,   55,   53,
       63,  100,   52,   97,   50,   49,   43,   54,   49,   51,
       37,  107,   29,   18,   48,   55,   53,   45,   48,   15,
       97,    9,   46,    3,   54,  110,   99,   45,  107,   46,
       46,   50,   52,    0,   46,    0,   51,    0,   55,   51,
       51,  100,  110,   99,    0,   55,    0,   53,   52,    0,
       51,   51,   53,   51,  113,   54,    0,  131,  109,  115,
      103,   54,   77,   77,   77,   77,   77,   77,   77,    0,
      105,  113,    0,  107,  131,  109,  115,  103,   77,   77,

       99,   77,   77,   77,   83,    0,   83,  105,  110,   83,
       83,   83,   83,   83,   83,   83,   77,   77,  113,  115,
       77,   77,  104,   77,   81,   81,   81,   81,   81,   81,
       81,   84,   84,   84,  103,   84,  109,  108,  112,  104,
       81,   81,  105,   81,   81,   81,  174,  111,    0,    0,
       84,   84,    0,   84,  108,  112,    0,    0,   81,   81,
      116,   84,   81,   81,  111,   81,   82,    0,   82,   82,
       82,   82,   82,   82,   82,  114,  104,  116,  117,    0,
      118,  119,    0,    0,   82,    0,  174,   82,   82,   82,
      108,   82,  114,  121,  122,  117,  112,  118,  119,  111,

      116,    0,   82,  120,  124,  136,   82,   82,  123,   82,
      121,  122,    0,  125,    0,    0,  126,   82,  106,  127,
      120,  124,  136,  128,  129,  123,  119,    0,  130,  119,
      125,  117,  114,  126,  132,  106,  127,    0,  118,  119,
      128,  129,    0,    0,  121,  130,    0,  134,  120,    0,
      133,  132,  135,  122,  120,    0,    0,  136,  106,  106,
      106,  106,  106,  124,  134,  123,  106,  133,  137,  135,
      138,  125,  126,  127,  106,  106,  106,  140,  106,  128,
      139,  141,  129,  142,    0,  137,  130,  138,    0,  132,
      143,    0,  133,  146,  140,  147,  148,  139,  141,  145,

      142,  133,  144,  153,  134,  135,    0,  143,  133,  149,
      146,  150,  147,  148,  151,  152,  145,    0,  138,  144,
      153,  139,    0,  140,  138,    0,  149,  154,  150,  137,
      140,  151,  152,  169,  140,  140,  143,  142,  173,  141,
      145,  146,  144,  147,  154,  144,    0,  181,  177,    0,
      169,  148,  179,    0,  143,  173,  144,    0,  144,  150,
        0,  153,  149,  152,  181,  177,  152,  185,  150,  179,
      151,  159,    0,  159,  178,  154,  159,  159,  159,  159,
      159,  159,  159,  160,  185,  160,  160,  160,  162,  173,
      162,  178,  179,  162,  162,  162,  162,  162,  162,  162,

        0,  160,  177,    0,  160,  160,  181,  160,  161,  161,
      161,  161,  161,  161,  161,  163,    0,  163,  163,  163,
      185,  182,    0,  191,  161,  161,  178,  161,  161,  161,
        0,    0,    0,  163,    0,    0,  163,  163,  182,  163,
      191,    0,  161,  161,    0,    0,  161,  161,  180,  161,
      164,  164,  164,    0,  164,  165,  165,  165,  165,  165,
      165,  165,  184,    0,  182,  180,    0,  168,    0,  164,
      164,    0,  164,    0,  191,  182,  189,  183,    0,  184,
      164,  166,  166,  166,  166,  166,  166,  166,  168,  168,
      168,  168,  168,  189,  183,  186,  187,    0,  166,  180,

      166,  166,  166,    0,    0,  180,  180,  168,  168,  188,
      168,  190,  186,  187,  168,  192,  166,  194,  168,  166,
      166,  183,  166,  193,  184,  195,  188,    0,  190,  197,
      189,  196,  192,  198,  194,  199,  200,    0,  201,  186,
      193,    0,  195,  202,  187,    0,  197,  203,  196,  208,
      198,  206,  199,  200,  187,  201,  188,  204,  192,  205,
      202,    0,  193,  210,  203,  207,  208,  209,  206,  190,
      211,  196,  188,  197,  204,    0,  205,    0,  201,  195,
      210,  212,  207,    0,  209,  214,  213,  211,  215,  198,
      208,  202,  199,  200,  200,  206,    0,  204,  212,  205,

      203,  216,  214,  213,  217,  215,  218,  205,    0,  207,
      221,  209,  219,  207,  211,  210,  220,  222,  216,  225,
      223,  217,  224,  218,  227,  212,  213,  221,  226,  219,
      228,  220,  224,  220,  222,  230,  225,  223,    0,  224,
      229,  227,  231,    0,  232,  226,    0,  228,  233,  234,
      235,  236,  230,  237,  221,  216,  238,  229,  217,  231,
      219,  232,  218,  222,  223,  233,  234,  235,  236,  239,
      237,  240,  241,  238,  242,  227,    0,    0,  228,  225,
      243,  244,  245,  226,  229,    0,  239,    0,  240,  241,
      246,  242,    0,  230,  235,  237,    0,  243,  244,  245,

      247,  231,  234,  248,  233,  249,  250,  246,  251,  236,
      263,  238,  271,  240,    0,  286,  288,  247,  269,    0,
      248,    0,  249,  250,  243,  251,  268,  263,  239,  271,
      241,  242,  286,  288,    0,  269,  245,    0,  246,  244,
        0,    0,    0,  268,    0,  249,  248,    0,  250,  252,
      252,  252,  252,  252,  252,  252,  271,  264,  247,  251,
      253,  253,  253,  253,  253,  253,  253,  256,  256,  256,
      256,  256,  256,  256,  264,    0,  269,  253,  268,  253,
      253,  253,  254,    0,  254,    0,    0,  254,  254,  254,
      254,  254,  254,  254,    0,  253,    0,    0,  253,  253,

      255,  253,  255,  255,  255,  262,  265,  262,  264,    0,
      262,  262,  262,  262,  262,  262,  262,    0,  255,    0,
      273,  255,  255,  265,  255,  257,  257,  257,  257,  257,
      257,  257,  258,    0,  258,  258,  258,  273,    0,    0,
        0,  276,  257,    0,  257,  257,  257,    0,    0,    0,
      258,    0,    0,  258,  258,  272,  258,  266,  276,    0,
      257,  265,  273,  257,  257,  259,  257,  259,  259,  259,
      259,  267,  272,  260,  266,  260,  260,  260,  260,  270,
      261,  261,  261,  259,  261,    0,  259,  259,  267,  259,
      274,  260,  275,  259,  260,  260,  270,  260,  276,  261,

      261,  260,  261,  266,  278,  277,  279,  274,  272,  275,
      261,  280,  281,  282,  284,  285,  283,  287,  289,  267,
      290,  278,  277,  279,  291,  292,    0,  270,  280,  281,
      282,  284,  285,  283,  287,  289,  294,  290,  293,    0,
        0,  291,  292,  275,  295,    0,    0,  278,  274,    0,
      275,  277,    0,  294,  296,  293,  284,  282,  297,  298,
        0,  295,  279,  281,  283,    0,  280,  287,  299,  285,
        0,  296,  300,  292,  302,  297,  298,  290,    0,  293,
      294,  301,  291,  303,  304,  299,  305,  295,  306,  300,
      307,  302,  308,  310,  309,  296,  313,  314,  301,  311,

      303,  304,  315,  305,  312,  306,  316,  307,    0,  308,
      310,  309,  298,  313,  314,  317,  311,  297,  312,  315,
        0,  312,  318,  316,  319,  302,  299,  320,  321,  322,
      323,    0,  317,  301,  300,    0,  324,  310,    0,  318,
      327,  319,  305,  325,  320,  321,  322,  323,  307,  306,
      309,  326,  311,  324,  313,  317,  328,  327,  329,  315,
      325,  330,  331,  335,  332,  333,  318,    0,  326,    0,
        0,    0,  319,  328,  334,  329,  336,    0,  330,  331,
      335,  332,  333,  338,  320,  322,  323,  325,  327,  321,
        0,  334,  337,  336,  324,  339,  328,  340,  341,  342,

      338,  354,    0,  330,    0,  326,  332,  333,    0,  337,
      377,    0,  339,  331,  340,  341,  342,  334,  354,  329,
      343,  343,  343,  343,  343,  343,  343,  377,  346,  336,
      346,  346,  346,    0,  356,    0,    0,    0,  337,    0,
        0,    0,  338,  342,    0,  341,  346,    0,    0,  346,
      346,  356,  346,  358,  355,  340,  344,  344,  344,  344,
      344,  344,  344,  352,  352,  352,  352,  352,  352,  352,
      358,  355,    0,  344,    0,  344,  344,  344,  347,    0,
      347,    0,  356,  347,  347,  347,  347,  347,  347,  347,
        0,  344,  358,  359,  344,  344,  348,  344,  348,  348,

      348,  348,  357,    0,  350,  355,  350,  350,  350,    0,
      359,    0,    0,  360,  348,    0,    0,  348,  348,  357,
      348,    0,  350,    0,  348,  350,  350,  351,  350,  351,
      360,    0,  351,  351,  351,  351,  351,  351,  351,  353,
      353,  353,  353,  353,  353,  353,  361,    0,  357,  359,
      362,  363,  364,  365,  367,    0,  353,    0,  353,  353,
      353,    0,  368,  361,  360,  370,    0,  362,  363,  364,
      365,  367,  366,  372,  353,  369,  371,  353,  353,  368,
      353,  373,  370,  366,    0,    0,  374,  366,  361,  366,
      372,  375,  369,  371,  376,    0,  364,  378,  373,  379,

        0,  365,  363,  374,  380,  381,  383,  362,  375,  370,
      382,  376,  367,  372,  378,  368,  379,  369,    0,    0,
      371,  380,  381,  383,  384,  385,  386,  382,    0,  387,
      388,  375,  389,    0,  373,  376,  378,  390,  391,  374,
        0,  384,  385,  386,    0,  381,  387,  388,  392,  389,
      383,  393,  394,    0,  390,  391,    0,  380,    0,    0,
      395,  382,  396,  397,    0,  392,  398,  399,  393,  394,
      386,    0,  400,  387,    0,  384,  385,  395,  401,  396,
      397,  390,  402,  398,  399,  388,  403,  389,  392,  400,
      404,  391,  405,    0,  406,  401,  407,  409,  408,  402,

      404,  410,  411,  403,  413,  395,  396,  404,  412,  405,
      394,  406,  414,  407,  409,  408,  415,    0,  410,  411,
      416,  413,  399,    0,  402,  412,    0,    0,  417,  414,
      400,    0,  418,  415,  401,    0,    0,  416,  419,  420,
      405,  408,  409,  410,  403,  417,    0,  406,  412,  418,
        0,  421,  414,  411,    0,  419,  420,  422,  423,  435,
      437,    0,  413,  415,    0,    0,    0,  417,  421,    0,
      433,  416,  417,    0,  422,  423,  435,  437,  439,  420,
      424,  424,  424,  424,  424,  424,  424,  433,    0,    0,
      427,  419,  427,  427,  427,  439,  432,  422,  435,  421,

      425,  425,  425,  425,  425,  425,  425,    0,  427,  434,
        0,  427,  427,  432,  427,    0,    0,  425,  437,  425,
      425,  425,  428,  433,  428,    0,  434,  428,  428,  428,
      428,  428,  428,  428,    0,  425,  439,    0,  425,  425,
      432,  425,  429,  429,  429,  429,  429,  429,  429,  430,
      430,  430,  430,  430,  430,  430,  431,    0,  431,  431,
      431,    0,  434,    0,  436,  438,  430,    0,  430,  430,
      430,    0,  440,    0,  431,  441,  446,  431,  431,  442,
      431,  436,  438,  443,  430,  444,  445,  430,  430,  440,
      430,  447,  441,  446,  448,  443,  442,  449,  450,  444,

      443,  451,  444,  445,  452,  454,  453,  455,  447,  456,
      457,  448,  436,    0,  449,  450,  438,    0,  451,  459,
      446,  452,  454,  453,  455,    0,  456,  457,  441,  440,
      458,  447,  442,    0,  448,    0,  459,    0,  460,    0,
        0,    0,  445,    0,  461,    0,  462,  458,  452,  463,
      455,  449,  455,  464,  454,  460,  450,  453,  451,  465,
      455,  461,  455,  462,    0,    0,  463,  457,  456,  466,
      464,  467,  468,  458,  469,  470,  465,  471,  472,  473,
      474,  459,  460,  475,  476,    0,  466,  477,  467,  468,
        0,  469,  470,  478,  471,  472,  473,  474,  479,  480,

      475,  476,  461,  481,  477,  482,    0,  464,  483,  484,
      478,    0,  485,  465,  486,  479,  480,  487,  472,  489,
      481,    0,  482,  473,  488,  483,  484,  490,  476,  485,
      468,  486,  491,  492,  487,  478,  489,  493,  474,  494,
      500,  488,    0,  497,  490,  498,  501,    0,  503,  491,
      492,  504,  499,  505,  493,    0,  494,  500,  508,  483,
      497,  502,  498,  501,  488,  503,  506,  484,  504,  499,
      505,  486,  490,  489,  508,  508,  491,    0,  502,    0,
      494,    0,    0,  506,  492,  498,  507,  501,  493,  495,
      495,  495,  495,  495,  495,  495,  496,  496,  496,  496,

      496,  496,  496,  507,  509,  497,  499,  510,  505,  502,
      511,  512,  514,  496,    0,  496,  496,  496,    0,  515,
        0,  509,  513,  506,  510,  516,  517,  511,  512,  514,
      507,  496,  518,  519,  496,  496,  515,  496,    0,  513,
        0,  520,  516,  517,  521,    0,  522,  523,    0,  518,
      519,  524,  525,  511,  526,  510,    0,  514,  520,  527,
        0,  521,  512,  522,  523,  513,    0,  515,  524,  525,
      528,  526,  529,  516,  530,    0,  527,  519,    0,    0,
      531,  520,  532,  518,  533,  520,    0,  528,  534,  529,
      535,  530,  521,  536,  537,  524,  525,  531,  538,  532,

      522,  533,  539,  523,  540,  534,  541,  535,  543,    0,
      536,  537,  545,    0,  542,  538,  544,  547,  546,  539,
      548,  540,  549,  541,  532,  543,  533,    0,  550,  545,
      530,  542,    0,  544,  547,  546,  531,  548,    0,  549,
      551,  552,    0,  553,  539,  550,    0,  554,  556,  536,
      555,    0,  537,  535,  557,  542,    0,  551,  552,  544,
      553,  540,  546,  541,  554,  556,  558,  555,  547,  559,
        0,  557,    0,  550,  560,  561,  562,    0,  549,    0,
      563,  564,    0,  558,  565,  566,  559,  553,    0,  555,
      567,  560,  561,  562,  552,  554,  557,  563,  564,  551,

      568,  565,  566,    0,  570,  558,  569,  567,  571,    0,
        0,  572,  573,  574,  575,  576,  577,  568,    0,  578,
      559,  570,  579,  569,  581,  571,  565,  562,  572,  573,
      574,  575,  576,  577,  563,  567,  578,  580,    0,  579,
      582,  581,    0,  566,    0,  569,  583,  567,  584,  585,
      572,  587,  586,    0,  580,  577,  591,  582,  570,  576,
      588,  575,  568,  583,  589,  584,  585,    0,  587,  586,
      573,  574,  590,  591,  592,  594,  593,  588,    0,    0,
        0,  589,    0,  597,  580,  595,  596,  598,  599,  590,
      600,  592,  594,  593,    0,  583,  586,  582,  591,  588,

      597,  601,  595,  596,  598,  599,  602,  600,    0,  603,
        0,  590,  604,    0,  587,  593,    0,  605,  601,  606,
      607,  608,  589,  602,  595,  596,  603,  597,  592,  604,
      600,  609,  610,  594,  605,  611,  606,  607,  608,    0,
      598,  601,  612,  613,  614,  615,  599,  616,  609,  610,
      617,  618,  611,  603,  602,    0,  604,  619,    0,  612,
      613,  614,  615,  620,  616,  620,  621,  617,  618,  622,
      623,    0,  605,  606,  619,  609,  624,  611,    0,  625,
      620,  626,  627,  621,  628,  629,  622,  623,  614,  617,
      612,  630,    0,  624,    0,  618,  625,  631,  626,  627,

        0,  628,  629,    0,    0,  632,  633,  634,  630,  623,
      635,  619,  637,  636,  631,  639,  640,  619,  625,  621,
      626,  627,  632,  633,  634,  638,    0,  635,  641,  637,
      636,    0,  639,  640,    0,    0,  642,  643,  647,  649,
        0,  645,  638,  631,  646,  641,  648,  650,  632,  651,
      630,  634,  637,  642,  643,  647,  649,  639,  645,  652,
        0,  646,  653,  648,  650,  635,  651,  641,  633,  636,
      654,  655,  656,  657,  658,  659,  652,  643,  638,  653,
      645,  642,  660,  646,  662,  648,  666,  654,  655,  656,
      657,  658,  659,  661,  667,  665,  668,  669,  650,  660,

        0,  662,  651,  666,    0,  670,    0,  671,    0,    0,
      661,  667,  665,  668,  669,  655,    0,  653,  672,  673,
      658,  660,  670,  662,  671,  660,  654,  675,    0,  656,
      674,  657,  676,  659,  665,  672,  673,    0,  661,  677,
      678,  669,  679,  680,  675,  670,  681,  674,    0,  676,
      682,  683,  684,  685,  668,  686,  677,  678,  687,  679,
      680,  691,  688,  681,  689,  671,    0,  682,  683,  684,
      685,  672,  686,  690,  674,  687,  692,    0,  691,  688,
      693,  689,    0,  680,  678,  694,  695,    0,    0,  682,
      690,    0,    0,  692,  680,  696,  697,  693,  698,  679,

        0,  699,  694,  695,  687,  684,  700,  683,  689,  691,
      701,  702,  696,  697,    0,  698,  685,  688,  699,  703,
      704,  706,  705,  700,  707,    0,  708,  701,  702,  690,
        0,  692,    0,  709,  710,    0,  703,  704,  706,  705,
      712,  707,  694,  708,  711,  713,    0,  699,  714,  696,
      709,  710,  697,  715,  716,  717,  698,  712,    0,  702,
      718,  711,  713,  700,  704,  714,  701,  719,    0,    0,
      715,  716,  717,  720,  721,  703,  705,  718,    0,  722,
      708,  723,  707,  724,  719,  712,  711,  709,  725,    0,
      720,  721,  726,  728,    0,  717,  722,  710,  723,  727,

      724,  729,  730,  714,    0,  725,  715,    0,    0,  726,
      728,  719,    0,    0,    0,    0,  727,    0,  729,  730,
        0,    0,    0,    0,    0,  723,    0,    0,    0,    0,
        0,  725,  721,    0,    0,  722,    0,    0,  727,    0,
      729,  724,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  726,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  733,  733,    0,  733,  733,
      733,  733,  733,  733,  734,    0,    0,    0,  734,  734,
      734,  734,  735,  735,  735,  736,  736,  736,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  738,  738,  739,

      739,    0,  739,  740,    0,  740,  740,  740,  740,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#define YY_NO_UNPUT 1
#line 13 "lexer.l"
import "ecdefs"
#define YYLTYPE Location
#define YY_NEVER_INTERACTIVE 1    // Avoid calling isatty on eC File object

#include "grammar.h"

bool echoOn = true;
public void SetEchoOn(bool b) { echoOn = b; }

extern YYLTYPE type_yylloc;
extern YYLTYPE expression_yylloc;

extern File fileInput;
int preprocessor();
int comment();

void TESTTTT()
{
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   type_yylloc.end.charPos += yyleng;
   type_yylloc.end.pos += yyleng;
   expression_yylloc.end.charPos += yyleng;
   expression_yylloc.end.pos += yyleng;
}

#define YY_USER_ACTION  \
   TESTTTT();

   /*
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   */

#define YY_INPUT(buf,result,max_size) \
   result = fileInput.Read(buf, 1, max_size) \

YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
File fileStack[MAX_INCLUDE_DEPTH];
char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
public void SetSomeSourceFileStack(const char * fileName, int index) { strcpy(sourceFileStack[index], fileName); }
YYLTYPE locStack[MAX_INCLUDE_DEPTH];
AccessMode declModeStack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

#define uint _uint
default:

#line 1293 "lexer.ec"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 63 "lexer.l"



   yylloc.start = yylloc.end;
   type_yylloc.start = type_yylloc.end;
   expression_yylloc.start = expression_yylloc.end;


#line 1453 "lexer.ec"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 732 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2810 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "lexer.l"
{ preprocessor(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 72 "lexer.l"
{ comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "lexer.l"
{ commentCPP(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return(AUTO); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return(BREAK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return(CASE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return(CHAR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return(CONST); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return(CONTINUE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return(DEFAULT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return(DO); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return(DOUBLE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return(ELSE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return(ENUM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return(EXTERN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return(FLOAT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return(FOR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 89 "lexer.l"
{ return(GOTO); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 90 "lexer.l"
{ return(IF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 91 "lexer.l"
{ return(INT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 92 "lexer.l"
{ return(UINT); }
	YY_BREAK
/* "uint16"            { return(UINT16); } */
/* "uint32"            { return(UINT32); } */
/* "bool"              { return(BOOL_TOKEN); } */
case 22:
YY_RULE_SETUP
#line 96 "lexer.l"
{ return(LONG); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 97 "lexer.l"
{ return(REGISTER); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return(RETURN); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return(SHORT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return(SIZEOF); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return(BUILTIN_OFFSETOF); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return(STATIC); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return(THREAD); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return(STRUCT); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return(SWITCH); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return(TYPEDEF); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return(UNION); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return(UNSIGNED); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return(VOID); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 114 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 117 "lexer.l"
{ return(WHILE); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 119 "lexer.l"
{ return(PROPERTY); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return(SETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "lexer.l"
{ return(GETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return(ISPROPSET); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return(CLASS); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return(THISCLASS); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return(VIRTUAL); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return(DELETE); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return(NEWOP); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return(NEW0OP); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "lexer.l"
{ return(RENEW); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "lexer.l"
{ return(RENEW0); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "lexer.l"
{ return(IMPORT); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "lexer.l"
{ return(DEFINE); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "lexer.l"
{ return(INT128); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "lexer.l"
{ return(VALIST); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "lexer.l"
{ return(VAARG); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "lexer.l"
{ return(BOOL); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "lexer.l"
{ return(_BOOL); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "lexer.l"
{ return(_COMPLEX); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 141 "lexer.l"
{ return(_IMAGINARY); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 142 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
/* "__attribute__".?"(("({D}|{L})*"))" { return(EXT_ATTRIB); } */
/* DID I MEAN? "__attribute__"" "*"(("" "*({D}|{L})*" "*("("({D}|{L})*(" "*","" "*({D}|{L})*)*" "*")")?" "*"))" { return(EXT_ATTRIB); } */
/*
 "__attribute_deprecated__"(" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute__"           (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute"             (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 */
/*
 [__attribute__] [spaces]
   [((] [spaces]
      [digits | letters] [spaces]
         ( [(]  [digits or letters or "]  ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces]  [)] )?
      [spaces]
      ( [,] [spaces]  [digits or letters]  [spaces]
         ( [(]  [digits or letters or "]
            ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces] [)]
         )? [spaces]
      )*
   [))]
 */
/* "__attribute__".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); } */
/* "__attribute".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); }*/
case 68:
YY_RULE_SETUP
#line 169 "lexer.l"
{ return ATTRIB_DEP; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 170 "lexer.l"
{ return ATTRIB; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 171 "lexer.l"
{ return __ATTRIB; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 173 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 174 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 175 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 176 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 177 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 178 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 179 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 180 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 181 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 182 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 184 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 186 "lexer.l"
{ return(CONST /*EXT_DECL*/); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 188 "lexer.l"
{ return(PUBLIC); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 189 "lexer.l"
{ return(PRIVATE); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return(TYPED_OBJECT); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 191 "lexer.l"
{ return(ANY_OBJECT); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return(_INCREF); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 193 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 195 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 197 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return(TYPEOF); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return(WATCH); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 200 "lexer.l"
{ return(STOPWATCHING); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return(FIREWATCHERS); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 202 "lexer.l"
{ return(WATCHABLE); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 203 "lexer.l"
{ return(CLASS_DESIGNER); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return(CLASS_NO_EXPANSION); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 205 "lexer.l"
{ return(CLASS_FIXED); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return(CLASS_DEFAULT_PROPERTY); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 207 "lexer.l"
{ return(PROPERTY_CATEGORY); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 208 "lexer.l"
{ return(CLASS_DATA); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 209 "lexer.l"
{ return(CLASS_PROPERTY); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 210 "lexer.l"
{ return(SUBCLASS); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 211 "lexer.l"
{ return(NAMESPACE); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 212 "lexer.l"
{ return(DBTABLE); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 213 "lexer.l"
{ return(DBFIELD); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 214 "lexer.l"
{ return(DBINDEX); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 215 "lexer.l"
{ return(DATABASE_OPEN); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 217 "lexer.l"
{ return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }  // ("::"|(({IDENT}"::")*)){IDENT}  { return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 219 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 221 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 222 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 223 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 225 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 226 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 227 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 229 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 230 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 231 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 233 "lexer.l"
{ return(STRING_LITERAL); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 234 "lexer.l"
{ return(WIDE_STRING_LITERAL); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 236 "lexer.l"
{ return(ELLIPSIS); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 237 "lexer.l"
{ return(RIGHT_ASSIGN); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 238 "lexer.l"
{ return(LEFT_ASSIGN); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 239 "lexer.l"
{ return(ADD_ASSIGN); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 240 "lexer.l"
{ return(SUB_ASSIGN); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 241 "lexer.l"
{ return(MUL_ASSIGN); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 242 "lexer.l"
{ return(DIV_ASSIGN); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 243 "lexer.l"
{ return(MOD_ASSIGN); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 244 "lexer.l"
{ return(AND_ASSIGN); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 245 "lexer.l"
{ return(XOR_ASSIGN); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 246 "lexer.l"
{ return(OR_ASSIGN); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 247 "lexer.l"
{ return(RIGHT_OP); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 248 "lexer.l"
{ return(LEFT_OP); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 249 "lexer.l"
{ return(INC_OP); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 250 "lexer.l"
{ return(DEC_OP); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 251 "lexer.l"
{ return(PTR_OP); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 252 "lexer.l"
{ return(AND_OP); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 253 "lexer.l"
{ return(OR_OP); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 254 "lexer.l"
{ return(LE_OP); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 255 "lexer.l"
{ return(GE_OP); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 256 "lexer.l"
{ return(EQ_OP); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 257 "lexer.l"
{ return(NE_OP); }
	YY_BREAK
/* "::"        { return(CLASS_OP); } */
case 149:
YY_RULE_SETUP
#line 259 "lexer.l"
{ return(';'); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 260 "lexer.l"
{ return('{'); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 261 "lexer.l"
{ return('}'); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 262 "lexer.l"
{ return(','); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 263 "lexer.l"
{ return(':'); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 264 "lexer.l"
{ return('='); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 265 "lexer.l"
{ return('('); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 266 "lexer.l"
{ return(')'); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 267 "lexer.l"
{ return('['); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 268 "lexer.l"
{ return(']'); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 269 "lexer.l"
{ return('.'); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 270 "lexer.l"
{ return('&'); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 271 "lexer.l"
{ return('!'); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 272 "lexer.l"
{ return('~'); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 273 "lexer.l"
{ return('-'); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 274 "lexer.l"
{ return('+'); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 275 "lexer.l"
{ return('*'); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 276 "lexer.l"
{ return('/'); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 277 "lexer.l"
{ return('%'); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 278 "lexer.l"
{ return('<'); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 279 "lexer.l"
{ return('>'); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 280 "lexer.l"
{ return('^'); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 281 "lexer.l"
{ return('|'); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 282 "lexer.l"
{ return('?'); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 283 "lexer.l"
{ return('$'); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 285 "lexer.l"
{
      while(include_stack_ptr && !fileStack[include_stack_ptr-1])
      {
         --include_stack_ptr;
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }

      if ( --include_stack_ptr < 0 )
      {
         include_stack_ptr = 0;
         yyterminate();
      }
      else
      {
         delete fileInput;
         yy_delete_buffer( YY_CURRENT_BUFFER );
         fileInput = fileStack[include_stack_ptr];
         yylloc = locStack[include_stack_ptr];
         type_yylloc = locStack[include_stack_ptr];
         expression_yylloc = locStack[include_stack_ptr];
         yy_switch_to_buffer(include_stack[include_stack_ptr] );
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }
   }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 311 "lexer.l"
{ yylloc.start = yylloc.end; type_yylloc.start = type_yylloc.end; expression_yylloc.start = expression_yylloc.end;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 312 "lexer.l"
{
   yylloc.end.charPos = 1; yylloc.end.line += yyleng; yylloc.start = yylloc.end;
   type_yylloc.end.charPos = 1; type_yylloc.end.line += yyleng; type_yylloc.start = type_yylloc.end;
   expression_yylloc.end.charPos = 1; expression_yylloc.end.line += yyleng; expression_yylloc.start = expression_yylloc.end;
   }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 317 "lexer.l"
{
   yylloc.start.charPos++ /*= 3 - (yylloc.start.col % 3)*/; yylloc.end.charPos = yylloc.start.charPos; yylloc.start.pos = yylloc.end.pos;
   expression_yylloc.start.charPos++ /*= 3 - (expression_yylloc.start.col % 3)*/; expression_yylloc.end.charPos = expression_yylloc.start.charPos; expression_yylloc.start.pos = expression_yylloc.end.pos;
   type_yylloc.start.charPos++ /*= 3 - (type_yylloc.start.col % 3)*/; type_yylloc.end.charPos = type_yylloc.start.charPos; type_yylloc.start.pos = type_yylloc.end.pos;
   }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 322 "lexer.l"
{ yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 323 "lexer.l"
{
   yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end;
   if(inCompiler)
      printf("lexer error: invalid char 0x%X at line %d, col %d\n", (unsigned char)yytext[0], yylloc.start.line, yylloc.start.charPos);
   yyerror();
   }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 330 "lexer.l"
ECHO;
	YY_BREAK
#line 2497 "lexer.ec"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 732 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 732 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 731);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 330 "lexer.l"


private:

int yywrap()
{
   return(1);
}

int comment()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      if(c == '/' && last == '*')
         break;
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int commentCPP()
{
   int c; //, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         break;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      //last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int preprocessor()
{
   int c, last = 0;
   int count = 0;
   char line[1024];

   line[0] = '\0';

   for(;;)
   {
      c = input();
      if(c == EOF) break;

      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         if(last != '\\')
         {
            char * pointer = line + 1;
            int lineNumber;
            line[count] = 0;
            lineNumber = GetValue(&pointer);
            if(lineNumber)
            {
               char fileName[MAX_LOCATION];

               int inOut;

               fileName[0] = 0;
               GetString(&pointer, fileName, MAX_LOCATION);
               inOut = GetValue(&pointer);

               if(inOut == 1)
               {
                  char extension[MAX_EXTENSION];

                  defaultDeclMode = declModeStack[include_stack_ptr] = declMode;

                  GetExtension(fileName, extension);
                  if(!strcmp(extension, "c") || !strcmp(extension, "h"))
                     declMode = defaultDeclMode = structDeclMode = defaultAccess;

                  fileStack[include_stack_ptr] = null;
                  include_stack_ptr++;
               }
               else if(inOut == 2)
               {
                  include_stack_ptr--;
                  defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
               }

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               //yylloc.end.pos -= count;

               if(include_stack_ptr > 0 || (lineNumber && fileName[0]))
                  yylloc.end.included = GetIncludeFileID(fileName);
               else
                  yylloc.end.included = 0;
            }
            /*
            int lineNumber = strtol(line+1, &endPtr, 0);
            if(lineNumber)
            {
               GetString(&
               endPtr

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               yylloc.end.pos -= count;
            }
            */
            break;
         }
         count = 0;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
         line[count++] = c;
      }
      else
      {
         yylloc.end.pos++;
         if(c != '\r')
         {
            yylloc.end.charPos++;
            line[count++] = c;
         }
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   line[count] = 0;

   TrimLSpaces(line, line);
   for(c = 0; line[c] && line[c] != ' '; c++);
   if(!strncmp(line, "include", c))
   {
      char includeFile[MAX_LOCATION] = "";

      memmove(line, line+c, strlen(line+c)+1);
      TrimLSpaces(line, line);
      if(line[0] == '\"')
      {
         for(c = 1; line[c]; c++)
         {
            if(line[c] == '\"')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
         }
      }
      else if(line[0] == '<')
      {
         for(c = 1; line[c]; c++)
            if(line[c] == '>')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
      }

      if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
      {
         fprintf( stderr, "%s", $"Includes nested too deeply" );
         exit( 1 );
      }

      if(inCompiler || !FindIncludeFileID(includeFile))
      {
         File file = OpenIncludeFile(includeFile);
         if(file)
         {
            char extension[MAX_EXTENSION];

            fileStack[include_stack_ptr] = fileInput;
            locStack[include_stack_ptr] = yylloc;
            defaultDeclMode = declModeStack[include_stack_ptr] = declMode;
            include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;

            yylloc.start.charPos = yylloc.end.charPos = 1;
            yylloc.start.line = yylloc.end.line = 1;
            yylloc.start.pos = yylloc.end.pos = 0;
            yylloc.start.included = yylloc.end.included = GetIncludeFileID(includeFile);

            GetExtension(includeFile, extension);
            if(!strcmp(extension, "c") || !strcmp(extension, "h"))
               declMode = defaultDeclMode = structDeclMode = defaultAccess;

            fileInput = file;
            yy_switch_to_buffer( yy_create_buffer( fileInput, YY_BUF_SIZE ) );
            BEGIN(INITIAL);
         }
      }
   }
   return 0;
}

public void resetScanner()
{
   YY_FLUSH_BUFFER;
   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;
}

void resetScannerPos(CodePosition pos)
{
   YY_FLUSH_BUFFER;
   yylloc.start = yylloc.end = pos;
   type_yylloc.start = type_yylloc.end = pos;
   expression_yylloc.start = expression_yylloc.end = pos;
}

class LexerBackup
{
   YYLTYPE yylloc;
   YYLTYPE type_yylloc;
   YYLTYPE expression_yylloc;

   AccessMode declMode;
   AccessMode defaultDeclMode;

   File fileInput;
   YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
   File fileStack[MAX_INCLUDE_DEPTH];
   char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
   YYLTYPE locStack[MAX_INCLUDE_DEPTH];
   AccessMode declModeStack[MAX_INCLUDE_DEPTH];
   int include_stack_ptr;
   YY_BUFFER_STATE buffer;

   int yy_n_chars;
   char * yytext_ptr;
   char * yy_c_buf_p;
   FILE * yyin;
   char yy_hold_char;
   int yychar;
   int yy_init;
   int yy_start;

};

LexerBackup pushLexer()
{
   LexerBackup backup { };

   backup.yylloc = yylloc;
   backup.type_yylloc = type_yylloc;
   backup.expression_yylloc = expression_yylloc;
   backup.fileInput = fileInput;
   memcpy(backup.include_stack, include_stack, sizeof(include_stack));
   memcpy(backup.fileStack, fileStack, sizeof(fileStack));
   memcpy(backup.sourceFileStack, sourceFileStack, sizeof(sourceFileStack));
   memcpy(backup.locStack, locStack, sizeof(locStack));
   memcpy(backup.declModeStack, declModeStack, sizeof(declModeStack));
   backup.include_stack_ptr = include_stack_ptr;
   backup.defaultDeclMode = defaultDeclMode;
   backup.declMode = declMode;
   backup.buffer = yy_current_buffer;

   backup.yy_n_chars = yy_n_chars;
   backup.yytext_ptr = yytext_ptr;
   backup.yy_c_buf_p = yy_c_buf_p;
   backup.yyin = yyin;
   backup.yy_hold_char = yy_hold_char;
   backup.yychar = yychar;
   backup.yy_init = yy_init;
   backup.yy_start = yy_start;

   yy_init = 1;

   yy_current_buffer = 0;

   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;

   return backup;
}

void popLexer(LexerBackup backup)
{
   yylloc = backup.yylloc;
   type_yylloc = backup.type_yylloc;
   expression_yylloc = backup.expression_yylloc;
   fileInput = backup.fileInput;
   memcpy(include_stack, backup.include_stack, sizeof(include_stack));
   memcpy(fileStack, backup.fileStack, sizeof(fileStack));
   memcpy(sourceFileStack, backup.sourceFileStack, sizeof(sourceFileStack));
   memcpy(locStack, backup.locStack, sizeof(locStack));
   memcpy(declModeStack, backup.declModeStack, sizeof(declModeStack));
   include_stack_ptr = backup.include_stack_ptr;
   defaultDeclMode = backup.defaultDeclMode;
   declMode = structDeclMode = backup.declMode;

   // yy_switch_to_buffer(backup.buffer);
   yy_current_buffer = backup.buffer;
   yy_n_chars = backup.yy_n_chars;
   yytext_ptr = backup.yytext_ptr;
   yy_c_buf_p = backup.yy_c_buf_p;
   yyin = backup.yyin;
   yy_hold_char = backup.yy_hold_char;
   yychar = backup.yychar;
   yy_init = backup.yy_init;
   yy_start = backup.yy_start;

   delete backup;
}
