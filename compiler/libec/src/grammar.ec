/* A Bison parser, made by GNU Bison 2.4.2.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2006, 2009-2010 Free Software
   Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 1



/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 1 "grammar.y"

import "ecdefs"

#define YYSIZE_T size_t
#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define C89_DECL_WARNING            $"eC expects all declarations to precede statements in the block (C89 style)\n"
#define CASE_LABELED_STMT_WARNING   $"labeled statement directly within a case statement\n"

#define uint _uint
default:



/* Line 189 of yacc.c  */
#line 109 "grammar.ec"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     CONSTANT = 259,
     STRING_LITERAL = 260,
     SIZEOF = 261,
     PTR_OP = 262,
     INC_OP = 263,
     DEC_OP = 264,
     LEFT_OP = 265,
     RIGHT_OP = 266,
     LE_OP = 267,
     GE_OP = 268,
     EQ_OP = 269,
     NE_OP = 270,
     AND_OP = 271,
     OR_OP = 272,
     MUL_ASSIGN = 273,
     DIV_ASSIGN = 274,
     MOD_ASSIGN = 275,
     ADD_ASSIGN = 276,
     SUB_ASSIGN = 277,
     LEFT_ASSIGN = 278,
     RIGHT_ASSIGN = 279,
     AND_ASSIGN = 280,
     XOR_ASSIGN = 281,
     OR_ASSIGN = 282,
     TYPE_NAME = 283,
     TYPEDEF = 284,
     EXTERN = 285,
     STATIC = 286,
     AUTO = 287,
     REGISTER = 288,
     CHAR = 289,
     SHORT = 290,
     INT = 291,
     UINT = 292,
     INT64 = 293,
     INT128 = 294,
     LONG = 295,
     SIGNED = 296,
     UNSIGNED = 297,
     FLOAT = 298,
     DOUBLE = 299,
     CONST = 300,
     VOLATILE = 301,
     VOID = 302,
     VALIST = 303,
     STRUCT = 304,
     UNION = 305,
     ENUM = 306,
     ELLIPSIS = 307,
     CASE = 308,
     DEFAULT = 309,
     IF = 310,
     SWITCH = 311,
     WHILE = 312,
     DO = 313,
     FOR = 314,
     GOTO = 315,
     CONTINUE = 316,
     BREAK = 317,
     RETURN = 318,
     IFX = 319,
     ELSE = 320,
     CLASS = 321,
     THISCLASS = 322,
     CLASS_NAME = 323,
     PROPERTY = 324,
     SETPROP = 325,
     GETPROP = 326,
     NEWOP = 327,
     RENEW = 328,
     DELETE = 329,
     EXT_DECL = 330,
     EXT_STORAGE = 331,
     IMPORT = 332,
     DEFINE = 333,
     VIRTUAL = 334,
     ATTRIB = 335,
     PUBLIC = 336,
     PRIVATE = 337,
     TYPED_OBJECT = 338,
     ANY_OBJECT = 339,
     _INCREF = 340,
     EXTENSION = 341,
     ASM = 342,
     TYPEOF = 343,
     WATCH = 344,
     STOPWATCHING = 345,
     FIREWATCHERS = 346,
     WATCHABLE = 347,
     CLASS_DESIGNER = 348,
     CLASS_NO_EXPANSION = 349,
     CLASS_FIXED = 350,
     ISPROPSET = 351,
     CLASS_DEFAULT_PROPERTY = 352,
     PROPERTY_CATEGORY = 353,
     CLASS_DATA = 354,
     CLASS_PROPERTY = 355,
     SUBCLASS = 356,
     NAMESPACE = 357,
     NEW0OP = 358,
     RENEW0 = 359,
     VAARG = 360,
     DBTABLE = 361,
     DBFIELD = 362,
     DBINDEX = 363,
     DATABASE_OPEN = 364,
     ALIGNOF = 365,
     ATTRIB_DEP = 366,
     __ATTRIB = 367,
     BOOL = 368,
     _BOOL = 369,
     _COMPLEX = 370,
     _IMAGINARY = 371,
     RESTRICT = 372,
     THREAD = 373,
     WIDE_STRING_LITERAL = 374,
     BUILTIN_OFFSETOF = 375
   };
#endif



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 39 "grammar.y"

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;

   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;



/* Line 214 of yacc.c  */
#line 310 "grammar.ec"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


/* Copy the second part of user declarations.  */


/* Line 264 of yacc.c  */
#line 335 "grammar.ec"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  299
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   42058

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  146
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  257
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1312
/* YYNRULES -- Number of states.  */
#define YYNSTATES  2181

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   375

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   140,     2,     2,   134,   142,   137,     2,
     124,   125,   121,   138,   129,   139,   132,   141,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   133,   127,
     122,   128,   123,   145,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   135,     2,   136,   143,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   131,   144,   130,   126,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    16,    18,    20,
      25,    30,    33,    35,    39,    44,    48,    51,    54,    56,
      60,    63,    66,    69,    72,    75,    78,    81,    85,    88,
      90,    93,    95,    98,   101,   104,   107,   110,   113,   115,
     117,   121,   123,   127,   131,   133,   135,   139,   143,   145,
     149,   153,   157,   161,   163,   166,   169,   171,   173,   176,
     179,   182,   185,   188,   191,   193,   195,   197,   200,   203,
     205,   208,   211,   214,   217,   219,   222,   225,   229,   234,
     240,   245,   249,   254,   257,   261,   266,   272,   277,   281,
     286,   292,   298,   303,   306,   310,   314,   318,   322,   325,
     330,   334,   338,   341,   346,   350,   353,   357,   360,   364,
     367,   369,   372,   376,   380,   384,   387,   389,   393,   397,
     399,   403,   407,   410,   415,   421,   425,   430,   434,   436,
     440,   444,   448,   451,   455,   458,   463,   469,   473,   478,
     482,   484,   488,   492,   495,   497,   500,   503,   506,   508,
     511,   517,   525,   535,   542,   551,   556,   563,   565,   568,
     572,   577,   580,   583,   585,   587,   590,   593,   595,   597,
     599,   601,   609,   611,   614,   619,   621,   623,   626,   630,
     633,   636,   639,   643,   645,   648,   651,   654,   656,   658,
     660,   663,   666,   669,   673,   677,   679,   681,   684,   687,
     689,   692,   695,   698,   701,   703,   706,   708,   711,   714,
     719,   724,   731,   734,   739,   744,   751,   753,   755,   759,
     761,   766,   772,   774,   776,   778,   780,   784,   786,   788,
     790,   794,   798,   802,   804,   808,   810,   813,   816,   820,
     824,   830,   836,   843,   850,   853,   856,   860,   864,   868,
     872,   876,   880,   884,   888,   892,   896,   900,   902,   904,
     908,   910,   913,   918,   920,   922,   924,   929,   934,   940,
     949,   952,   954,   956,   958,   961,   968,   975,   981,   987,
     994,  1001,  1007,  1013,  1021,  1029,  1036,  1043,  1051,  1059,
    1066,  1073,  1078,  1084,  1089,  1096,  1101,  1103,  1105,  1107,
    1109,  1113,  1116,  1118,  1121,  1124,  1127,  1129,  1134,  1139,
    1143,  1148,  1153,  1157,  1161,  1164,  1167,  1172,  1177,  1181,
    1186,  1190,  1194,  1197,  1200,  1202,  1204,  1208,  1212,  1214,
    1216,  1220,  1224,  1227,  1230,  1233,  1236,  1239,  1242,  1247,
    1253,  1259,  1262,  1267,  1274,  1276,  1278,  1280,  1282,  1284,
    1286,  1288,  1290,  1292,  1294,  1296,  1301,  1303,  1307,  1311,
    1315,  1319,  1323,  1327,  1329,  1333,  1337,  1341,  1345,  1347,
    1351,  1355,  1359,  1363,  1366,  1368,  1371,  1375,  1379,  1383,
    1387,  1391,  1395,  1399,  1401,  1405,  1409,  1413,  1417,  1421,
    1425,  1429,  1433,  1435,  1439,  1443,  1447,  1451,  1453,  1457,
    1461,  1465,  1469,  1471,  1475,  1479,  1483,  1487,  1489,  1493,
    1497,  1499,  1503,  1507,  1509,  1515,  1521,  1527,  1533,  1539,
    1545,  1551,  1557,  1563,  1569,  1575,  1581,  1587,  1593,  1599,
    1605,  1607,  1611,  1615,  1619,  1623,  1627,  1631,  1635,  1639,
    1641,  1643,  1645,  1647,  1649,  1651,  1653,  1655,  1657,  1659,
    1661,  1663,  1667,  1671,  1674,  1676,  1680,  1684,  1686,  1688,
    1691,  1694,  1698,  1702,  1706,  1710,  1714,  1718,  1722,  1725,
    1728,  1731,  1734,  1737,  1743,  1750,  1757,  1760,  1766,  1768,
    1770,  1772,  1777,  1779,  1783,  1787,  1791,  1795,  1799,  1803,
    1805,  1809,  1813,  1817,  1821,  1823,  1827,  1831,  1835,  1839,
    1841,  1844,  1848,  1852,  1856,  1860,  1864,  1868,  1872,  1874,
    1878,  1882,  1886,  1890,  1894,  1898,  1902,  1906,  1908,  1912,
    1916,  1920,  1924,  1926,  1930,  1934,  1938,  1942,  1944,  1948,
    1952,  1956,  1960,  1962,  1966,  1970,  1972,  1976,  1980,  1982,
    1988,  1994,  2000,  2006,  2011,  2016,  2021,  2026,  2032,  2038,
    2044,  2050,  2055,  2060,  2065,  2070,  2076,  2082,  2088,  2094,
    2100,  2106,  2112,  2118,  2122,  2126,  2129,  2132,  2134,  2138,
    2142,  2146,  2150,  2152,  2155,  2159,  2163,  2166,  2169,  2172,
    2174,  2177,  2181,  2185,  2187,  2189,  2191,  2193,  2195,  2197,
    2199,  2201,  2203,  2205,  2207,  2209,  2211,  2213,  2215,  2217,
    2219,  2223,  2227,  2229,  2233,  2236,  2238,  2241,  2244,  2247,
    2252,  2257,  2261,  2265,  2270,  2276,  2281,  2288,  2295,  2300,
    2306,  2311,  2318,  2325,  2331,  2337,  2340,  2343,  2346,  2352,
    2356,  2362,  2369,  2375,  2383,  2391,  2400,  2409,  2417,  2425,
    2429,  2433,  2437,  2442,  2446,  2452,  2458,  2465,  2473,  2480,
    2485,  2487,  2489,  2491,  2493,  2495,  2497,  2499,  2501,  2503,
    2506,  2508,  2510,  2512,  2514,  2516,  2518,  2520,  2522,  2524,
    2526,  2528,  2530,  2532,  2534,  2536,  2538,  2540,  2545,  2550,
    2555,  2557,  2559,  2561,  2563,  2565,  2567,  2569,  2571,  2573,
    2575,  2577,  2579,  2581,  2583,  2585,  2587,  2589,  2591,  2593,
    2595,  2597,  2599,  2601,  2603,  2605,  2607,  2609,  2611,  2616,
    2621,  2626,  2628,  2630,  2633,  2636,  2640,  2646,  2649,  2653,
    2659,  2665,  2671,  2673,  2677,  2680,  2683,  2687,  2691,  2694,
    2698,  2702,  2707,  2711,  2715,  2719,  2723,  2727,  2731,  2736,
    2741,  2746,  2748,  2750,  2755,  2759,  2762,  2766,  2770,  2774,
    2778,  2782,  2786,  2790,  2794,  2798,  2802,  2806,  2810,  2812,
    2814,  2816,  2819,  2821,  2824,  2826,  2829,  2831,  2834,  2836,
    2839,  2841,  2844,  2846,  2849,  2851,  2854,  2856,  2859,  2861,
    2864,  2866,  2869,  2871,  2874,  2876,  2879,  2881,  2884,  2886,
    2889,  2891,  2894,  2896,  2899,  2901,  2904,  2906,  2909,  2911,
    2914,  2916,  2919,  2921,  2924,  2926,  2929,  2931,  2934,  2936,
    2939,  2941,  2944,  2946,  2948,  2950,  2953,  2955,  2958,  2960,
    2963,  2965,  2968,  2973,  2979,  2981,  2983,  2985,  2988,  2990,
    2993,  2995,  2998,  3000,  3003,  3008,  3014,  3016,  3019,  3021,
    3024,  3026,  3029,  3031,  3034,  3036,  3039,  3041,  3044,  3049,
    3055,  3057,  3060,  3062,  3065,  3067,  3070,  3072,  3075,  3077,
    3080,  3082,  3085,  3090,  3096,  3100,  3104,  3106,  3110,  3114,
    3118,  3122,  3124,  3126,  3128,  3133,  3138,  3143,  3147,  3152,
    3157,  3162,  3166,  3168,  3172,  3177,  3181,  3186,  3191,  3196,
    3201,  3205,  3208,  3212,  3216,  3220,  3224,  3227,  3230,  3233,
    3237,  3242,  3244,  3246,  3249,  3253,  3257,  3261,  3265,  3268,
    3271,  3274,  3278,  3283,  3285,  3287,  3289,  3291,  3293,  3298,
    3300,  3302,  3304,  3306,  3308,  3310,  3312,  3314,  3316,  3321,
    3323,  3326,  3330,  3337,  3343,  3347,  3352,  3355,  3359,  3363,
    3367,  3371,  3376,  3381,  3386,  3389,  3393,  3397,  3401,  3406,
    3411,  3415,  3420,  3423,  3427,  3431,  3435,  3440,  3445,  3447,
    3450,  3453,  3457,  3459,  3461,  3464,  3467,  3471,  3473,  3475,
    3478,  3481,  3485,  3487,  3490,  3494,  3497,  3500,  3502,  3505,
    3509,  3512,  3514,  3517,  3521,  3525,  3527,  3530,  3534,  3538,
    3540,  3543,  3547,  3551,  3553,  3556,  3560,  3564,  3566,  3569,
    3573,  3577,  3579,  3583,  3588,  3590,  3595,  3598,  3604,  3608,
    3610,  3612,  3614,  3616,  3618,  3620,  3624,  3628,  3631,  3634,
    3636,  3638,  3642,  3645,  3649,  3651,  3655,  3659,  3663,  3667,
    3671,  3675,  3677,  3680,  3684,  3688,  3690,  3693,  3695,  3698,
    3701,  3704,  3707,  3711,  3713,  3715,  3719,  3723,  3725,  3729,
    3734,  3738,  3743,  3747,  3751,  3756,  3760,  3765,  3767,  3771,
    3775,  3780,  3784,  3788,  3792,  3797,  3799,  3803,  3807,  3811,
    3815,  3819,  3821,  3825,  3828,  3830,  3832,  3834,  3836,  3838,
    3841,  3843,  3845,  3847,  3849,  3852,  3855,  3858,  3860,  3862,
    3864,  3866,  3868,  3871,  3873,  3875,  3880,  3888,  3890,  3894,
    3895,  3902,  3911,  3922,  3935,  3944,  3955,  3966,  3972,  3980,
    3990,  4002,  4010,  4020,  4030,  4034,  4039,  4044,  4048,  4052,
    4056,  4061,  4066,  4070,  4074,  4078,  4083,  4088,  4092,  4095,
    4099,  4102,  4106,  4111,  4116,  4120,  4124,  4126,  4128,  4130,
    4132,  4134,  4137,  4141,  4144,  4147,  4150,  4154,  4158,  4161,
    4167,  4174,  4177,  4180,  4183,  4186,  4189,  4192,  4194,  4197,
    4200,  4204,  4206,  4209,  4211,  4214,  4217,  4219,  4222,  4225,
    4228,  4231,  4234,  4237,  4239,  4241,  4244,  4247,  4249,  4251,
    4254,  4257,  4259,  4262,  4265,  4267,  4270,  4272,  4275,  4278,
    4284,  4290,  4298,  4306,  4312,  4318,  4322,  4325,  4331,  4336,
    4341,  4349,  4356,  4363,  4369,  4377,  4384,  4389,  4397,  4407,
    4411,  4416,  4421,  4427,  4433,  4440,  4448,  4455,  4462,  4468,
    4474,  4479,  4483,  4486,  4488,  4491,  4496,  4500,  4506,  4511,
    4515,  4518,  4521,  4524,  4528,  4532,  4536,  4540,  4543,  4546,
    4548,  4550,  4555,  4559,  4564,  4568,  4572,  4575,  4580,  4584,
    4589,  4593,  4597,  4600,  4602,  4605,  4607,  4609,  4612,  4614,
    4617,  4621,  4625,  4627,  4630,  4633,  4636,  4640,  4645,  4650,
    4653,  4656,  4659,  4662,  4664,  4667,  4669,  4672,  4674,  4677,
    4680,  4682,  4685,  4687,  4690,  4693,  4696,  4699,  4701,  4704,
    4707,  4711,  4713,  4715,  4716,  4723,  4730,  4736,  4741,  4743,
    4746,  4749,  4751,  4755,  4759,  4764,  4766,  4768,  4771,  4774,
    4781,  4788,  4795
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     392,     0,    -1,   218,   121,    -1,   218,   122,    -1,   151,
      -1,   218,   218,    -1,    28,    -1,    28,    -1,   149,    -1,
     149,   122,   212,   123,    -1,   149,   122,   212,    11,    -1,
     301,   336,    -1,   334,    -1,   301,   124,   125,    -1,   126,
     301,   124,   125,    -1,    79,   301,   336,    -1,    79,   334,
      -1,   301,   337,    -1,   335,    -1,    79,   301,   337,    -1,
      79,   335,    -1,   152,   376,    -1,   155,   376,    -1,   155,
     127,    -1,   153,   376,    -1,   154,   376,    -1,   152,   127,
      -1,   152,   326,   127,    -1,   152,   377,    -1,   156,    -1,
     155,   377,    -1,   157,    -1,   157,   127,    -1,   300,   336,
      -1,   300,   338,    -1,   300,   337,    -1,   160,   376,    -1,
     160,   377,    -1,   161,    -1,   160,    -1,   226,   128,   341,
      -1,   341,    -1,   226,   128,   342,    -1,   226,   128,     1,
      -1,   342,    -1,   164,    -1,   166,   129,   164,    -1,   167,
     129,   164,    -1,   165,    -1,   166,   129,   165,    -1,   167,
     129,   165,    -1,   166,   129,     1,    -1,   167,   129,     1,
      -1,   129,    -1,   166,   127,    -1,   167,   127,    -1,   168,
      -1,   162,    -1,   171,   168,    -1,   171,   162,    -1,   169,
     168,    -1,   169,   162,    -1,   171,   127,    -1,   169,   127,
      -1,   127,    -1,   169,    -1,   166,    -1,   169,   166,    -1,
     171,   166,    -1,   163,    -1,   170,   163,    -1,   171,   163,
      -1,   169,   163,    -1,   169,   167,    -1,   167,    -1,   166,
       1,    -1,   173,   130,    -1,   173,     1,   130,    -1,   300,
     218,   131,   171,    -1,   300,   218,   131,   170,     1,    -1,
     300,   218,   131,   170,    -1,   300,   218,   131,    -1,   300,
     218,   131,     1,    -1,   175,   130,    -1,   175,     1,   130,
      -1,   301,   218,   131,   171,    -1,   301,   218,   131,   170,
       1,    -1,   301,   218,   131,   170,    -1,   301,   218,   131,
      -1,   301,   218,   131,     1,    -1,   302,   218,   131,   170,
     130,    -1,   302,   218,   131,   171,   130,    -1,   302,   218,
     131,   130,    -1,   178,   130,    -1,   178,     1,   130,    -1,
     151,   131,   170,    -1,   218,   131,   170,    -1,   151,   131,
     171,    -1,   151,   131,    -1,   151,   131,   170,     1,    -1,
     151,   131,     1,    -1,   218,   131,   171,    -1,   218,   131,
      -1,   218,   131,   170,     1,    -1,   218,   131,     1,    -1,
     180,   130,    -1,   180,     1,   130,    -1,   131,   171,    -1,
     131,   170,     1,    -1,   131,     1,    -1,   131,    -1,   131,
     170,    -1,   226,   128,   341,    -1,   226,   128,   342,    -1,
     226,   128,     1,    -1,   226,     1,    -1,   181,    -1,   183,
     129,   181,    -1,   184,   129,   181,    -1,   182,    -1,   183,
     129,   182,    -1,   184,   129,   182,    -1,   183,     1,    -1,
      69,   306,   218,   131,    -1,    69,   306,   330,   218,   131,
      -1,    69,   306,   131,    -1,    69,   306,   330,   131,    -1,
      69,     1,   131,    -1,   185,    -1,   186,    70,   376,    -1,
     186,    71,   376,    -1,   186,    96,   376,    -1,   186,    92,
      -1,   186,    98,   220,    -1,   186,   130,    -1,   100,   306,
     218,   131,    -1,   100,   306,   330,   218,   131,    -1,   100,
     306,   131,    -1,   100,   306,   330,   131,    -1,   100,     1,
     131,    -1,   188,    -1,   189,    70,   376,    -1,   189,    71,
     376,    -1,   189,   130,    -1,   218,    -1,   191,   218,    -1,
     191,   376,    -1,    74,   376,    -1,   192,    -1,   193,   192,
      -1,    89,   124,   191,   125,   376,    -1,    89,   124,   245,
     125,   131,   193,   130,    -1,   245,   132,    89,   124,   245,
     125,   131,   193,   130,    -1,    90,   124,   245,   129,   191,
     125,    -1,   245,   132,    90,   124,   245,   129,   191,   125,
      -1,    90,   124,   245,   125,    -1,   245,   132,    90,   124,
     245,   125,    -1,    91,    -1,    91,   191,    -1,   226,   132,
      91,    -1,   245,   132,    91,   191,    -1,   199,   127,    -1,
     183,   127,    -1,   158,    -1,   187,    -1,   364,   158,    -1,
     364,   187,    -1,   190,    -1,    92,    -1,    94,    -1,    95,
      -1,   100,   124,   218,   125,   128,   341,   127,    -1,   127,
      -1,   364,   133,    -1,   364,   124,   218,   125,    -1,   159,
      -1,   301,    -1,   301,   288,    -1,   364,   301,   288,    -1,
     364,   301,    -1,   364,   177,    -1,   364,   174,    -1,    99,
     301,   288,    -1,   194,    -1,    93,   218,    -1,    93,   151,
      -1,    97,   218,    -1,   177,    -1,   174,    -1,   183,    -1,
     175,     1,    -1,   178,     1,    -1,   364,   159,    -1,   364,
     175,     1,    -1,   364,   178,     1,    -1,   184,    -1,   198,
      -1,   200,   198,    -1,   201,   198,    -1,   199,    -1,   200,
       1,    -1,   201,     1,    -1,   200,   199,    -1,   201,   199,
      -1,   301,    -1,   301,   330,    -1,   301,    -1,   301,   330,
      -1,    66,   218,    -1,    66,   218,   128,   203,    -1,    66,
     218,   133,   202,    -1,    66,   218,   133,   202,   128,   203,
      -1,    66,   150,    -1,    66,   150,   128,   203,    -1,    66,
     150,   133,   202,    -1,    66,   150,   133,   202,   128,   203,
      -1,   218,    -1,   218,    -1,   218,   128,   205,    -1,   235,
      -1,   301,   218,   128,   207,    -1,   301,   330,   218,   128,
     207,    -1,   204,    -1,   206,    -1,   208,    -1,   209,    -1,
     210,   129,   209,    -1,   207,    -1,   205,    -1,   203,    -1,
     218,   128,   207,    -1,   218,   128,   205,    -1,   218,   128,
     203,    -1,   211,    -1,   212,   129,   211,    -1,    66,    -1,
     213,   218,    -1,   213,   149,    -1,   218,   213,   218,    -1,
     218,   213,   149,    -1,   213,   218,   122,   210,   123,    -1,
     213,   149,   122,   210,   123,    -1,   218,   213,   218,   122,
     210,   123,    -1,   218,   213,   149,   122,   210,   123,    -1,
     217,   130,    -1,   216,   127,    -1,   214,   131,   130,    -1,
     216,   131,   130,    -1,   213,   218,   127,    -1,   213,   148,
     127,    -1,   214,   133,   305,    -1,   214,   131,   201,    -1,
     216,   131,   201,    -1,   214,   131,   200,    -1,   216,   131,
     200,    -1,   214,   131,     1,    -1,   216,   131,     1,    -1,
       3,    -1,   222,    -1,   124,   247,   125,    -1,   387,    -1,
     134,   387,    -1,   134,   387,   132,   387,    -1,     4,    -1,
     218,    -1,   177,    -1,    86,   124,   376,   125,    -1,    86,
     124,   247,   125,    -1,    86,   124,   348,   125,   339,    -1,
      86,   124,   348,   125,   124,   348,   125,   339,    -1,   221,
     218,    -1,   221,    -1,   220,    -1,   119,    -1,   124,   125,
      -1,    72,   308,   331,   135,   267,   136,    -1,    72,   308,
     331,   135,   268,   136,    -1,    72,   308,   135,   267,   136,
      -1,    72,   308,   135,   268,   136,    -1,   103,   308,   331,
     135,   267,   136,    -1,   103,   308,   331,   135,   268,   136,
      -1,   103,   308,   135,   267,   136,    -1,   103,   308,   135,
     268,   136,    -1,    73,   267,   307,   331,   135,   267,   136,
      -1,    73,   267,   307,   331,   135,   268,   136,    -1,    73,
     267,   307,   135,   267,   136,    -1,    73,   267,   307,   135,
     268,   136,    -1,   104,   267,   307,   331,   135,   267,   136,
      -1,   104,   267,   307,   331,   135,   268,   136,    -1,   104,
     267,   307,   135,   267,   136,    -1,   104,   267,   307,   135,
     268,   136,    -1,    66,   124,   300,   125,    -1,    66,   124,
     300,   330,   125,    -1,    66,   124,   218,   125,    -1,   105,
     124,   245,   129,   348,   125,    -1,    99,   124,   218,   125,
      -1,   399,    -1,   400,    -1,   401,    -1,   402,    -1,   135,
     227,   136,    -1,   135,   136,    -1,   179,    -1,   180,     1,
      -1,   124,   247,    -1,   124,   265,    -1,   219,    -1,   226,
     135,   247,   136,    -1,   226,   135,   265,   136,    -1,   226,
     124,   125,    -1,   226,   124,   227,   125,    -1,   226,   124,
     228,   125,    -1,   226,   132,   218,    -1,   226,     7,   218,
      -1,   226,     8,    -1,   226,     9,    -1,   249,   135,   247,
     136,    -1,   249,   135,   265,   136,    -1,   249,   124,   125,
      -1,   249,   124,   227,   125,    -1,   249,   132,   218,    -1,
     249,     7,   218,    -1,   249,     8,    -1,   249,     9,    -1,
     245,    -1,   223,    -1,   227,   129,   245,    -1,   227,   129,
     223,    -1,   264,    -1,   224,    -1,   227,   129,   264,    -1,
     227,   129,   224,    -1,   227,   129,    -1,     8,   230,    -1,
       9,   230,    -1,   231,   232,    -1,   231,   223,    -1,     6,
     230,    -1,     6,   124,   349,   125,    -1,     6,   124,    66,
     148,   125,    -1,     6,   124,    66,   147,   125,    -1,   110,
     230,    -1,   110,   124,   349,   125,    -1,   120,   124,   349,
     129,   218,   125,    -1,   229,    -1,   226,    -1,   137,    -1,
     121,    -1,   138,    -1,   139,    -1,   126,    -1,   140,    -1,
      74,    -1,    85,    -1,   230,    -1,   124,   348,   125,   232,
      -1,   232,    -1,   233,   121,   232,    -1,   233,   141,   232,
      -1,   233,   142,   232,    -1,   253,   121,   232,    -1,   253,
     141,   232,    -1,   253,   142,   232,    -1,   233,    -1,   234,
     138,   233,    -1,   234,   139,   233,    -1,   254,   138,   233,
      -1,   254,   139,   233,    -1,   234,    -1,   235,    10,   234,
      -1,   235,    11,   234,    -1,   255,    10,   234,    -1,   255,
      11,   234,    -1,   237,   122,    -1,   235,    -1,   236,   235,
      -1,   237,   123,   235,    -1,   237,    12,   235,    -1,   237,
      13,   235,    -1,   256,   122,   235,    -1,   256,   123,   235,
      -1,   256,    12,   235,    -1,   256,    13,   235,    -1,   237,
      -1,   238,    14,   237,    -1,   238,    15,   237,    -1,   257,
      14,   237,    -1,   257,    15,   237,    -1,   238,    14,   223,
      -1,   238,    15,   223,    -1,   257,    14,   223,    -1,   257,
      15,   223,    -1,   238,    -1,   239,   137,   238,    -1,   258,
     137,   238,    -1,   239,   137,   223,    -1,   258,   137,   223,
      -1,   239,    -1,   240,   143,   239,    -1,   259,   143,   239,
      -1,   240,   143,   223,    -1,   259,   143,   223,    -1,   240,
      -1,   241,   144,   240,    -1,   260,   144,   240,    -1,   241,
     144,   223,    -1,   260,   144,   223,    -1,   241,    -1,   242,
      16,   241,    -1,   261,    16,   241,    -1,   242,    -1,   243,
      17,   242,    -1,   262,    17,   242,    -1,   243,    -1,   243,
     145,   247,   133,   244,    -1,   243,   145,   265,   133,   244,
      -1,   262,   145,   247,   133,   244,    -1,   262,   145,   265,
     133,   244,    -1,   243,   145,   248,   133,   244,    -1,   243,
     145,   266,   133,   244,    -1,   262,   145,   248,   133,   244,
      -1,   262,   145,   266,   133,   244,    -1,   243,   145,   247,
     133,   223,    -1,   243,   145,   265,   133,   223,    -1,   262,
     145,   247,   133,   223,    -1,   262,   145,   265,   133,   223,
      -1,   243,   145,   248,   133,   223,    -1,   243,   145,   266,
     133,   223,    -1,   262,   145,   248,   133,   223,    -1,   262,
     145,   266,   133,   223,    -1,   244,    -1,   230,   246,   245,
      -1,   251,   246,   245,    -1,   244,   246,   245,    -1,   263,
     246,   245,    -1,   230,   246,   223,    -1,   251,   246,   223,
      -1,   244,   246,   223,    -1,   263,   246,   223,    -1,   128,
      -1,    18,    -1,    19,    -1,    20,    -1,    21,    -1,    22,
      -1,    23,    -1,    24,    -1,    25,    -1,    26,    -1,    27,
      -1,   245,    -1,   247,   129,   245,    -1,   265,   129,   245,
      -1,   265,   125,    -1,   223,    -1,   247,   129,   223,    -1,
     265,   129,   223,    -1,   225,    -1,     1,    -1,   226,     1,
      -1,   178,     1,    -1,   226,     7,     1,    -1,   249,     7,
       1,    -1,   226,   124,   227,    -1,   226,   124,   228,    -1,
     226,   132,     1,    -1,   249,   124,   228,    -1,   249,   132,
       1,    -1,     8,   251,    -1,     9,   251,    -1,   231,   252,
      -1,   231,   224,    -1,     6,   251,    -1,     6,   124,   349,
     125,     1,    -1,     6,   124,    66,   148,   125,     1,    -1,
       6,   124,    66,   147,   125,     1,    -1,   110,   251,    -1,
     110,   124,   349,   125,     1,    -1,   250,    -1,   249,    -1,
     251,    -1,   124,   348,   125,   252,    -1,   252,    -1,   233,
     121,   252,    -1,   233,   141,   252,    -1,   233,   142,   252,
      -1,   253,   121,   252,    -1,   253,   141,   252,    -1,   253,
     142,   252,    -1,   253,    -1,   234,   138,   253,    -1,   234,
     139,   253,    -1,   254,   138,   253,    -1,   254,   139,   253,
      -1,   254,    -1,   235,    10,   254,    -1,   235,    11,   254,
      -1,   255,    10,   254,    -1,   255,    11,   254,    -1,   255,
      -1,   236,   255,    -1,   237,   123,   255,    -1,   237,    12,
     255,    -1,   237,    13,   255,    -1,   256,   122,   255,    -1,
     256,   123,   255,    -1,   256,    12,   255,    -1,   256,    13,
     255,    -1,   256,    -1,   238,    14,   256,    -1,   238,    15,
     256,    -1,   257,    14,   256,    -1,   257,    15,   256,    -1,
     238,    14,   224,    -1,   238,    15,   224,    -1,   257,    14,
     224,    -1,   257,    15,   224,    -1,   257,    -1,   239,   137,
     257,    -1,   258,   137,   257,    -1,   239,   137,   224,    -1,
     258,   137,   224,    -1,   258,    -1,   240,   143,   258,    -1,
     259,   143,   258,    -1,   240,   143,   224,    -1,   259,   143,
     224,    -1,   259,    -1,   241,   144,   259,    -1,   260,   144,
     259,    -1,   241,   144,   224,    -1,   260,   144,   224,    -1,
     260,    -1,   242,    16,   260,    -1,   261,    16,   260,    -1,
     261,    -1,   243,    17,   261,    -1,   262,    17,   261,    -1,
     262,    -1,   243,   145,   247,   133,   262,    -1,   243,   145,
     265,   133,   262,    -1,   262,   145,   247,   133,   262,    -1,
     262,   145,   265,   133,   262,    -1,   243,   145,   247,   133,
      -1,   243,   145,   265,   133,    -1,   262,   145,   247,   133,
      -1,   262,   145,   265,   133,    -1,   243,   145,   248,   133,
     262,    -1,   243,   145,   266,   133,   262,    -1,   262,   145,
     248,   133,   262,    -1,   262,   145,   266,   133,   262,    -1,
     243,   145,   248,   133,    -1,   243,   145,   266,   133,    -1,
     262,   145,   248,   133,    -1,   262,   145,   266,   133,    -1,
     243,   145,   247,   133,   224,    -1,   243,   145,   265,   133,
     224,    -1,   262,   145,   247,   133,   224,    -1,   262,   145,
     265,   133,   224,    -1,   243,   145,   248,   133,   224,    -1,
     243,   145,   266,   133,   224,    -1,   262,   145,   248,   133,
     224,    -1,   262,   145,   266,   133,   224,    -1,   243,   145,
     133,    -1,   262,   145,   133,    -1,   243,   145,    -1,   262,
     145,    -1,   263,    -1,   230,   246,   264,    -1,   251,   246,
     264,    -1,   230,   246,   224,    -1,   251,   246,   224,    -1,
     264,    -1,   245,     1,    -1,   247,   129,   264,    -1,   265,
     129,   264,    -1,   247,   247,    -1,   265,   247,    -1,   247,
     265,    -1,   224,    -1,   223,     1,    -1,   247,   129,   224,
      -1,   265,   129,   224,    -1,   244,    -1,   263,    -1,    29,
      -1,    30,    -1,    31,    -1,   118,    -1,    32,    -1,    33,
      -1,   117,    -1,    29,    -1,    30,    -1,    31,    -1,   118,
      -1,    32,    -1,    33,    -1,   117,    -1,   218,    -1,   218,
     128,   267,    -1,   218,   128,   268,    -1,   271,    -1,   272,
     129,   271,    -1,   272,   129,    -1,    51,    -1,   273,   218,
      -1,   273,   151,    -1,   276,   130,    -1,   273,   218,   131,
     130,    -1,   273,   151,   131,   130,    -1,   273,   131,   272,
      -1,   273,   131,     1,    -1,   273,   218,   131,   272,    -1,
     273,   218,   131,   272,     1,    -1,   273,   218,   131,     1,
      -1,   273,   218,   131,   272,   127,   200,    -1,   273,   218,
     131,   272,   127,   201,    -1,   273,   151,   131,   272,    -1,
     273,   151,   131,   272,     1,    -1,   273,   151,   131,     1,
      -1,   273,   151,   131,   272,   127,   200,    -1,   273,   151,
     131,   272,   127,   201,    -1,   273,   218,   131,   272,   127,
      -1,   273,   151,   131,   272,   127,    -1,   273,   218,    -1,
     273,   151,    -1,   279,   130,    -1,   277,   133,   305,   131,
     130,    -1,   277,   131,   130,    -1,   277,   133,   305,   131,
     272,    -1,   277,   133,   305,   131,   272,     1,    -1,   277,
     133,   305,   131,     1,    -1,   277,   133,   305,   131,   272,
     127,   200,    -1,   277,   133,   305,   131,   272,   127,   201,
      -1,   277,   133,   305,   131,   272,     1,   127,   200,    -1,
     277,   133,   305,   131,   272,     1,   127,   201,    -1,   277,
     133,   305,   131,     1,   127,   200,    -1,   277,   133,   305,
     131,     1,   127,   201,    -1,   273,   131,   272,    -1,   273,
     131,     1,    -1,   277,   131,   272,    -1,   277,   131,   272,
       1,    -1,   277,   131,     1,    -1,   277,   131,   272,   127,
     200,    -1,   277,   131,   272,   127,   201,    -1,   277,   133,
     305,   131,   272,   127,    -1,   277,   133,   305,   131,   272,
       1,   127,    -1,   277,   133,   305,   131,     1,   127,    -1,
     277,   131,   272,   127,    -1,   278,    -1,   295,    -1,   279,
      -1,   296,    -1,   321,    -1,    45,    -1,    46,    -1,   282,
      -1,   283,    -1,   284,   283,    -1,    47,    -1,    34,    -1,
      35,    -1,    36,    -1,    37,    -1,    38,    -1,    39,    -1,
      48,    -1,    40,    -1,    43,    -1,    44,    -1,    41,    -1,
      42,    -1,    86,    -1,   292,    -1,   274,    -1,   148,    -1,
      88,   124,   245,   125,    -1,   101,   124,   148,   125,    -1,
     101,   124,   218,   125,    -1,    67,    -1,    83,    -1,    84,
      -1,   114,    -1,   113,    -1,   115,    -1,   116,    -1,    47,
      -1,    34,    -1,    35,    -1,    36,    -1,    37,    -1,    38,
      -1,    39,    -1,    48,    -1,    40,    -1,    43,    -1,    44,
      -1,    41,    -1,    42,    -1,    86,    -1,   292,    -1,   274,
      -1,   151,    -1,   114,    -1,   113,    -1,   115,    -1,   116,
      -1,    88,   124,   245,   125,    -1,   101,   124,   148,   125,
      -1,   101,   124,   218,   125,    -1,    67,    -1,   338,    -1,
     338,   326,    -1,   133,   267,    -1,   338,   133,   267,    -1,
     338,   133,   267,   133,   267,    -1,   133,   268,    -1,   338,
     133,   268,    -1,   338,   133,   267,   133,   268,    -1,   338,
     133,   268,   133,   268,    -1,   338,   133,   268,   133,   267,
      -1,   287,    -1,   288,   129,   287,    -1,   297,   218,    -1,
     297,   149,    -1,   297,   321,   218,    -1,   297,   321,   149,
      -1,   291,   130,    -1,   289,   131,   130,    -1,   297,   131,
     130,    -1,   297,   321,   131,   130,    -1,   289,   131,   200,
      -1,   289,   131,   201,    -1,   289,   131,     1,    -1,   297,
     131,   200,    -1,   297,   131,   201,    -1,   297,   131,     1,
      -1,   297,   321,   131,   200,    -1,   297,   321,   131,   201,
      -1,   297,   321,   131,     1,    -1,   289,    -1,   289,    -1,
     289,   122,   210,   123,    -1,   293,   133,   305,    -1,   296,
     130,    -1,   294,   131,   130,    -1,   293,   131,   130,    -1,
     297,   131,   130,    -1,   294,   131,   200,    -1,   294,   131,
     201,    -1,   294,   131,     1,    -1,   293,   131,   200,    -1,
     293,   131,   201,    -1,   293,   131,     1,    -1,   297,   131,
     200,    -1,   297,   131,   201,    -1,   297,   131,     1,    -1,
      49,    -1,    50,    -1,   283,    -1,   298,   283,    -1,   285,
      -1,   298,   285,    -1,   275,    -1,   298,   275,    -1,   290,
      -1,   298,   290,    -1,   283,    -1,   299,   283,    -1,   285,
      -1,   299,   285,    -1,   147,    -1,   299,   147,    -1,   275,
      -1,   299,   275,    -1,   290,    -1,   299,   290,    -1,   269,
      -1,   300,   269,    -1,   283,    -1,   300,   283,    -1,   286,
      -1,   300,   286,    -1,   275,    -1,   300,   275,    -1,   290,
      -1,   300,   290,    -1,   269,    -1,   301,   269,    -1,   283,
      -1,   301,   283,    -1,   285,    -1,   301,   285,    -1,   147,
      -1,   301,   147,    -1,   290,    -1,   301,   290,    -1,   275,
      -1,   301,   275,    -1,   270,    -1,   302,   270,    -1,   283,
      -1,   302,   283,    -1,   285,    -1,   302,   285,    -1,   147,
      -1,   302,   147,    -1,   280,    -1,   302,   280,    -1,   281,
      -1,   302,   281,    -1,    82,    -1,    81,    -1,   269,    -1,
     304,   269,    -1,   283,    -1,   304,   283,    -1,   286,    -1,
     304,   286,    -1,   218,    -1,   304,   218,    -1,   218,   122,
     212,   123,    -1,   304,   218,   122,   212,   123,    -1,   304,
      -1,   297,    -1,   269,    -1,   306,   269,    -1,   283,    -1,
     306,   283,    -1,   286,    -1,   306,   286,    -1,   218,    -1,
     306,   218,    -1,   218,   122,   212,   123,    -1,   306,   218,
     122,   212,   123,    -1,   269,    -1,   307,   269,    -1,   283,
      -1,   307,   283,    -1,   286,    -1,   307,   286,    -1,   290,
      -1,   307,   290,    -1,   275,    -1,   307,   275,    -1,   218,
      -1,   307,   218,    -1,   218,   122,   212,   123,    -1,   307,
     218,   122,   212,   123,    -1,   269,    -1,   308,   269,    -1,
     283,    -1,   308,   283,    -1,   286,    -1,   308,   286,    -1,
     290,    -1,   308,   290,    -1,   275,    -1,   308,   275,    -1,
     218,    -1,   308,   218,    -1,   218,   122,   212,   123,    -1,
     308,   218,   122,   212,   123,    -1,   310,   129,     1,    -1,
     309,   129,     1,    -1,   218,    -1,   310,   129,   218,    -1,
     309,   129,   218,    -1,   352,   129,   218,    -1,   353,   129,
     218,    -1,   312,    -1,   149,    -1,    37,    -1,   149,   135,
     267,   136,    -1,   149,   135,   268,   136,    -1,   149,   135,
     148,   136,    -1,   149,   135,   136,    -1,   311,   135,   267,
     136,    -1,   311,   135,   268,   136,    -1,   311,   135,   148,
     136,    -1,   311,   135,   136,    -1,   218,    -1,   124,   332,
     125,    -1,   124,   321,   332,   125,    -1,   124,   333,   125,
      -1,   124,   321,   333,   125,    -1,   312,   135,   267,   136,
      -1,   312,   135,   268,   136,    -1,   312,   135,   148,   136,
      -1,   312,   135,   136,    -1,   312,   124,    -1,   313,   354,
     125,    -1,   313,   355,   125,    -1,   313,   310,   125,    -1,
     313,   309,   125,    -1,   313,   125,    -1,   313,   309,    -1,
     313,     1,    -1,   313,   352,   124,    -1,   313,   301,   218,
     124,    -1,   314,    -1,   312,    -1,   311,   124,    -1,   317,
     354,   125,    -1,   317,   355,   125,    -1,   317,   310,   125,
      -1,   317,   309,   125,    -1,   317,   125,    -1,   317,   309,
      -1,   317,     1,    -1,   317,   352,   124,    -1,   317,   301,
     218,   124,    -1,   318,    -1,   311,    -1,    75,    -1,    76,
      -1,   326,    -1,    87,   124,   387,   125,    -1,    80,    -1,
     111,    -1,   112,    -1,     3,    -1,    28,    -1,    76,    -1,
      75,    -1,    45,    -1,   323,    -1,   323,   124,   247,   125,
      -1,   324,    -1,   325,   324,    -1,   325,   129,   324,    -1,
     322,   124,   124,   325,   125,   125,    -1,   322,   124,   124,
     125,   125,    -1,   124,   330,   125,    -1,   124,   321,   330,
     125,    -1,   135,   136,    -1,   135,   267,   136,    -1,   135,
     268,   136,    -1,   135,   148,   136,    -1,   327,   135,   136,
      -1,   327,   135,   267,   136,    -1,   327,   135,   148,   136,
      -1,   327,   135,   268,   136,    -1,   124,   125,    -1,   124,
     354,   125,    -1,   124,   355,   125,    -1,   327,   124,   125,
      -1,   327,   124,   354,   125,    -1,   327,   124,   355,   125,
      -1,   124,   331,   125,    -1,   124,   321,   331,   125,    -1,
     124,   125,    -1,   124,   354,   125,    -1,   124,   355,   125,
      -1,   328,   124,   125,    -1,   328,   124,   354,   125,    -1,
     328,   124,   355,   125,    -1,   121,    -1,   121,   284,    -1,
     121,   329,    -1,   121,   284,   329,    -1,   329,    -1,   327,
      -1,   329,   327,    -1,   321,   329,    -1,   321,   329,   327,
      -1,   329,    -1,   328,    -1,   329,   328,    -1,   321,   329,
      -1,   321,   329,   328,    -1,   316,    -1,   329,   316,    -1,
     321,   329,   316,    -1,   332,   321,    -1,   338,   321,    -1,
     320,    -1,   329,   320,    -1,   321,   329,   320,    -1,   333,
     321,    -1,   314,    -1,   329,   314,    -1,   321,   329,   314,
      -1,   329,   321,   314,    -1,   315,    -1,   329,   315,    -1,
     321,   329,   315,    -1,   329,   321,   315,    -1,   318,    -1,
     329,   318,    -1,   321,   329,   318,    -1,   329,   321,   318,
      -1,   319,    -1,   329,   319,    -1,   321,   329,   319,    -1,
     329,   321,   319,    -1,   311,    -1,   329,   311,    -1,   321,
     329,   311,    -1,   329,   321,   311,    -1,   245,    -1,   131,
     343,   130,    -1,   131,   343,   129,   130,    -1,   264,    -1,
     131,   343,   130,     1,    -1,   131,   343,    -1,   131,   343,
     129,   130,     1,    -1,   131,   343,   129,    -1,   244,    -1,
     223,    -1,   263,    -1,   224,    -1,   339,    -1,   340,    -1,
     343,   129,   339,    -1,   343,   129,   340,    -1,   343,   339,
      -1,   343,   340,    -1,   332,    -1,   333,    -1,   332,   128,
     339,    -1,   332,     1,    -1,   332,   128,   340,    -1,   344,
      -1,   346,   129,   344,    -1,    37,   129,   344,    -1,    38,
     129,   344,    -1,    39,   129,   344,    -1,   149,   129,   344,
      -1,   347,   129,   344,    -1,   345,    -1,   344,     1,    -1,
     346,   129,   345,    -1,   347,   129,   345,    -1,   298,    -1,
     298,   330,    -1,   299,    -1,   299,   330,    -1,   301,   333,
      -1,   301,   330,    -1,   301,   137,    -1,   301,   137,   333,
      -1,   301,    -1,    66,    -1,   301,   333,     1,    -1,   301,
     330,     1,    -1,   350,    -1,   352,   129,   350,    -1,   352,
       1,   129,   350,    -1,   353,   129,   350,    -1,   353,     1,
     129,   350,    -1,     1,   129,   350,    -1,   310,   129,   350,
      -1,   310,     1,   129,   350,    -1,   309,   129,   350,    -1,
     309,     1,   129,   350,    -1,   351,    -1,   352,   129,   351,
      -1,   353,   129,   351,    -1,   353,     1,   129,   351,    -1,
       1,   129,   351,    -1,   310,   129,   351,    -1,   309,   129,
     351,    -1,   309,     1,   129,   351,    -1,   352,    -1,   352,
     129,    52,    -1,   353,   129,    52,    -1,   310,   129,    52,
      -1,   309,   129,    52,    -1,     1,   129,    52,    -1,   353,
      -1,   352,   129,     1,    -1,   353,     1,    -1,   361,    -1,
     326,    -1,   376,    -1,   127,    -1,   133,    -1,   247,   127,
      -1,   379,    -1,   381,    -1,   383,    -1,   360,    -1,   197,
     127,    -1,   196,   127,    -1,   195,   127,    -1,   362,    -1,
     382,    -1,   377,    -1,   380,    -1,   384,    -1,   383,     1,
      -1,   265,    -1,   387,    -1,   387,   124,   245,   125,    -1,
     135,   218,   136,   387,   124,   245,   125,    -1,   358,    -1,
     359,   129,   358,    -1,    -1,    87,   283,   124,   387,   125,
     127,    -1,    87,   283,   124,   387,   133,   359,   125,   127,
      -1,    87,   283,   124,   387,   133,   359,   133,   359,   125,
     127,    -1,    87,   283,   124,   387,   133,   359,   133,   359,
     133,   359,   125,   127,    -1,    87,   283,   124,   387,     3,
     359,   125,   127,    -1,    87,   283,   124,   387,     3,   359,
     133,   359,   125,   127,    -1,    87,   283,   124,   387,   133,
     359,     3,   359,   125,   127,    -1,    87,   124,   387,   125,
     127,    -1,    87,   124,   387,   133,   359,   125,   127,    -1,
      87,   124,   387,   133,   359,   133,   359,   125,   127,    -1,
      87,   124,   387,   133,   359,   133,   359,   133,   359,   125,
     127,    -1,    87,   124,   387,     3,   359,   125,   127,    -1,
      87,   124,   387,     3,   359,   133,   359,   125,   127,    -1,
      87,   124,   387,   133,   359,     3,   359,   125,   127,    -1,
     218,   133,   356,    -1,    53,   267,   133,   356,    -1,    53,
     268,   133,   356,    -1,    53,   133,   356,    -1,    54,   133,
     356,    -1,   218,   133,   365,    -1,    53,   267,   133,   365,
      -1,    53,   268,   133,   365,    -1,    53,   133,   365,    -1,
      54,   133,   365,    -1,   218,   133,   357,    -1,    53,   267,
     133,   357,    -1,    53,   268,   133,   357,    -1,    53,   133,
     357,    -1,    53,   133,    -1,    54,   133,   357,    -1,    54,
     133,    -1,   218,   133,   368,    -1,    53,   267,   133,   368,
      -1,    53,   268,   133,   368,    -1,    53,   133,   368,    -1,
      54,   133,   368,    -1,    81,    -1,    82,    -1,    54,    -1,
      81,    -1,    82,    -1,   300,   127,    -1,   300,   346,   127,
      -1,   172,   127,    -1,   368,   127,    -1,   302,   127,    -1,
     302,   346,   127,    -1,   303,   346,   127,    -1,   176,   127,
      -1,    78,   218,   128,   244,   127,    -1,    31,    78,   218,
     128,   244,   127,    -1,   302,     1,    -1,   300,     1,    -1,
     368,     1,    -1,   173,     1,    -1,   172,     1,    -1,   300,
     347,    -1,   365,    -1,   369,   365,    -1,   370,   365,    -1,
     369,     1,   127,    -1,   368,    -1,   369,   368,    -1,   356,
      -1,   371,   356,    -1,   372,   356,    -1,   357,    -1,   371,
     357,    -1,   372,   357,    -1,   371,   365,    -1,   372,   365,
      -1,   371,   368,    -1,   372,   368,    -1,   371,    -1,   369,
      -1,   369,   371,    -1,   370,   371,    -1,   372,    -1,   370,
      -1,   369,   372,    -1,   370,   372,    -1,   131,    -1,   377,
     130,    -1,   375,   374,    -1,   375,    -1,   375,   373,    -1,
     127,    -1,   247,   127,    -1,   265,   127,    -1,    55,   124,
     247,   125,   356,    -1,    55,   124,   265,   125,   356,    -1,
      55,   124,   247,   125,   356,    65,   356,    -1,    55,   124,
     265,   125,   356,    65,   356,    -1,    56,   124,   247,   125,
     356,    -1,    56,   124,   265,   125,   356,    -1,    55,   124,
     265,    -1,   379,     1,    -1,    57,   124,   247,   125,   356,
      -1,    57,   124,   265,   356,    -1,    57,   124,   125,   356,
      -1,    58,   356,    57,   124,   247,   125,   127,    -1,    58,
     356,    57,   124,   265,   127,    -1,    59,   124,   378,   378,
     125,   356,    -1,    59,   124,   378,   125,   356,    -1,    59,
     124,   378,   378,   247,   125,   356,    -1,    59,   124,   378,
     378,   265,   356,    -1,    59,   124,   125,   356,    -1,    59,
     124,   218,   133,   247,   125,   356,    -1,    59,   124,   218,
     133,   247,   127,   247,   125,   356,    -1,    59,   124,     1,
      -1,    59,   124,   265,     1,    -1,    59,   124,   378,     1,
      -1,    59,   124,   378,   265,     1,    -1,    59,   124,   378,
     378,   265,    -1,    59,   124,   378,   378,   125,   357,    -1,
      59,   124,   378,   378,   247,   125,   357,    -1,    59,   124,
     378,   378,   265,   357,    -1,    58,   356,    57,   124,   247,
     125,    -1,    58,   356,    57,   124,   247,    -1,    58,   356,
      57,   124,   265,    -1,    58,   356,    57,   124,    -1,    58,
     356,    57,    -1,    58,   356,    -1,    58,    -1,    57,     1,
      -1,    57,   124,   125,     1,    -1,    57,   124,   265,    -1,
      57,   124,   247,   125,   357,    -1,    57,   124,   265,   357,
      -1,    60,   218,   127,    -1,    61,   127,    -1,    62,   127,
      -1,    63,   127,    -1,    63,   247,   127,    -1,    63,   265,
     127,    -1,    63,   223,   127,    -1,    63,   224,   127,    -1,
      63,   265,    -1,    63,   224,    -1,    63,    -1,    60,    -1,
     302,   334,   369,   376,    -1,   302,   334,   376,    -1,   302,
     336,   369,   376,    -1,   302,   336,   376,    -1,   334,   369,
     376,    -1,   334,   376,    -1,   302,   334,   369,   377,    -1,
     302,   334,   377,    -1,   302,   336,   369,   377,    -1,   302,
     336,   377,    -1,   334,   369,   377,    -1,   334,   377,    -1,
       5,    -1,   387,     5,    -1,   385,    -1,   215,    -1,   302,
     215,    -1,   366,    -1,    77,   387,    -1,    77,    31,   387,
      -1,    77,   218,   387,    -1,   127,    -1,   363,   385,    -1,
     363,   215,    -1,   363,   366,    -1,   363,    77,   387,    -1,
     363,    77,    31,   387,    -1,   363,    77,   218,   387,    -1,
     363,   133,    -1,    31,   133,    -1,   102,   218,    -1,   102,
     151,    -1,   393,    -1,   363,   393,    -1,   217,    -1,   302,
     217,    -1,   386,    -1,   363,   217,    -1,   363,   386,    -1,
     367,    -1,   363,   367,    -1,   389,    -1,   391,   389,    -1,
     390,   389,    -1,   391,     1,    -1,   390,     1,    -1,   388,
      -1,   391,   388,    -1,   390,   215,    -1,   390,   363,   215,
      -1,   391,    -1,   390,    -1,    -1,   106,   387,   218,   131,
     398,   130,    -1,   106,   387,   151,   131,   398,   130,    -1,
     106,   387,   131,   398,   130,    -1,   301,   218,   387,   127,
      -1,   218,    -1,   123,   218,    -1,   122,   218,    -1,   395,
      -1,   396,   129,   395,    -1,   108,   396,   127,    -1,   108,
     396,   218,   127,    -1,   394,    -1,   397,    -1,   398,   394,
      -1,   398,   397,    -1,   109,   124,   245,   129,   245,   125,
      -1,   107,   124,   387,   129,   218,   125,    -1,   108,   124,
     387,   129,   218,   125,    -1,   106,   124,   387,   125,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   284,   284,   303,   342,   343,   423,   427,   430,   431,
     432,   471,   473,   478,   483,   488,   490,   495,   497,   502,
     504,   509,   511,   513,   515,   517,   521,   525,   538,   540,
     542,   544,   546,   552,   554,   559,   564,   569,   571,   573,
     578,   579,   583,   584,   595,   599,   600,   602,   607,   608,
     610,   613,   625,   636,   655,   657,   662,   663,   664,   665,
     666,   667,   668,   669,   682,   686,   687,   688,   689,   693,
     694,   695,   696,   697,   698,   699,   703,   705,   710,   712,
     714,   716,   718,   748,   750,   755,   757,   759,   761,   763,
     792,   794,   796,   801,   803,   808,   810,   814,   816,   818,
     820,   825,   828,   831,   834,   899,   901,   906,   908,   910,
     912,   914,   945,   949,   950,   951,   955,   956,   957,   961,
     962,   963,   964,   968,   971,   974,   977,   980,   985,   986,
     988,   990,   992,   994,   999,  1003,  1006,  1009,  1012,  1015,
    1020,  1021,  1023,  1028,  1032,  1034,  1039,  1041,  1046,  1048,
    1053,  1058,  1060,  1065,  1067,  1069,  1071,  1076,  1078,  1080,
    1082,  1087,  1088,  1089,  1090,  1091,  1092,  1093,  1094,  1095,
    1096,  1097,  1099,  1100,  1102,  1106,  1109,  1110,  1111,  1112,
    1113,  1114,  1115,  1116,  1117,  1118,  1119,  1120,  1121,  1122,
    1124,  1125,  1129,  1130,  1131,  1135,  1139,  1140,  1141,  1145,
    1146,  1147,  1148,  1149,  1153,  1154,  1166,  1167,  1171,  1172,
    1173,  1174,  1175,  1176,  1177,  1178,  1182,  1186,  1187,  1191,
    1199,  1200,  1204,  1205,  1206,  1210,  1211,  1215,  1216,  1217,
    1218,  1219,  1220,  1260,  1261,  1265,  1273,  1274,  1282,  1283,
    1285,  1286,  1295,  1296,  1300,  1307,  1314,  1320,  1327,  1333,
    1342,  1349,  1355,  1361,  1367,  1373,  1379,  1390,  1395,  1396,
    1401,  1402,  1403,  1407,  1411,  1412,  1413,  1414,  1415,  1416,
    1417,  1430,  1431,  1432,  1433,  1434,  1435,  1436,  1437,  1438,
    1439,  1440,  1441,  1442,  1443,  1444,  1445,  1446,  1447,  1448,
    1449,  1450,  1451,  1452,  1453,  1455,  1456,  1457,  1458,  1459,
    1461,  1462,  1466,  1470,  1474,  1475,  1479,  1481,  1482,  1483,
    1484,  1485,  1486,  1487,  1488,  1489,  1491,  1492,  1493,  1494,
    1495,  1496,  1497,  1498,  1525,  1526,  1527,  1528,  1532,  1533,
    1534,  1535,  1536,  1540,  1541,  1542,  1543,  1545,  1546,  1547,
    1548,  1551,  1552,  1554,  1558,  1559,  1568,  1569,  1570,  1571,
    1572,  1573,  1574,  1575,  1579,  1580,  1584,  1585,  1586,  1587,
    1588,  1589,  1590,  1594,  1595,  1596,  1597,  1598,  1602,  1603,
    1604,  1605,  1606,  1610,  1618,  1619,  1620,  1621,  1622,  1623,
    1624,  1625,  1626,  1630,  1631,  1632,  1633,  1634,  1636,  1637,
    1638,  1639,  1643,  1644,  1645,  1647,  1648,  1652,  1653,  1654,
    1656,  1657,  1661,  1662,  1663,  1665,  1666,  1670,  1671,  1672,
    1676,  1677,  1678,  1682,  1683,  1684,  1685,  1686,  1688,  1689,
    1690,  1691,  1693,  1694,  1695,  1696,  1698,  1699,  1700,  1701,
    1705,  1706,  1707,  1708,  1709,  1711,  1712,  1713,  1714,  1718,
    1719,  1720,  1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,
    1732,  1733,  1734,  1735,  1739,  1740,  1741,  1745,  1746,  1747,
    1748,  1750,  1751,  1753,  1754,  1759,  1761,  1766,  1794,  1795,
    1796,  1797,  1799,  1800,  1801,  1802,  1804,  1805,  1809,  1810,
    1819,  1820,  1824,  1825,  1826,  1827,  1828,  1829,  1830,  1834,
    1835,  1839,  1843,  1847,  1854,  1855,  1856,  1857,  1858,  1862,
    1863,  1906,  1907,  1908,  1909,  1910,  1911,  1912,  1916,  1917,
    1918,  1919,  1920,  1927,  1928,  1929,  1930,  1934,  1935,  1936,
    1938,  1939,  1943,  1944,  1945,  1947,  1948,  1952,  1953,  1954,
    1956,  1957,  1961,  1962,  1963,  1967,  1968,  1969,  1973,  1974,
    1975,  1976,  1977,  1978,  1979,  1980,  1981,  1983,  1984,  1985,
    1986,  1987,  1988,  1989,  1990,  1992,  1993,  1994,  1995,  1997,
    1998,  1999,  2000,  2002,  2010,  2014,  2019,  2026,  2027,  2031,
    2036,  2037,  2041,  2042,  2043,  2044,  2050,  2051,  2052,  2056,
    2057,  2058,  2059,  2063,  2065,  2069,  2070,  2071,  2072,  2073,
    2074,  2075,  2079,  2080,  2081,  2082,  2083,  2084,  2085,  2089,
    2090,  2091,  2095,  2096,  2097,  2101,  2105,  2106,  2110,  2111,
    2112,  2116,  2117,  2119,  2120,  2121,  2122,  2123,  2125,  2126,
    2127,  2128,  2129,  2131,  2132,  2136,  2137,  2141,  2142,  2143,
    2147,  2148,  2149,  2150,  2151,  2152,  2153,  2154,  2155,  2157,
    2158,  2160,  2161,  2162,  2163,  2164,  2166,  2167,  2168,  2169,
    2173,  2174,  2178,  2179,  2183,  2187,  2188,  2189,  2194,  2195,
    2199,  2200,  2201,  2202,  2203,  2204,  2205,  2206,  2207,  2208,
    2209,  2210,  2211,  2212,  2213,  2214,  2215,  2216,  2217,  2218,
    2219,  2220,  2221,  2222,  2223,  2224,  2225,  2229,  2230,  2231,
    2232,  2233,  2234,  2235,  2236,  2237,  2238,  2239,  2240,  2241,
    2242,  2243,  2244,  2245,  2246,  2247,  2248,  2249,  2250,  2251,
    2252,  2253,  2259,  2261,  2263,  2265,  2267,  2269,  2271,  2273,
    2275,  2277,  2282,  2283,  2287,  2293,  2299,  2306,  2316,  2317,
    2318,  2319,  2323,  2324,  2325,  2327,  2328,  2329,  2331,  2332,
    2333,  2337,  2341,  2349,  2358,  2367,  2368,  2370,  2371,  2375,
    2382,  2389,  2392,  2405,  2419,  2422,  2424,  2426,  2431,  2432,
    2436,  2437,  2438,  2439,  2440,  2441,  2442,  2443,  2447,  2448,
    2449,  2450,  2451,  2452,  2453,  2454,  2455,  2456,  2460,  2461,
    2462,  2463,  2464,  2465,  2466,  2467,  2468,  2469,  2473,  2474,
    2475,  2476,  2477,  2478,  2479,  2480,  2481,  2482,  2483,  2484,
    2488,  2489,  2490,  2491,  2492,  2493,  2494,  2495,  2496,  2497,
    2501,  2502,  2506,  2507,  2508,  2509,  2510,  2511,  2512,  2513,
    2514,  2516,  2518,  2526,  2536,  2537,  2541,  2542,  2543,  2544,
    2545,  2546,  2547,  2548,  2549,  2557,  2566,  2567,  2568,  2569,
    2570,  2571,  2572,  2573,  2574,  2575,  2576,  2577,  2578,  2586,
    2595,  2596,  2597,  2598,  2599,  2600,  2601,  2602,  2603,  2604,
    2605,  2606,  2607,  2615,  2624,  2625,  2629,  2630,  2631,  2632,
    2633,  2637,  2638,  2645,  2647,  2656,  2665,  2674,  2683,  2684,
    2685,  2686,  2690,  2691,  2692,  2693,  2694,  2695,  2696,  2697,
    2698,  2702,  2706,  2707,  2708,  2709,  2710,  2715,  2724,  2733,
    2742,  2756,  2757,  2762,  2766,  2767,  2768,  2769,  2770,  2775,
    2784,  2793,  2802,  2816,  2817,  2866,  2867,  2868,  2869,  2881,
    2882,  2883,  2888,  2889,  2890,  2891,  2892,  2896,  2897,  2901,
    2902,  2903,  2907,  2908,  2912,  2913,  2914,  2915,  2916,  2917,
    2918,  2919,  2920,  2921,  2922,  2923,  2924,  2925,  2926,  2927,
    2931,  2932,  2933,  2934,  2935,  2936,  2937,  2938,  2942,  2943,
    2944,  2945,  2949,  2950,  2951,  2952,  2953,  2957,  2958,  2959,
    2960,  2961,  2965,  2966,  2968,  2970,  2972,  2977,  2978,  2980,
    2982,  2987,  2988,  2989,  2990,  2994,  2995,  2996,  2997,  3001,
    3002,  3003,  3004,  3008,  3009,  3010,  3011,  3015,  3016,  3017,
    3018,  3022,  3023,  3024,  3041,  3042,  3043,  3044,  3057,  3074,
    3075,  3080,  3081,  3085,  3086,  3087,  3088,  3091,  3092,  3096,
    3097,  3098,  3102,  3106,  3110,  3111,  3112,  3113,  3114,  3115,
    3124,  3133,  3134,  3135,  3136,  3140,  3141,  3145,  3146,  3151,
    3152,  3153,  3154,  3155,  3156,  3175,  3176,  3180,  3181,  3182,
    3183,  3184,  3185,  3187,  3188,  3189,  3190,  3194,  3195,  3196,
    3197,  3198,  3200,  3201,  3202,  3206,  3207,  3208,  3209,  3210,
    3211,  3215,  3216,  3217,  3222,  3223,  3224,  3225,  3226,  3227,
    3228,  3229,  3230,  3231,  3232,  3233,  3234,  3238,  3239,  3240,
    3241,  3242,  3243,  3244,  3248,  3249,  3250,  3254,  3255,  3256,
    3260,  3261,  3262,  3263,  3265,  3266,  3267,  3269,  3270,  3271,
    3272,  3274,  3275,  3276,  3280,  3281,  3282,  3283,  3284,  3286,
    3287,  3288,  3289,  3290,  3294,  3295,  3296,  3297,  3298,  3299,
    3300,  3302,  3303,  3304,  3305,  3306,  3310,  3311,  3312,  3316,
    3317,  3321,  3322,  3323,  3324,  3328,  3329,  3330,  3332,  3333,
    3334,  3338,  3342,  3343,  3345,  3346,  3347,  3351,  3352,  3353,
    3354,  3358,  3359,  3363,  3364,  3365,  3369,  3370,  3371,  3372,
    3373,  3374,  3375,  3379,  3380,  3381,  3382,  3386,  3387,  3388,
    3389,  3393,  3397,  3401,  3403,  3406,  3412,  3413,  3414,  3418,
    3419,  3420,  3421,  3422,  3423,  3427,  3428,  3432,  3433,  3434,
    3436,  3437,  3439,  3440,  3441,  3442,  3443,  3445,  3446,  3450,
    3451,  3452,  3453,  3457,  3458,  3459,  3460,  3462,  3463,  3464,
    3465,  3466,  3467,  3468,  3471,  3475,  3476,  3480,  3481,  3485,
    3486,  3487,  3488,  3489,  3490,  3491,  3492,  3496,  3497,  3498,
    3499,  3505,  3506,  3508,  3509,  3512,  3513,  3516,  3517,  3518,
    3519,  3520,  3521,  3525,  3526,  3538,  3539,  3542,  3545,  3547,
    3548,  3549,  3559,  3561,  3562,  3564,  3565,  3566,  3567,  3577,
    3578,  3579,  3580,  3581,  3582,  3586,  3587,  3596,  3598,  3599,
    3601,  3603,  3607,  3608,  3609,  3610,  3611,  3615,  3616,  3617,
    3619,  3624,  3625,  3626,  3630,  3631,  3632,  3636,  3640,  3641,
    3642,  3646,  3647,  3651,  3652,  3656,  3657,  3658,  3659,  3663,
    3667,  3671,  3675
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "INT128", "LONG", "SIGNED", "UNSIGNED",
  "FLOAT", "DOUBLE", "CONST", "VOLATILE", "VOID", "VALIST", "STRUCT",
  "UNION", "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF", "SWITCH", "WHILE",
  "DO", "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN", "IFX", "ELSE",
  "CLASS", "THISCLASS", "CLASS_NAME", "PROPERTY", "SETPROP", "GETPROP",
  "NEWOP", "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT",
  "DEFINE", "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT",
  "ANY_OBJECT", "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH",
  "STOPWATCHING", "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER",
  "CLASS_NO_EXPANSION", "CLASS_FIXED", "ISPROPSET",
  "CLASS_DEFAULT_PROPERTY", "PROPERTY_CATEGORY", "CLASS_DATA",
  "CLASS_PROPERTY", "SUBCLASS", "NAMESPACE", "NEW0OP", "RENEW0", "VAARG",
  "DBTABLE", "DBFIELD", "DBINDEX", "DATABASE_OPEN", "ALIGNOF",
  "ATTRIB_DEP", "__ATTRIB", "BOOL", "_BOOL", "_COMPLEX", "_IMAGINARY",
  "RESTRICT", "THREAD", "WIDE_STRING_LITERAL", "BUILTIN_OFFSETOF", "'*'",
  "'<'", "'>'", "'('", "')'", "'~'", "';'", "'='", "','", "'}'", "'{'",
  "'.'", "':'", "'$'", "'['", "']'", "'&'", "'+'", "'-'", "'!'", "'/'",
  "'%'", "'^'", "'|'", "'?'", "$accept", "guess_type", "type",
  "base_strict_type", "base_strict_type_name", "strict_type",
  "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "constant", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "argument_expression_list", "argument_expression_list_error",
  "common_unary_expression", "unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "common_unary_expression_error", "unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction_type_ok", "direct_declarator_nofunction",
  "direct_declarator_function_start", "direct_declarator_function",
  "direct_declarator_function_error", "direct_declarator",
  "direct_declarator_function_start_type_ok",
  "direct_declarator_function_type_ok",
  "direct_declarator_function_error_type_ok", "direct_declarator_type_ok",
  "ext_decl", "_attrib", "attribute_word", "attribute", "attribs_list",
  "attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_type_ok",
  "declarator_function", "declarator_function_error",
  "declarator_function_type_ok", "declarator_function_error_type_ok",
  "declarator_nofunction_type_ok", "initializer", "initializer_error",
  "initializer_condition", "initializer_condition_error",
  "initializer_list", "init_declarator", "init_declarator_error",
  "init_declarator_list", "init_declarator_list_error", "type_name",
  "guess_type_name", "parameter_declaration",
  "parameter_declaration_error", "parameter_list", "parameter_list_error",
  "parameter_type_list", "parameter_type_list_error", "statement",
  "statement_error", "asm_field", "asm_field_list", "asm_statement",
  "labeled_statement", "labeled_statement_error", "declaration_mode",
  "member_access", "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    42,    60,    62,    40,    41,   126,    59,    61,    44,
     125,   123,    46,    58,    36,    91,    93,    38,    43,    45,
      33,    47,    37,    94,   124,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   146,   147,   147,   148,   148,   149,   150,   151,   151,
     151,   152,   152,   153,   154,   155,   155,   156,   156,   157,
     157,   158,   158,   158,   158,   158,   158,   158,   159,   159,
     159,   159,   159,   160,   160,   161,   162,   163,   163,   163,
     164,   164,   165,   165,   165,   166,   166,   166,   167,   167,
     167,   167,   167,   167,   168,   168,   169,   169,   169,   169,
     169,   169,   169,   169,   169,   170,   170,   170,   170,   171,
     171,   171,   171,   171,   171,   171,   172,   172,   173,   173,
     173,   173,   173,   174,   174,   175,   175,   175,   175,   175,
     176,   176,   176,   177,   177,   178,   178,   178,   178,   178,
     178,   178,   178,   178,   178,   179,   179,   180,   180,   180,
     180,   180,   181,   182,   182,   182,   183,   183,   183,   184,
     184,   184,   184,   185,   185,   185,   185,   185,   186,   186,
     186,   186,   186,   186,   187,   188,   188,   188,   188,   188,
     189,   189,   189,   190,   191,   191,   192,   192,   193,   193,
     194,   195,   195,   196,   196,   196,   196,   197,   197,   197,
     197,   198,   198,   198,   198,   198,   198,   198,   198,   198,
     198,   198,   198,   198,   198,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   200,   200,   200,   201,
     201,   201,   201,   201,   202,   202,   203,   203,   204,   204,
     204,   204,   204,   204,   204,   204,   205,   206,   206,   207,
     208,   208,   209,   209,   209,   210,   210,   211,   211,   211,
     211,   211,   211,   212,   212,   213,   214,   214,   214,   214,
     214,   214,   214,   214,   215,   215,   215,   215,   215,   215,
     216,   217,   217,   217,   217,   217,   217,   218,   219,   219,
     220,   220,   220,   221,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   223,   224,   225,   225,   226,   226,   226,   226,
     226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
     226,   226,   226,   226,   227,   227,   227,   227,   228,   228,
     228,   228,   228,   229,   229,   229,   229,   229,   229,   229,
     229,   229,   229,   229,   230,   230,   231,   231,   231,   231,
     231,   231,   231,   231,   232,   232,   233,   233,   233,   233,
     233,   233,   233,   234,   234,   234,   234,   234,   235,   235,
     235,   235,   235,   236,   237,   237,   237,   237,   237,   237,
     237,   237,   237,   238,   238,   238,   238,   238,   238,   238,
     238,   238,   239,   239,   239,   239,   239,   240,   240,   240,
     240,   240,   241,   241,   241,   241,   241,   242,   242,   242,
     243,   243,   243,   244,   244,   244,   244,   244,   244,   244,
     244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
     245,   245,   245,   245,   245,   245,   245,   245,   245,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     247,   247,   247,   247,   248,   248,   248,   249,   249,   249,
     249,   249,   249,   249,   249,   249,   249,   249,   250,   250,
     250,   250,   250,   250,   250,   250,   250,   250,   251,   251,
     252,   252,   253,   253,   253,   253,   253,   253,   253,   254,
     254,   254,   254,   254,   255,   255,   255,   255,   255,   256,
     256,   256,   256,   256,   256,   256,   256,   256,   257,   257,
     257,   257,   257,   257,   257,   257,   257,   258,   258,   258,
     258,   258,   259,   259,   259,   259,   259,   260,   260,   260,
     260,   260,   261,   261,   261,   262,   262,   262,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   264,   264,   264,
     264,   264,   265,   265,   265,   265,   265,   265,   265,   266,
     266,   266,   266,   267,   268,   269,   269,   269,   269,   269,
     269,   269,   270,   270,   270,   270,   270,   270,   270,   271,
     271,   271,   272,   272,   272,   273,   274,   274,   275,   275,
     275,   276,   276,   276,   276,   276,   276,   276,   276,   276,
     276,   276,   276,   276,   276,   277,   277,   278,   278,   278,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     280,   280,   281,   281,   282,   283,   283,   283,   284,   284,
     285,   285,   285,   285,   285,   285,   285,   285,   285,   285,
     285,   285,   285,   285,   285,   285,   285,   285,   285,   285,
     285,   285,   285,   285,   285,   285,   285,   286,   286,   286,
     286,   286,   286,   286,   286,   286,   286,   286,   286,   286,
     286,   286,   286,   286,   286,   286,   286,   286,   286,   286,
     286,   286,   287,   287,   287,   287,   287,   287,   287,   287,
     287,   287,   288,   288,   289,   289,   289,   289,   290,   290,
     290,   290,   291,   291,   291,   291,   291,   291,   291,   291,
     291,   292,   293,   293,   294,   295,   295,   295,   295,   296,
     296,   296,   296,   296,   296,   296,   296,   296,   297,   297,
     298,   298,   298,   298,   298,   298,   298,   298,   299,   299,
     299,   299,   299,   299,   299,   299,   299,   299,   300,   300,
     300,   300,   300,   300,   300,   300,   300,   300,   301,   301,
     301,   301,   301,   301,   301,   301,   301,   301,   301,   301,
     302,   302,   302,   302,   302,   302,   302,   302,   302,   302,
     303,   303,   304,   304,   304,   304,   304,   304,   304,   304,
     304,   304,   304,   304,   305,   305,   306,   306,   306,   306,
     306,   306,   306,   306,   306,   306,   307,   307,   307,   307,
     307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
     308,   308,   308,   308,   308,   308,   308,   308,   308,   308,
     308,   308,   308,   308,   309,   309,   310,   310,   310,   310,
     310,   311,   311,   311,   311,   311,   311,   311,   311,   311,
     311,   311,   312,   312,   312,   312,   312,   312,   312,   312,
     312,   313,   314,   314,   314,   314,   314,   315,   315,   315,
     315,   316,   316,   317,   318,   318,   318,   318,   318,   319,
     319,   319,   319,   320,   320,   321,   321,   321,   321,   322,
     322,   322,   323,   323,   323,   323,   323,   324,   324,   325,
     325,   325,   326,   326,   327,   327,   327,   327,   327,   327,
     327,   327,   327,   327,   327,   327,   327,   327,   327,   327,
     328,   328,   328,   328,   328,   328,   328,   328,   329,   329,
     329,   329,   330,   330,   330,   330,   330,   331,   331,   331,
     331,   331,   332,   332,   332,   332,   332,   333,   333,   333,
     333,   334,   334,   334,   334,   335,   335,   335,   335,   336,
     336,   336,   336,   337,   337,   337,   337,   338,   338,   338,
     338,   339,   339,   339,   340,   340,   340,   340,   340,   341,
     341,   342,   342,   343,   343,   343,   343,   343,   343,   344,
     344,   344,   345,   345,   346,   346,   346,   346,   346,   346,
     346,   347,   347,   347,   347,   348,   348,   349,   349,   350,
     350,   350,   350,   350,   350,   351,   351,   352,   352,   352,
     352,   352,   352,   352,   352,   352,   352,   353,   353,   353,
     353,   353,   353,   353,   353,   354,   354,   354,   354,   354,
     354,   355,   355,   355,   356,   356,   356,   356,   356,   356,
     356,   356,   356,   356,   356,   356,   356,   357,   357,   357,
     357,   357,   357,   357,   358,   358,   358,   359,   359,   359,
     360,   360,   360,   360,   360,   360,   360,   360,   360,   360,
     360,   360,   360,   360,   361,   361,   361,   361,   361,   361,
     361,   361,   361,   361,   362,   362,   362,   362,   362,   362,
     362,   362,   362,   362,   362,   362,   363,   363,   363,   364,
     364,   365,   365,   365,   365,   366,   366,   366,   366,   366,
     366,   367,   368,   368,   368,   368,   368,   369,   369,   369,
     369,   370,   370,   371,   371,   371,   372,   372,   372,   372,
     372,   372,   372,   373,   373,   373,   373,   374,   374,   374,
     374,   375,   376,   377,   377,   377,   378,   378,   378,   379,
     379,   379,   379,   379,   379,   380,   380,   381,   381,   381,
     381,   381,   381,   381,   381,   381,   381,   381,   381,   382,
     382,   382,   382,   382,   382,   382,   382,   382,   382,   382,
     382,   382,   382,   382,   382,   382,   382,   382,   382,   383,
     383,   383,   383,   383,   383,   383,   383,   384,   384,   384,
     384,   385,   385,   385,   385,   385,   385,   386,   386,   386,
     386,   386,   386,   387,   387,   388,   388,   388,   388,   388,
     388,   388,   388,   388,   388,   388,   388,   388,   388,   388,
     388,   388,   388,   388,   388,   389,   389,   389,   389,   389,
     389,   389,   390,   390,   390,   390,   390,   391,   391,   391,
     391,   392,   392,   392,   393,   393,   393,   394,   395,   395,
     395,   396,   396,   397,   397,   398,   398,   398,   398,   399,
     400,   401,   402
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     3,     2,     1,
       2,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       3,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       3,     3,     3,     1,     2,     2,     1,     1,     2,     2,
       2,     2,     2,     2,     1,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     2,     3,     4,     5,
       4,     3,     4,     2,     3,     4,     5,     4,     3,     4,
       5,     5,     4,     2,     3,     3,     3,     3,     2,     4,
       3,     3,     2,     4,     3,     2,     3,     2,     3,     2,
       1,     2,     3,     3,     3,     2,     1,     3,     3,     1,
       3,     3,     2,     4,     5,     3,     4,     3,     1,     3,
       3,     3,     2,     3,     2,     4,     5,     3,     4,     3,
       1,     3,     3,     2,     1,     2,     2,     2,     1,     2,
       5,     7,     9,     6,     8,     4,     6,     1,     2,     3,
       4,     2,     2,     1,     1,     2,     2,     1,     1,     1,
       1,     7,     1,     2,     4,     1,     1,     2,     3,     2,
       2,     2,     3,     1,     2,     2,     2,     1,     1,     1,
       2,     2,     2,     3,     3,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     1,     2,     2,     4,
       4,     6,     2,     4,     4,     6,     1,     1,     3,     1,
       4,     5,     1,     1,     1,     1,     3,     1,     1,     1,
       3,     3,     3,     1,     3,     1,     2,     2,     3,     3,
       5,     5,     6,     6,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     3,
       1,     2,     4,     1,     1,     1,     4,     4,     5,     8,
       2,     1,     1,     1,     2,     6,     6,     5,     5,     6,
       6,     5,     5,     7,     7,     6,     6,     7,     7,     6,
       6,     4,     5,     4,     6,     4,     1,     1,     1,     1,
       3,     2,     1,     2,     2,     2,     1,     4,     4,     3,
       4,     4,     3,     3,     2,     2,     4,     4,     3,     4,
       3,     3,     2,     2,     1,     1,     3,     3,     1,     1,
       3,     3,     2,     2,     2,     2,     2,     2,     4,     5,
       5,     2,     4,     6,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     1,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     2,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       1,     3,     3,     1,     5,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     2,     1,     3,     3,     1,     1,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       2,     2,     2,     5,     6,     6,     2,     5,     1,     1,
       1,     4,     1,     3,     3,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     1,
       2,     3,     3,     3,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     3,     3,     1,     3,     3,     1,     5,
       5,     5,     5,     4,     4,     4,     4,     5,     5,     5,
       5,     4,     4,     4,     4,     5,     5,     5,     5,     5,
       5,     5,     5,     3,     3,     2,     2,     1,     3,     3,
       3,     3,     1,     2,     3,     3,     2,     2,     2,     1,
       2,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     1,     3,     2,     1,     2,     2,     2,     4,
       4,     3,     3,     4,     5,     4,     6,     6,     4,     5,
       4,     6,     6,     5,     5,     2,     2,     2,     5,     3,
       5,     6,     5,     7,     7,     8,     8,     7,     7,     3,
       3,     3,     4,     3,     5,     5,     6,     7,     6,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     4,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     4,
       4,     1,     1,     2,     2,     3,     5,     2,     3,     5,
       5,     5,     1,     3,     2,     2,     3,     3,     2,     3,
       3,     4,     3,     3,     3,     3,     3,     3,     4,     4,
       4,     1,     1,     4,     3,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     1,     1,     2,     1,     2,     1,     2,
       1,     2,     4,     5,     1,     1,     1,     2,     1,     2,
       1,     2,     1,     2,     4,     5,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     4,     5,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     4,     5,     3,     3,     1,     3,     3,     3,
       3,     1,     1,     1,     4,     4,     4,     3,     4,     4,
       4,     3,     1,     3,     4,     3,     4,     4,     4,     4,
       3,     2,     3,     3,     3,     3,     2,     2,     2,     3,
       4,     1,     1,     2,     3,     3,     3,     3,     2,     2,
       2,     3,     4,     1,     1,     1,     1,     1,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     1,
       2,     3,     6,     5,     3,     4,     2,     3,     3,     3,
       3,     4,     4,     4,     2,     3,     3,     3,     4,     4,
       3,     4,     2,     3,     3,     3,     4,     4,     1,     2,
       2,     3,     1,     1,     2,     2,     3,     1,     1,     2,
       2,     3,     1,     2,     3,     2,     2,     1,     2,     3,
       2,     1,     2,     3,     3,     1,     2,     3,     3,     1,
       2,     3,     3,     1,     2,     3,     3,     1,     2,     3,
       3,     1,     3,     4,     1,     4,     2,     5,     3,     1,
       1,     1,     1,     1,     1,     3,     3,     2,     2,     1,
       1,     3,     2,     3,     1,     3,     3,     3,     3,     3,
       3,     1,     2,     3,     3,     1,     2,     1,     2,     2,
       2,     2,     3,     1,     1,     3,     3,     1,     3,     4,
       3,     4,     3,     3,     4,     3,     4,     1,     3,     3,
       4,     3,     3,     3,     4,     1,     3,     3,     3,     3,
       3,     1,     3,     2,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     2,     2,     2,     1,     1,     1,
       1,     1,     2,     1,     1,     4,     7,     1,     3,     0,
       6,     8,    10,    12,     8,    10,    10,     5,     7,     9,
      11,     7,     9,     9,     3,     4,     4,     3,     3,     3,
       4,     4,     3,     3,     3,     4,     4,     3,     2,     3,
       2,     3,     4,     4,     3,     3,     1,     1,     1,     1,
       1,     2,     3,     2,     2,     2,     3,     3,     2,     5,
       6,     2,     2,     2,     2,     2,     2,     1,     2,     2,
       3,     1,     2,     1,     2,     2,     1,     2,     2,     2,
       2,     2,     2,     1,     1,     2,     2,     1,     1,     2,
       2,     1,     2,     2,     1,     2,     1,     2,     2,     5,
       5,     7,     7,     5,     5,     3,     2,     5,     4,     4,
       7,     6,     6,     5,     7,     6,     4,     7,     9,     3,
       4,     4,     5,     5,     6,     7,     6,     6,     5,     5,
       4,     3,     2,     1,     2,     4,     3,     5,     4,     3,
       2,     2,     2,     3,     3,     3,     3,     2,     2,     1,
       1,     4,     3,     4,     3,     3,     2,     4,     3,     4,
       3,     3,     2,     1,     2,     1,     1,     2,     1,     2,
       3,     3,     1,     2,     2,     2,     3,     4,     4,     2,
       2,     2,     2,     1,     2,     1,     2,     1,     2,     2,
       1,     2,     1,     2,     2,     2,     2,     1,     2,     2,
       3,     1,     1,     0,     6,     6,     5,     4,     1,     2,
       2,     1,     3,     3,     4,     1,     1,     2,     2,     6,
       6,     6,     4
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1293,   257,     6,   592,   593,   594,   596,   597,   661,   662,
     663,   664,   665,   666,   668,   671,   672,   669,   670,   655,
     656,   660,   667,   758,   759,   605,  1138,   235,   680,   915,
     916,     0,     0,   919,  1136,  1137,   681,   682,   673,     0,
       0,     0,     0,     0,   920,   921,   684,   683,   685,   686,
     598,   595,   958,     0,  1262,   806,   676,     8,     4,     0,
       0,     0,  1256,     0,  1275,   882,   800,     0,   675,     0,
     650,   652,   808,   810,   657,   802,   804,   741,   674,     0,
       0,   651,   653,     0,     0,     0,     0,     0,   981,   654,
       0,   917,     0,     0,     0,  1258,  1280,  1255,  1277,  1287,
    1282,     0,     0,     0,  1273,     0,  1270,  1253,     0,     0,
    1259,     0,     0,     0,     0,  1272,  1271,     0,   658,   959,
     654,   960,   873,   872,   882,   914,   871,   901,   972,     0,
     913,   977,     0,     0,     0,     0,     0,     0,  1148,     0,
     237,   236,     0,     0,   245,     0,   244,     2,     3,     0,
       5,     0,   607,   606,     0,     0,   627,     0,     0,     0,
       0,   745,     0,   725,   724,     0,  1151,   594,   664,   665,
     666,  1145,   807,     8,  1257,  1276,   882,   801,   809,   811,
     803,   805,   981,   989,   654,     0,     0,  1020,     0,     0,
       0,  1031,     0,     0,   873,     0,     0,   872,     0,     0,
     891,     0,     0,   585,   586,   587,   589,   590,  1044,   591,
     588,   896,   794,   866,   788,     0,   798,     0,   790,   792,
     741,   796,     0,     0,  1043,     0,     0,  1047,  1057,     0,
       0,     0,     0,     0,     0,   982,     0,   688,   689,   690,
     691,   692,   693,   695,   698,   699,   696,   697,   687,   694,
     711,   700,     0,     0,   705,   704,   706,   707,  1181,   703,
       0,     0,   778,   702,   784,   780,   782,   786,   701,     0,
    1157,     0,     0,     0,     0,  1246,  1252,   594,     0,  1269,
    1264,  1278,     0,  1265,  1281,  1263,  1279,  1274,  1286,  1289,
       0,     0,     0,     0,     0,  1284,  1285,  1288,  1283,     1,
       0,  1260,  1261,  1254,     0,     0,   458,   263,     0,     0,
       0,     0,     0,     0,   352,   353,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   273,     0,   347,     0,
     350,     0,     0,   346,   348,   349,   351,     0,   265,     0,
     264,   306,   272,   271,   258,   457,     0,   344,   354,     0,
     356,   363,   368,   374,     0,   383,   392,   397,   402,   407,
     410,   413,   430,     0,   479,   478,   480,   482,   489,   494,
     499,   508,   517,   522,   527,   532,   535,   538,     0,   260,
     296,   297,   298,   299,     0,     0,     0,     0,     0,   659,
     961,     0,   903,     0,   908,     0,     0,     0,     0,     0,
       0,     0,   914,   973,   978,     0,   883,   975,   885,   980,
     976,   673,     4,   229,   228,   227,   233,     0,   264,   354,
     219,   480,     0,   206,   249,     0,     0,   248,   255,     0,
       0,  1139,  1140,     0,   168,     0,   169,   170,     0,     0,
       0,     0,     0,   172,   246,     0,     0,     0,     0,    29,
      31,   163,   175,   188,     0,   187,     0,   116,   119,     0,
     195,   128,     0,   164,   140,     0,   167,   183,   196,   199,
       0,     0,   264,     0,     0,   176,     0,   985,   654,     0,
      12,    18,     0,   813,   812,   820,   814,     0,   816,   818,
     741,   825,   824,   250,   256,   247,     0,     0,   239,   238,
     640,   599,   602,   639,   643,   629,     0,     0,     0,   222,
     223,   224,   225,     0,   217,     0,   754,   747,     0,     0,
     744,   751,   746,     0,     0,   757,   748,     0,     0,   727,
     726,     0,     0,     0,     0,     0,     0,   982,   990,     0,
    1022,     0,     0,  1242,  1248,     0,  1244,  1250,  1032,  1146,
       0,     0,     0,  1147,   890,     0,   264,   583,   584,     0,
       0,     0,     0,   607,   606,   608,     0,   728,     0,     0,
     664,     0,     0,  1041,   795,     8,   882,   789,   799,   791,
     793,   797,   914,   871,   654,   963,   962,     0,     0,     0,
     895,     0,     0,   894,     0,     0,     0,  1073,     0,   892,
     893,   983,     0,   984,     0,     0,  1155,  1143,  1154,    76,
    1152,   691,   692,   693,  1141,   882,   779,   785,   781,   783,
     787,   654,     0,  1156,  1153,  1144,     0,  1158,     0,  1245,
    1251,  1159,     0,     0,     0,     0,     0,     0,     0,     0,
    1240,     0,     0,     0,   700,     0,     0,     0,   157,  1077,
    1078,   703,     0,     0,     0,   264,     0,   354,     0,     0,
     480,   567,   572,     0,  1075,  1163,  1166,  1083,  1074,  1087,
       0,     0,     0,     0,  1185,  1183,  1076,  1089,     0,  1090,
    1081,  1088,     0,  1091,  1182,     0,     0,  1266,   882,     0,
       0,     0,  1276,     0,   871,   989,   654,     0,     0,     0,
       0,  1252,  1290,     0,     0,   413,     0,     0,   918,     0,
     337,   472,     0,   333,   468,   334,   469,     0,   860,   850,
     858,   852,   854,   856,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   341,   476,     0,   274,
       0,     0,     0,   764,   760,   762,   766,  1035,     0,   261,
       0,   301,   302,     0,   325,     0,   324,     0,   460,    93,
       0,   270,   459,     0,   314,   315,     0,     0,     0,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   439,
       0,     0,   336,   471,   335,   470,     0,     0,     0,     0,
       0,     0,     0,   375,   500,     0,     0,   373,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   677,     0,
     322,   323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   678,   679,     0,     0,
       0,  1305,  1306,     0,     0,     0,   877,     0,     0,     0,
     881,     0,     0,     0,   907,   906,   904,   905,   914,   973,
     978,   884,   886,  1000,    10,     9,     0,     0,     0,   654,
     962,   207,     0,     0,   264,   206,     0,     0,   832,   826,
     828,   830,     0,     0,     0,    16,    20,     0,   185,   184,
     186,     0,     0,     0,     0,   347,     0,   264,     0,    26,
       0,    21,    28,    24,     0,    25,    23,    22,    30,    32,
     190,    83,   191,   122,   162,     0,     0,     0,     0,   132,
       0,     0,   134,     0,     0,   143,   161,   200,   197,   202,
     201,   198,   203,   115,     0,     0,     0,   882,   722,   177,
     997,     0,   993,   654,     0,    11,    17,   712,   898,  1043,
       0,     0,     0,   986,     0,     0,   173,   165,   192,   181,
       0,   180,     0,   166,   882,   179,     0,   607,   606,   821,
     815,   817,   819,     0,     0,     0,   604,   642,     0,     0,
       7,   212,   208,   743,     0,     0,     0,     0,  1019,  1026,
    1027,  1028,  1029,    64,    53,    92,    39,    38,    57,    69,
      45,    48,     0,    74,    56,     0,     0,     0,  1010,  1012,
       0,  1009,  1011,     0,    41,    44,   914,   983,   974,   991,
     979,  1000,   992,     0,  1001,  1004,  1021,  1023,  1241,  1247,
    1243,  1249,  1025,  1033,  1030,  1034,   889,   887,   888,  1070,
    1052,  1061,   612,   611,     0,     0,   458,   729,     0,     0,
     458,   730,     0,     0,     0,   944,   882,     0,     0,   654,
     962,     0,     0,     0,   936,     0,     0,     0,     0,     0,
    1042,   965,     0,     0,   964,  1046,  1045,     0,   865,  1069,
     868,  1055,  1063,     0,   864,  1068,   867,  1053,  1062,     0,
    1072,  1066,   869,  1048,  1058,     0,  1067,   870,  1050,  1059,
     922,   923,   926,   925,   924,     0,   927,   929,     0,     0,
       0,     0,    77,     0,  1142,  1160,     0,     0,     0,     0,
       0,     0,  1224,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   264,     0,  1075,  1222,  1080,  1082,     0,
       0,  1230,  1231,  1232,     0,  1238,     0,     0,     0,     0,
       0,     0,   158,   144,  1086,  1085,  1084,     0,     0,     0,
     573,     0,  1079,     0,     0,     0,     0,   453,     0,     0,
     458,     0,     0,     0,     0,  1164,  1167,  1169,     0,  1165,
    1168,  1170,     0,  1196,  1092,  1267,  1268,   237,   236,     0,
       0,     0,   990,     0,     0,  1248,     0,  1250,  1251,     0,
       0,  1149,     0,     0,   772,   264,   774,   768,   770,   776,
    1037,     0,     0,     0,     0,     0,     0,   861,   851,   859,
     853,   855,   857,   654,   968,   967,     0,   846,   836,   844,
     838,   840,   842,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   259,     0,
     765,   761,   763,   767,  1036,     0,     0,   458,     0,     0,
       0,   105,     0,   300,   458,     0,     0,    94,   458,     0,
       0,   461,   313,   309,   329,   463,   464,   328,   465,   312,
       0,     0,   435,   431,   303,   357,   483,   358,   484,   359,
     485,   364,   490,   365,   491,   369,   495,   370,   496,   377,
     502,   378,   503,   376,   501,   388,   513,   384,   509,   389,
     514,   385,   510,   395,   520,   393,   518,   400,   525,   398,
     523,   405,   530,   403,   528,   408,   533,   411,   536,   563,
       0,   579,     0,     0,     0,     0,   437,   433,   462,   321,
     318,     0,   466,   467,   320,     0,     0,   436,   432,   360,
     486,   361,   487,   362,   488,   366,   492,   367,   493,   371,
     497,   372,   498,   381,   506,   382,   507,   379,   504,   380,
     505,   390,   515,   386,   511,   391,   516,   387,   512,   396,
     521,   394,   519,   401,   526,   399,   524,   406,   531,   404,
     529,   409,   534,   412,   537,   564,     0,     0,     0,     0,
     438,   434,     0,     0,  1298,  1301,     0,     0,  1296,  1307,
    1308,     0,     0,   876,   874,   875,   880,   878,   879,   234,
     232,   231,   230,   264,   654,   965,   241,     0,   207,   240,
     127,     0,   125,   833,   827,   829,   831,     0,   654,     0,
      15,    19,     0,   182,   997,   654,     0,   139,     0,   137,
     833,     0,   264,   654,     0,    27,    84,   117,   120,   118,
     121,   129,   130,   131,   133,   141,   142,   114,   112,   113,
      13,   714,   717,     0,     0,   910,  1043,     0,     0,     0,
     998,   994,     0,     0,   713,   882,   899,   987,   988,   882,
     193,   194,   178,     0,     0,     0,     0,   600,   601,   603,
       0,     0,   632,   628,     0,     0,     0,     0,     0,   226,
     218,   216,     0,     0,     0,    36,    37,    75,    54,     0,
      55,     0,    63,    61,    72,    67,    73,    60,    90,    39,
      70,    62,    91,    59,    71,    68,     0,    58,     0,   691,
      33,    35,    34,  1013,  1014,     0,   620,   610,     0,   615,
     609,     0,   458,   731,     0,     0,     0,   962,     0,   934,
     945,   946,   939,   937,   938,     0,   966,   947,     0,     0,
     940,     0,     0,     0,  1056,  1064,  1043,  1054,  1049,  1051,
    1060,   933,     0,     0,     0,   930,   708,   709,   710,   458,
       0,     0,  1117,  1127,  1122,     0,     0,     0,  1118,  1129,
    1123,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1221,  1209,     0,  1186,   264,     0,     0,     0,  1229,
    1235,  1236,  1233,  1234,     0,     0,     0,     0,   145,  1114,
    1124,  1119,     0,   159,   570,   568,     0,     0,     0,   451,
     574,   571,   569,   452,   575,     0,   991,  1247,  1249,  1150,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     773,   775,   769,   771,   777,  1038,     0,   293,   291,     0,
       0,   952,   654,     0,     0,     0,     0,     0,     0,   970,
       0,   969,     0,     0,     0,   847,   837,   845,   839,   841,
     843,     0,   267,     0,   266,   295,     0,     0,     0,     0,
       0,     0,  1312,     0,     0,     0,     0,     0,   355,   481,
     262,   108,   106,   327,   326,    99,   103,   310,     0,   311,
     307,   308,   580,     0,     0,     0,     0,     0,     0,   319,
     316,   317,     0,     0,     0,     0,  1300,  1299,  1303,     0,
       0,     0,  1295,  1294,     0,   962,   218,     0,     0,   123,
     126,     0,     0,     0,     0,     0,   998,     0,   135,   138,
       0,    14,   458,     0,     0,   723,     0,   882,   911,   999,
     995,   996,   715,   718,   900,   174,   822,     0,   243,   242,
       0,   631,     0,   213,   214,   204,   209,   210,   220,     0,
       0,    51,    46,    49,    52,    47,    50,    37,    43,    40,
      42,     0,     0,  1017,  1018,   619,     0,   614,     0,   965,
     964,   935,   948,   949,   942,   941,   943,  1040,  1039,     0,
     932,   931,    79,  1115,  1125,  1120,     0,  1116,  1126,  1121,
       0,     0,     0,     0,     0,  1225,  1199,     0,     0,  1198,
    1228,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1206,     0,  1187,  1210,  1188,  1211,     0,     0,
       0,  1099,   918,  1099,     0,     0,   155,     0,     0,     0,
     160,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   473,   292,   862,     0,   967,     0,   950,   953,   954,
     277,   278,     0,   971,   955,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   268,   281,   282,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   477,     0,   331,
     330,   455,   581,   422,   555,   414,   539,   426,   559,   418,
     547,   456,   582,   423,   556,   415,   540,   427,   560,   419,
     548,   424,   557,   416,   541,   428,   561,   420,   549,   425,
     558,   417,   542,   429,   562,   421,   550,  1302,  1304,  1297,
     834,     0,   124,   150,   999,     0,   136,    86,   912,     0,
       0,   823,     0,     0,     0,     0,     0,     0,   205,     0,
     221,     0,     0,  1015,  1016,  1005,     0,     0,     0,     0,
     928,  1189,  1190,  1193,  1194,  1197,  1227,     0,     0,     0,
       0,     0,     0,     0,  1203,  1212,     0,     0,     0,     0,
    1097,     0,  1094,  1107,     0,  1099,     0,  1099,     0,     0,
       0,     0,   475,   474,   969,   951,   863,   956,   957,   275,
     276,   848,   285,   286,     0,     0,     0,     0,   279,   280,
     289,   290,     0,     0,   294,  1310,  1311,  1309,   343,   835,
       0,   716,   719,   721,   720,     0,     0,   215,   211,     0,
    1002,  1007,     0,     0,     0,     0,     0,     0,     0,  1217,
    1201,     0,     0,  1202,  1214,     0,  1205,  1216,     0,     0,
       0,  1099,     0,  1099,     0,  1099,     0,  1100,     0,     0,
       0,   148,     0,   153,     0,   156,     0,   849,   283,   284,
       0,   287,   288,   171,  1003,  1191,  1192,     0,     0,  1200,
    1207,     0,  1204,  1215,     0,  1111,  1098,     0,     0,     0,
    1108,     0,     0,  1099,  1099,     0,  1099,   147,   146,   151,
     149,     0,     0,   355,   481,   269,     0,     0,     0,  1095,
       0,     0,  1099,  1104,     0,     0,  1101,     0,     0,   154,
    1208,     0,  1112,  1113,  1109,     0,     0,     0,     0,  1099,
     152,     0,     0,  1105,  1106,  1102,     0,  1096,  1110,     0,
    1103
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   212,    56,    57,   981,   337,   445,   446,   447,   448,
     449,   450,   451,   452,   996,   997,   998,   999,  1000,  1001,
    1002,  1003,  1004,  1005,  1006,  1007,   260,   261,   453,   454,
      59,   338,   339,   752,   781,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,  2100,  2101,  2102,   467,   652,
     653,   654,   468,   469,   470,   471,  1794,   413,   509,   414,
     510,   415,   511,   512,   873,   416,   417,    60,    61,    62,
      63,    64,   340,   341,   342,   343,   344,  1008,  1009,   345,
     346,   755,  1276,   347,   657,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   740,
     835,   659,  1333,   364,   365,   660,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   661,   662,  1134,
    1335,   559,   560,   214,    66,   502,   503,   215,    68,   216,
     217,    69,    70,    71,    72,    73,    74,   218,   119,   219,
     266,   938,   939,   220,   221,   222,    78,    79,    80,    81,
      82,   223,   747,  1210,   269,   475,    84,    85,   492,   493,
     883,  1233,   724,  1057,  1058,   125,    86,   476,    88,   477,
     128,   129,   130,   942,   131,   120,    90,  1106,  1107,  1108,
      91,   585,  1224,   479,   587,  1226,   134,   187,   480,   481,
     189,   946,   136,  1026,  1544,  1014,  1015,  1545,   190,   191,
     192,   193,   748,  1211,   227,   228,   229,   230,   231,   232,
     665,   666,  2020,  2021,   667,   668,   669,    94,   482,   270,
      95,    96,   271,   272,   273,   672,   673,   674,   675,   274,
     676,   904,  1628,  1137,   679,   680,   681,  1138,   683,    97,
      98,   379,    99,   100,   101,   102,   103,   104,   841,  1405,
    1406,   842,   843,   380,   381,   382,   383
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -2034
static const int yypact[] =
{
   38766, -2034, -2034, -2034, -2034,   319, -2034, -2034, -2034, -2034,
   -2034, -2034, -2034, -2034, -2034, -2034, -2034, -2034, -2034, -2034,
   -2034, -2034, -2034, -2034, -2034, -2034, -2034, -2034, -2034, -2034,
   -2034,   887,   344, -2034, -2034, -2034, -2034, -2034, -2034,    78,
     244,   260,   389,   396, -2034, -2034, -2034, -2034, -2034, -2034,
   -2034, -2034,  2702,  2912, -2034, -2034, -2034,    17, -2034,   371,
     389,   -11, -2034,   920,   408,  1047, -2034,   282, -2034,   332,
   -2034,   418, -2034, -2034, -2034, -2034, -2034,   839, -2034,  1010,
     444, -2034,   489,   930, 38363,  2850,   -17, 39066, -2034,   518,
     527, -2034,  1204, 41733, 36912, -2034, -2034, -2034, -2034, -2034,
   -2034, 38870, 37954,   678, -2034,   344, -2034, -2034,   396,   396,
     696,   591,   396, 29560,   389, -2034, -2034,   532, -2034,  2702,
   -2034, -2034, -2034,   610, -2034,   -12,   810, -2034, -2034, 39165,
   -2034, -2034,  2912,  2746,  2357,  2539,  2016, 24201, -2034,   635,
     798,   619, 30655, 41352, -2034, 30783, -2034, -2034, -2034,   389,
   -2034,  1184,  1066,  1086,   133, 41352, -2034, 41079, 30911, 41352,
   31039, -2034, 31167, -2034, -2034,   389, -2034, -2034,   480,   647,
     654, -2034, -2034,   952, -2034,   408,   577, -2034, -2034, -2034,
   -2034, -2034,  1256,  1423,   518,  2746,  1640,  2016, 41733, 41733,
     573, -2034,  1163,   668,   671,   647,   654,   821,   518,  1197,
   -2034, 28140,   683, -2034, -2034, -2034, -2034, -2034, -2034, -2034,
   -2034, -2034, -2034,   825, -2034,   335, -2034,   717, -2034, -2034,
     754, -2034,   778,  2014, 36000,   401,   505, -2034, -2034,   539,
     624,   815,   828,   164,   857, -2034,   164, -2034, -2034, -2034,
   -2034, -2034, -2034, -2034, -2034, -2034, -2034, -2034, -2034, -2034,
   -2034, -2034,   873,   876, -2034, -2034, -2034, -2034, -2034, -2034,
      85,    95, -2034, -2034, -2034, -2034, -2034, -2034, -2034, 38565,
   -2034, 17872,  8187, 41940, 18013, -2034,   833,   929,   985, -2034,
   -2034,   408, 38464, -2034, -2034, -2034, -2034, -2034, -2034, -2034,
     418,   489, 39660, 41733, 39951, -2034, -2034, -2034, -2034, -2034,
     902,   696,   696, -2034, 29560,   375, -2034, -2034, 29616, 29702,
   29702,   909, 41534, 29560, -2034, -2034,   915,   960, 41534, 29560,
     982,   990,   993,  1002,  1009, 29758, -2034,  1035, -2034, 12448,
   -2034,   396, 25738, -2034, -2034, -2034, -2034,  1046, -2034,   107,
    1095, -2034, -2034,   344, -2034, -2034, 13083, -2034,  2029, 28196,
   -2034,   827,   685,  1198, 29560,   780,  1221,  1106,  1130,  1168,
    1265,    38,  2029,  1228,   599, -2034,  2029, -2034,   922,  1112,
    1250,  1166,  1435,  1258,  1266,  1212,  1349,   136,  2029,   696,
   -2034, -2034, -2034, -2034,  1297,   186, 41170,  1298,  1304, -2034,
   -2034, 28282, -2034, 28338, -2034,   630,   655,  1319,  1348,  2746,
    2600,  2684,   -12, -2034, -2034,   737, -2034, -2034, -2034, -2034,
   -2034,   915,  1046, -2034, -2034, -2034, -2034,   875,  1337, -2034,
    1198, -2034,  1250, 36116, -2034, 24325, 41079, -2034,   367, 40806,
   40048, -2034, -2034,  1363, -2034,   389, -2034, -2034,   344, 40242,
   39854,  6126, 41443, -2034, -2034,  1307,  1364,  1364,   967, -2034,
    1388, -2034, -2034, -2034,   114,   794,   129, -2034, -2034, 30007,
    1395, -2034,  1225, -2034, -2034,   829, -2034, -2034, -2034,  1400,
   30143, 30271,   267,   198,   599, 37124, 39264, -2034,   518,  1204,
   -2034, -2034, 37018, -2034, -2034,  1416, -2034,   389, -2034, -2034,
   -2034,  1417, 41534, -2034,   367, -2034, 30399, 30527,  1420,  1450,
   -2034,  1460, -2034,  1464, -2034, -2034,  3332,  1476,   886, -2034,
   -2034, -2034, -2034,   899,   594, 36116,   653, -2034, 31295, 31423,
   -2034,   653, -2034, 31551, 31679,   653, -2034, 31807, 31935, -2034,
   -2034,  2912,  2912,  2912,  2912, 22381,   737,  1256,  1423,   737,
   -2034, 28424,  8187, -2034,   833,  8187, -2034,   833, -2034, -2034,
    2912,  2912,   737, -2034, -2034,  1459,   167, -2034, -2034,  1475,
    1478, 40897,  1370,  1488,  1494, -2034, 32063, -2034, 32191,   450,
   -2034, 35765, 28480,  2912, -2034,  1219,   825, -2034, -2034, -2034,
   -2034, -2034,   -12,  1491,   518,   181,   110,   199,  1798,  1499,
   -2034, 40533,  1501, -2034, 40624,  1502, 40715,  1503, 40988, -2034,
   -2034, -2034,  1305, -2034, 29560,   389, -2034, -2034,  1506, -2034,
   -2034,   480,   647,   654, -2034,  1498, -2034, -2034, -2034, -2034,
   -2034,   518,  1263,   668, -2034, -2034,  1510, -2034, 18154, -2034,
     833, -2034,   215, 28566,  1507,  1518,  1519,    80, 18295,  1525,
     344,  1524,  1529, 18436,   915,  2209,  1526,  1528,   344, -2034,
   -2034,  1046,  1530,  1540,  1542,  1324, 16312,  2029, 16603, 25794,
    2029,  2029, -2034, 16744, 38666, -2034, -2034, -2034, -2034, -2034,
   18577, 18718, 18859, 19000, -2034, -2034, -2034,   833, 19141, -2034,
   -2034, -2034, 19282, -2034, -2034,   396,   396,   696,   554,   389,
    1344,  1548, -2034,   -12,   -17, -2034,   518,  2746, 41733, 41733,
    8187, -2034, -2034, 39757, 29560,   158,  1544,   304, -2034, 24449,
   -2034, -2034, 28622, -2034, -2034, -2034, -2034, 41534,  1563, -2034,
   -2034, -2034, -2034, -2034, 36348, 41534, 24589,   344, 36464, 41534,
   29560,   396,   396,   396, 29560, 12448, -2034, -2034, 10719, -2034,
   13246, 13392, 13538, -2034, -2034, -2034, -2034, 36798,  1521,   159,
   22521, -2034, -2034,   134, -2034,   585, -2034, 22661,  1556, -2034,
   22801, -2034, -2034,  1485, -2034, -2034, 25880,  1508, 29560, -2034,
   -2034, -2034, -2034, -2034, -2034, -2034, -2034, -2034, -2034, -2034,
   28196,   165, -2034, -2034, -2034, -2034, 29560, 29560, 29560, 29560,
   29560, 29560, 29560,  1198,  1250, 29560, 29560, -2034, 29560, 28196,
   28196, 28196, 28196, 28196, 29560, 29560, 13684, 28196, -2034,  1515,
   -2034, -2034, 25936,  1522, 29560, 28196, 29560, 29560, 29560, 29560,
   29560, 29560, 29560, 29560, 29560, 29560, 29560, 28196, 28196, 28196,
   28196, 28196, 29560, 29560, 13830, 28196, -2034, -2034,   730,   825,
   41443, -2034, -2034, 38054, 41170, 41170, -2034,  1551,  1553,  1555,
   -2034,  1566,  1567,  1568, -2034, -2034, -2034, -2034,   -12, -2034,
   -2034, -2034, -2034,  1557, -2034, -2034, 24201, 24201, 35884,   518,
     633, -2034,   324,   962,  1341, 36116,   995,  1575,  1586, -2034,
   -2034, -2034,  1417,  8921, 40145, -2034, -2034,   344, -2034, -2034,
   -2034, 37230,  1578,   344, 36232,  1987, 24713,  1826, 40339, -2034,
    1585, -2034,   833, -2034,   833, -2034, -2034, -2034,   833, -2034,
    1588, -2034,   799, -2034, -2034,  5167,  5167,  1364,  1364, -2034,
    1364,   106, -2034,  1364,  1364, -2034, -2034,   811, -2034,  1400,
     811, -2034,  1400,   862, 28708,  2513, 29560,   639, -2034,  1590,
     -12, 39363, -2034,   518,  2746, -2034, -2034,  1042,   683, 36000,
   29871,   237,   164, -2034,   164,  2912, -2034, -2034, -2034, -2034,
     189, -2034,   229, -2034,   267, 37124, 24201, -2034, -2034,  1599,
   -2034, -2034, -2034, 41079, 41079, 29560,   344, -2034, 32319,   149,
   -2034,  1125,  1135, -2034, 41079,   344,   802,   344,  1865, -2034,
   -2034, -2034, -2034, -2034, -2034, -2034,  1364, -2034, -2034, -2034,
   -2034, -2034, 37336,  1404, -2034, 22941, 41837, 23081, -2034, -2034,
   12738, -2034, -2034, 40436, -2034, -2034,   -12,  1256, -2034,  1423,
   -2034,   -12, -2034, 28424, -2034, -2034, -2034, -2034, -2034,   833,
   -2034,   833, -2034, -2034, -2034, -2034, -2034, -2034, -2034, -2034,
   -2034, -2034, -2034,  1464,   183,   216,  1593, -2034, 32447, 32575,
    1596, -2034, 32703, 32831, 32959, -2034,   615,   436,   449,  1523,
    1722,  1603,  1604,  1605, -2034,  1595,  1597,  1600,   518,   737,
    2016,   110, 39462, 28764,   181, -2034, -2034, 41261, -2034, -2034,
     825, -2034, -2034, 41261, -2034, -2034,   825, -2034, -2034, 41261,
   -2034, -2034,   825, -2034, -2034, 41261, -2034,   825, -2034, -2034,
   -2034, -2034, -2034, -2034, -2034,  1607,  1611, -2034,  1137,  1613,
    1614,   223, -2034, 23221, -2034, -2034, 19423,  1608,  1609, 19564,
   29560, 29560, -2034, 28850, 28906,  1610,  1616,  1621, 24802,  1622,
     344, 26022,  2212,  1408, 26078, -2034,  1691, -2034, -2034, 26164,
    1630, -2034, -2034, -2034,  1633,  1634, 26220, 16885,   396,  1642,
   29560, 29560,   344, -2034, -2034, -2034, -2034, 22101,   305, 28196,
   -2034,  1220, -2034, 29560, 13976, 14122, 28196, -2034, 29560, 14268,
    1510, 19705, 19846, 19987, 20128, -2034, -2034, -2034, 20269, -2034,
   -2034, -2034, 20410, -2034, -2034,   696,   696,  1648,  1649, 35519,
   35646,   737, -2034,   737,  8187, -2034,  8187, -2034, -2034,  1637,
   28196, -2034, 28196,   736, -2034,   267, -2034, -2034, -2034, -2034,
   36798,  1647,  1650, 41625, 24201, 38967, 29560,  1652, -2034, -2034,
   -2034, -2034, -2034,   518,  1654,  1655,  1645,  1659, -2034, -2034,
   -2034, -2034, -2034, 36580, 26306,  1658,  1661,  1662, 29560,  1665,
   36696,  1660,   382,   355,   366,  1664,  1669,  1675, -2034,   344,
   -2034, -2034, -2034, -2034, -2034, 29560,   396,   234, 37439, 23361,
    1676, -2034, 28196, -2034,   242, 37542, 23501, -2034,   265, 37645,
   23641, -2034, -2034, -2034, -2034,  1213,  1685, -2034, -2034, -2034,
   26392,  4399, -2034, -2034,  1676, -2034, -2034, -2034, -2034, -2034,
   -2034,   827,   922,   827,   922,   685,  1112,   685,  1112,  1198,
    1250,  1198,  1250,  1198,  1250, -2034, -2034,   780,  1166, -2034,
   -2034,   780,  1166, -2034, -2034,  1221,  1435, -2034, -2034,  1106,
    1258, -2034, -2034,  1130,  1266,  1168,  1212,  1265,  1349, -2034,
      94, -2034, 26451,  1651,  5970,  1681, -2034, -2034, -2034, -2034,
   -2034,  1237, -2034, -2034, -2034, 26537,  6518, -2034, -2034, -2034,
   -2034, -2034, -2034, -2034, -2034,   827,   922,   827,   922,   685,
    1112,   685,  1112,  1198,  1250,  1198,  1250,  1198,  1250,  1198,
    1250, -2034, -2034,   780,  1166, -2034, -2034,   780,  1166, -2034,
   -2034,  1221,  1435, -2034, -2034,  1106,  1258, -2034, -2034,  1130,
    1266,  1168,  1212,  1265,  1349, -2034, 26596,  1682,  6876,  1684,
   -2034, -2034,   344,   344, -2034, -2034,   567,  1099, -2034, -2034,
   -2034, 38157, 38260, -2034, -2034, -2034, -2034, -2034, -2034, -2034,
   -2034, -2034, -2034,  1576,  2265,   633, -2034, 24201,   344, -2034,
   -2034, 24201, -2034,   880, -2034, -2034, -2034,   458,   518,  2746,
   -2034, -2034,   258,  1590,  1557,   518,  2746, -2034,  1695, -2034,
     905,   464,  1493,  2912,  1697, -2034, -2034, -2034, -2034, -2034,
   -2034, -2034, -2034, -2034, -2034, -2034, -2034,  2707, -2034, -2034,
   -2034, -2034, -2034, 23781,  1867,   683, 36000, 21961,   562,   737,
     -12, -2034,   737, 29560, -2034,   910, -2034, -2034, -2034,  1699,
    1588,  1556,  1590,  1021, 24201,  1033,  1041, -2034, -2034, -2034,
   33087, 33215,  1698, -2034,  4169, 41443, 41443, 41443, 41443, -2034,
   -2034, -2034, 29560,  1700, 28992, -2034,   833, -2034, -2034, 29048,
   -2034, 29134, -2034, -2034, -2034,  1429,  1404, -2034, -2034,  1364,
   -2034, -2034, -2034, -2034, -2034,  1429,  1404, -2034, 29190,  9625,
   -2034, -2034, -2034, -2034, -2034, 20551, -2034, -2034,   102, -2034,
   -2034,   120,  1701, -2034, 33343, 33471,   518,  1722,  1705, -2034,
   -2034, -2034, -2034, -2034, -2034,   737,   181, -2034,  1707,  1711,
   -2034,  1702,  1703,  1704, -2034, -2034, 36000, -2034, -2034, -2034,
   -2034, -2034, 29560,  1712,  1302, -2034, -2034, -2034, -2034,   276,
   37748, 23921, -2034, -2034, -2034, 20692, 22101, 22101, -2034, -2034,
   -2034, 20833, 26682, 17026, 26768, 26854, 24942, 26940, 17167, 22241,
    1715,  1716, 22241, 29560, 29276,  1793, 27026,  1634,  7280,   396,
   22241,  1729, 12885, 24802, -2034,  1431, 27082,  9917, 27168, -2034,
   -2034, -2034, -2034, -2034,   143,   396,  1730,  1257, -2034, -2034,
   -2034, -2034, 20974, -2034, -2034, -2034,  1734,  1735,   344, -2034,
   -2034, -2034, -2034, -2034, -2034, 41079, -2034, -2034, -2034, -2034,
   27224,  1728, 25222,  1731, 27310,  1732, 25308,  1733,  1738,  1742,
   -2034, -2034, -2034, -2034, -2034, -2034, 14414, -2034, -2034,  1744,
    1057, -2034,  2008,  1750,  1751,  1754,  1745,  1746, 24201,  1655,
   39561,  1654, 29560, 24201, 29560,  1762, -2034, -2034, -2034, -2034,
   -2034,  1752, -2034, 29332, -2034, -2034,  1753,  1755, 29560, 29560,
    1759, 10719, -2034,   344,   344, 29560, 14560,   344, -2034, -2034,
     696, -2034, -2034, -2034, -2034, -2034, -2034, -2034, 14706, -2034,
   -2034, -2034, -2034, 28196, 14852, 14998, 28196, 15144, 15290, -2034,
   -2034, -2034, 15436, 15582, 15728, 15874, -2034, -2034, -2034,   730,
    1761,   463, -2034, -2034,   518,   633,  1888,  1115, 24201, -2034,
   -2034,  1774,   737,   737,  1364,   737,  1557,  1780, -2034, -2034,
    1784, -2034,   285, 37851, 24061, -2034,   518,   954, -2034,   -12,
   -2034, -2034,  1778,  1783, -2034, -2034, -2034,  1147, -2034, -2034,
   33599,  1790, 33727, -2034,  1802, 36116, -2034,  1803, -2034, 29560,
   28424,  2262, -2034, -2034,  2262, -2034, -2034, -2034,  2262, -2034,
   -2034, 21115, 21256, -2034, -2034, -2034, 33855, -2034, 33983,   110,
     181, -2034, -2034, -2034, -2034, -2034, -2034, -2034,  2016, 27396,
   -2034, -2034, -2034, -2034, -2034, -2034, 21397, -2034, -2034, -2034,
   21538, 24802,  7016, 24802,  7016, 16457, -2034, 25082, 17308, -2034,
   -2034, 22241, 22241, 27482, 24802, 27568, 11097,  1794, 12215, 27654,
     174, 21679, -2034, 29560, -2034, 16457, -2034, 12885, 24802, 25394,
   29418,    68,  1799,    68,   192,  1801, -2034,   344, 29560, 29560,
     344, 28196, 28196, 28196, 28196, 28196, 28196, 28196, 28196, 16020,
   16166, -2034, -2034, -2034,   518,  1655,  1796, -2034, -2034, -2034,
   -2034, -2034,  1177,  1654, -2034,  1808,  1809,  1800,  1810,  1178,
    1814,  1815, 24201, 29560, 12448, -2034, -2034, -2034,  1817,  1823,
    1824,  1825, 29560,  1819,  1837,  1838,  1839, -2034,  1841, -2034,
   -2034, -2034, -2034, -2034, -2034, -2034,   304, -2034, -2034, -2034,
     304, -2034, -2034, -2034, -2034, -2034,   304, -2034, -2034, -2034,
     304, -2034, -2034, -2034,   304, -2034, -2034, -2034,   304, -2034,
   -2034, -2034,   304, -2034, -2034, -2034,   304, -2034, -2034, -2034,
   -2034,  1190, -2034, -2034,  1557, 28196, -2034, -2034, -2034, 29560,
   29560, -2034, 34111, 34239, 34367, 34495, 34623, 41443, -2034, 41443,
   -2034, 25480, 21820, -2034, -2034, -2034, 34751, 34879, 35007, 35135,
   -2034,  1874,  1905, -2034, -2034, -2034, -2034, 24802, 29560, 29474,
    1799, 17449, 17590, 25566, -2034, 16457, 25082, 27710, 17731,   344,
   -2034,   937,   606, -2034,   206,    68,  1844,    68,   299,   581,
    1849,  1264, -2034, -2034,  1654, -2034, -2034, -2034, -2034, -2034,
   -2034, -2034, -2034, -2034,  1222,  1845,  1858,  1850, -2034, -2034,
   -2034, -2034,  1866,  1868, -2034, -2034, -2034, -2034, -2034, -2034,
    1853, -2034, -2034, -2034, -2034, 35263, 35391, -2034, -2034, 27796,
   -2034, -2034, 24802, 24802, 27882, 25652, 24802, 27968, 11097,  1876,
   -2034, 24802, 29560, -2034, -2034, 25082, -2034, -2034,  1875,  1883,
      68,    68, 29560,    68,  1885,    68,   976, -2034,   211,  1364,
     561, -2034,   277, -2034,  1884, -2034,   344, -2034, -2034, -2034,
   28992, -2034, -2034, -2034, -2034, -2034, -2034,  1876, 24802, -2034,
   -2034, 28054, -2034, -2034,   396, -2034, -2034,  1276,  1889,  1279,
   -2034,  1063,  1898,    68,    68,  1899,    68, -2034, -2034, -2034,
   -2034,   299,   607, -2034, -2034, -2034, 24802,   648,  1900, -2034,
    1903,  1907,    68, -2034,  1285,  1296, -2034,  1073,   429, -2034,
   -2034, 29560, -2034, -2034, -2034,  1318,  1908,  1909,  1912,    68,
   -2034,  1913,  1914, -2034, -2034, -2034,  1342, -2034, -2034,  1930,
   -2034
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2034,  2396,    64,  9927, -2034,  2037, -2034, -2034, -2034, -2034,
   -2034, -2034,  1558,  1579,  -998, -2034,  -970,  -749,    62,    65,
    -925,  -901,  -797, -2034,  -731,  -694, -2034, -2034,  1582,  1587,
   -2034,  1401,  3070, -2034,  -222,   500,   575, -2034, -2034, -2034,
   -2034,  1589, -2034, -2034, -2034,  -645, -2033,   -83, -2034, -2034,
   -2034, -2034,  1820,  2003,  -122,    11,   552,  -826, -2034,  -845,
   -2034,  -860, -2034,  1091,  -143,  1211,  -877,    -8,  1788,    15,
    1795,   -40,     0, -2034,  1149, -2034, -2034,  4986,  4663, -2034,
    5940,  -640,  1270, -2034,  3960, -2034,  -328,   452,   692,   574,
   -2034,   -13,  -710,  -453,  -450,  -120,   -85,   477,  8670,  5187,
    -174,  8829,  -766,   759, -2034,  4795,  -275,   747,   753,  1380,
     193,   -47,    32,    34,   -15,    43,   918,  3107,   -56,  7473,
    -755,  1911,   264, 10823,   -71,  1117,  -129,  2980, 11098,  8509,
   -2034, -2034, -2034,   -74,   -20,    -9, -2034,  7152, -2034,   320,
    -125,   631,  -258,  3671,  9117, -2034, 11465, -2034, -2034, -2034,
     -53,  3758, -2034, -2034,  1143,  7030,    -1, -2034, -2034,  1277,
    1667,  1382,  1804,   -86,   -82,  5745, 10386,  3393,  4790,  -407,
    -124,  -464,   942,  -856,  -109,  3181, -2034, -2034, -1059, -2034,
    3340,  -406, -1215,  7619,  -201,  -711,   714,   200,  1082,  1683,
    -247,  -597,  -460,  -990,  -537,  -918,  -914,   316,  1150,  1027,
     -14,  1848,  -720,  -335,   538,  -400,  -448, -2034,   -90,   -77,
    7278,  -294,    33,  -773, -2034, -2034, -2034,  2033, -2034,  2028,
    2042,   -48,  2627,  -111,  1863,   919,   921, -2034, -2034, -2034,
     -91,   849, -1558,  -262, -2034, -2034, -2034,   -26, -2034,  2046,
     -43,    19,  2045,  1500, -2034, -2034, -2034,  2050,  -784,   407,
   -2034,  -753,   773, -2034, -2034, -2034, -2034
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1293
static const yytype_int16 yytable[] =
{
      65,   225,   275,  1152,  1027,   226,  1235,  1422,  1529,   403,
    1691,   941,   678,   177,   513,   947,  1468,  1239,   489,  1258,
    1469,   784,  1421,   496,   404,   506,  1265,   290,   951,  1269,
     489,   109,   111,  1543,   489,  1523,   518,  1533,   523,   397,
     527,  1420,   116,   395,   175,   699,   284,   396,   291,  1585,
     110,   286,   398,   124,   281,   805,  1259,   149,  1859,  1409,
     141,   403,   117,  1266,   178,   150,  1270,   153,  1397,  2140,
    1870,   199,   953,   107,   785,   179,   404,   542,   545,  1399,
    1525,  1122,  1535,   164,   176,   124,   606,   213,  1481,  1493,
    1410,  1315,   124,   282,    65,  1732,   608,   543,   546,   174,
     292,    65,    65,  1815,  1526,   300,  1536,   200,   758,   280,
     753,   107,   392,     1,   385,   910,   289,   388,   201,  1381,
     142,  1817,   143,   393,   139,  2140,  1275,   301,   302,   213,
     912,   305,   124,   124,   504,  1260,     1,   418,     2,   137,
    1510,   150,   472,   485,   619,   472,  1871,   122,   303,   499,
    1502,   501,     1,   833,   501,   485,   497,   514,   472,   485,
     472,  1041,   472,   670,   303,   530,  1284,     1,   149,   519,
       1,   524,  1341,   528,   780,   805,   150,  1871,   384,   303,
    1074,   629,   700,   806,  1546,   124,     1,   722,   807,     1,
    1490,  1082,   815,   722,  1088,  2025,  1094,   303,  1099,   933,
    1075,   556,   112,  2019,  1123,   763,   764,   765,  1527,  2093,
    1537,   177,   607,   150,  2134,   564,   624,  1549,   290,     1,
     290,   177,   871,   164,   576,   609,     1,  -454,   945,  1816,
    1491,   976,  -618,   124,   571,  -109,   124,   759,   595,   291,
     331,   291,  1442,  -100,   911,   572,   284,  1818,   682,   976,
    -613,   286,   692,   135,   281,   622,  1524,  1530,  1534,   759,
    1529,     1,   178,   505,  1261,   555,  -104,  1529,  1872,   615,
       1,  1529,   178,   179,   655,   859,  1873,   -82,   686,  1503,
       1,   834,   688,   876,   689,     1,   -89,  1441,    53,  1533,
     860,  1256,    65,   703,    65,  1261,  1533,   687,   760,  2010,
    1533,  2009,     1,  1200,   881,  1072,  1278,  1873,     1,   702,
       2,   837,   718,  1547,   987,   881,  1073,  2026,   718,   911,
      76,   833,   766, -1040, -1040,  2027,   934,     1, -1040,   556,
     767,  2094,   401,   768,  1535,  2090,  2135,  1680,     1,  2095,
    2090,  1535,   625,   761,  2136,  1535,  1550,     1,  1588,  1319,
     749,  2099,   980,  1323,   901,   903,   905,   907,  1536,   759,
     303,  1486, -1065,     2,  -109,  1536,   596,   972,   113,  1536,
    1061,   303,  -100,  2099,  -458,  -458,  -458,  1385,  1176,  1180,
     303,  1389,  1590,  1764,   114,   150,   839,   303,   147,   148,
     950,   556,     1,   556,   226,  -104,  1643,   105,   760,   124,
    1246,   107,   589,  1247,   181,   124,   -82,  2139,   678,   678,
     678,   678,  1018,   151,    76,   -89,  1541,     2,   150,  1591,
     941,    76,    76,   839,   588,   874,   514,  1020,  1018,   878,
     576,   947,     1,  1043,  1661,   889,  1665,   589,   890,   839,
     878,   897,   839,  1020,  1048,  1663,  1052,  1667,   717,  1202,
     592,  1028,   106,     1,  1030,   847,   699,   851,  1285,  1287,
    1289,     1,  1537,   154,  1074,   155,   562,     1,   303,  1537,
     472,   472,   150,  1537,  1903,   937,   213,   404,     2,   124,
     941,  1062,   964,  1159,  1713,  1025,  1166,   968,  1349,  1351,
    1353,   164,   969,  1478,  1063,  1714,   472,   472,   138,  -458,
     708,   941,  -458,  2099,  1683,   947,   592,  1712,   982,  1530,
    1534,  1286,  1288,  1290,   150,   986,  1530,  1534,   472,   472,
    1530,  1534,  1701,   472,   472,  1831,   590,   472,   472,  1710,
     591,   124,   124,   124,   124,     1,   124,   303,   146,   124,
     595,  1350,  1352,  1354,   580,  1487,  1254,  1488,   156,   941,
     124,   124,   124,  1542,  1757,  1813,   150,     1,   753,  2170,
       2,   839,   501,   595,     1,   591,   472,  1422,   472,   530,
       1,  1056,   556,   124,   548,   160,   150,  1049,   594,  1053,
       1,  1054,  1756,  1481,     1,   753,   124,  1194,  1196,  1760,
    1969,  1080,  1529,   753,  1086,  1769,  1092,     1,  1097,  1221,
    1231,  1420,   181,  1221,  1231,  1111,   809,   810,   811,   531,
       1,   303,   181,   753,    76,  -873,  -866,  1787,     1,   161,
    1809,  1533,     1,  1780,  1810,   597,  1781,  1409,  1409,   290,
     593,   589,   177,  1443,   594,  1236,  1065,  1440,  1133,    52,
    1140,   135,     1,    27,   682,   682,   682,   682,  1153,   745,
     291,   234,  1798,   303,  1074,   849,   592,   853,  1410,  1410,
    -458,  -458,  -458,   386, -1065,  1566,  1535,  1061,   596,  1110,
     655,   655,   655,   655,  1428,   147,   148,  1575,   299,  1793,
    2034,  1796,  1437,   178,  1325,   535,  1778, -1065,   150,  1188,
    1536,   596,   258,  1451,  1748,  1580,  1749,   124,   147,   148,
   -1024,   303, -1024,   576,  1185,  1186,  2103,  1492,   535,  1205,
    1277,   420,  1391,  1915,  1262,   147,   148,  1212,   945,   304,
    1327,  1263,   985,   812,  1217,  1227,   556,  1237,  1217,  1227,
    2092,   813,  2159,     1,   814,  1205,   147,   148,   839,     1,
       1,   426,  1773,   580,  -866,   391,   427,  1249,  1393, -1071,
    1242,  1243,  1244,   598,  1316,   854,  1277,   868,  1436,   591,
     147,   148,   424,  1272,     2,     2,  1540,  1279,   572,  1436,
    1473,   135,  2161,  1070,   122,  1529,   532,  -458,  1062,  1774,
     855,   705,  1382,   533,   594,  -458,  1307,  1311,  -458,  1326,
     705,  1063,   795,   796,  1537,   580,   705,   551,   186,   186,
     531,  -265,  -265,  -265,  1533,     1,  -460,  -460,  -460,  1339,
    1543,  1902,   561,  1344,  1373,  1377,  1909,  1392,  -458,  -458,
    -458,  1993,  1593,   789,   790,  1599,  1461,  1462,     1,  1463,
    1495,  1496,  1465,  1466,  1320,   580,  1067,  1324,  1404,   150,
    1407,  1530,  1534,   839,   839,   839,   400,   565,  1328,  1535,
    1504,   397,  1402,  1403,   678,  1477,  1500,   678,  1558,   396,
     717,    53,  1386,  1640,   398,  1390,   418,  1423,   213,  -459,
    -459,  -459,   982,  1536,   150,   986,  1394,  1176,  1180,  1176,
    1180,  1971,   164,  1433,   576,   566,   864,  1153,   619,     1,
       1,   576,   107,  1448,  1450,   678,  1452,  1118,   839,   923,
     924,   474,   797,   798,   474,  1515,  1780,  1781,   567,   678,
     678,   678,   678,     1,   980,  1548,  1551,   474,   108,   474,
     425,   474,  -265,   147,   148,    -8,  -265,  1718,   793,  1267,
    1512,  -460,  1554,     1,   200,   124,   403,   150,  -902,  1990,
     599,   213,   276,  -458,   124,   201,   147,   148,   786,  1485,
     534,   404,   124,   600,   124,  1489,   391,     1,     2,   925,
     404,   157,  1020,   684,   150,   937,   418,  1025,   787,   788,
    -742,  1896,  -742,   514,   514,   941,   501,  1537,   472,   501,
    1719,   602,  1568,   186,   514,  1511,   150,  1513,     1,  1501,
     107,  1923,  1308,  1312,  -459,  1569,   186,   604,   865,   420,
     605,  1813,  1758,  1880,   866,    29,    30,   105,  1814,  1675,
      33,  1759,  1679,   124,   947,   941,   685,    39,   941,  1566,
    1374,  1378,   983,   181,  1530,  1534,   183,  1758,   984,  1208,
     704,   147,   148,   717,  1784,  2044,  1768,   544,   547,   726,
     753,    44,    45,   816,   501,   501,   745,   144,   472,   472,
       1,   145,   472,   472,   472,  1208,   150,  2060,  1208,   124,
     124,   162,  2089,   817,   818,  1555,  2090,  1252,   496,   124,
    2091,   124,   213,   556,   137,   147,   148,   839,  1978,  1993,
     150,   534,    93,   839,   727,  1426,   150,   391,   619,   839,
     682,   984,   150,   682,   906,   839,   135,   150,   258,  1040,
    2024,  2132,     1,  1645,   107,  2090,   730,  1650,  1699,  2133,
    1652,   150,  1654,    27,   731,  1699,   655,   732,  1429,   655,
    2145,   630,    33,   677,   984,  1684,   733,   538,  1133,  1081,
    1140,   682,  1087,   734,  1093,   135,  1098,  1571,  1685,  1625,
    1100,   158,   701,   159,  1786,   682,   682,   682,   682,   588,
     866,  1820,  1638,    44,    45,   135,  1788,   655,  1279,   738,
     580,  2067,   984,  2068,  1789,  1101,   188,  1634,   147,   148,
     984,   655,   655,   655,   655,  1483,    93,   757,   823,   824,
    1893,   705,  1102,   293,    93,   500,   866,     1,  2151,   472,
     472,   124,  2090,   124,  2047,   580,  2152,  -626,  2168,  -626,
    1472,   497,  2090,   839,   580,   150,  2169,     1,   791,   792,
     839,   580,  1103,  1104,   418,   213,   745,  -625,   580,  -625,
     147,   148,   707,  1558,   183,  -872,   760,  -872,  -872,   474,
     474,   707,  2029,  1695,   695,   799,   800,   707,  1970,  1498,
    1695,  1291,  1293,   801,   866,   988,   988,   988,   988,   150,
     819,   820,  2096,  1505,  2098,   474,   474,  -901,  1506,   401,
     821,   822,  1583,  1507,   186,   186,  1584,  1669,  1508,   580,
    1981,  1355,  1357,   802,  1994,  1720,   866,   474,   474,    29,
      30,   804,   474,   474,    33,   580,   474,   474,   825,   826,
     549,    39,   550,  -872,   902,   917,   918,   908,   941,   941,
    2036,  2041,  1834,  1838,  -872,  1100,   866,   866,  1100,  1646,
    1647,  1648,   803,  2059,  1850,    44,    45,   919,  2127,   866,
    2129,   920,  2131,   921,   553,   474,   550,   474,    53,  -872,
    1101,  -901,  -901,  1101,   678,   678,  -901,  1573,  1727,  -872,
       1,   137,  1728,  -901,     1,  2107,   678,  1102,  -216,  1820,
    1102,   866,  -216,   808,   391,   922,   831,  -872,  -872,  -872,
    2154,  2155,  1739,  2157,   188,   832,  1728,  -901,  -901,  1299,
    1301,  1042,  1303,     1,   698,  1827,   293,  1103,  1104,  2165,
    1103,  1104,  1876,  -901,  -901,  -901,  1877,    33,  1611,  2105,
    1114,  1029,   550,  2106,  1031,   829,  2176,  1363,  1365,  1367,
    1369,  2148,  1746,  1747,  2150,  2090,  1750,   150,  2090,   830,
    2166,   839,   839,  1566,  2090,  1457,  1459,   695,    44,    45,
       1,  2167,   836,   150,  -913,  2090,  1751,  1423,  1513,   844,
    1105,   418,   507,   859,   899,   845,   520,  1761,   258,   124,
     420,   420,  1638,  2172,   856,     2,   124,  2090,   860,   827,
     828,  1770,   150,   124,  1814,   760,  1020,  1157,   147,   148,
    -216,  2142,   147,   148,  -216,   867,  -216,  2179,   760,  1427,
    -216,  2090,   760,   857,   124,  1189,  1777,   143,  1019,   124,
    1687,  1022,   124,  1295,  1297,   150,  1271,   887,     1,  1025,
    1458,  1460,    29,    30,   418,   258,     1,    33,  -913,  -913,
     472,   472,  1707,  -913,    39,   839,   839,   839,   839,  1278,
    -913,     1,   885,  1359,  1361,   909,  1338,   422,     1,   677,
     677,   677,   677,  1343,   916,     1,     1,   926,    44,    45,
    1673,  1520,  1994,  1521,  -913,  -913,  1292,  1294,   966,   760,
     420,  1620,   973,   455,  1296,  1298,   455,  1195,  1197,  1198,
    -913,     2,  -913,  2006,   472,   472,  1518,   124,  1519,   455,
     122,   455,   760,   455,  1863,   124,  1356,  1358,  -882,  -882,
     682,   682,   974,  -882,  1360,  1362,   576,  1033,  1035,     1,
    -882,  1802,   682,  1805,  1803,   678,  1806,  -216,   975,  1171,
    1173,  1172,  1174,   976,  1988,  1036,   655,   655,    29,    30,
    1905,   295,   298,    33,  -882,  -882,  1133,   979,   655,  1133,
      39,  1037,  1133,  1906,  1038,  1574,  1625,  1411,  1412,  1044,
    1133,  1577,   707,  1133,   760,  1045,   201,  1578,  1077,  1113,
    1083,  1089,  1095,  1579,    44,    45,  1112,  1115,  1860,  1192,
    1119,   540,  1120,  1121,    52,   695,  1255,   571,  1153,  1139,
    1150,  1141,  1151,   401,  1874,   514,  1142,  1154,   572,   753,
     753,   753,   753,   753,   753,   753,   753,  1155,  1982,  1156,
    1985,  1201,  1930,  1973,   474,   474,   588,  1650,  1013,  1190,
    1654,   989,   990,   991,   992,  1214,  1267,  1413,   418,  1414,
     213,  1415,   393,   418,  1996,  1018,  1998,   147,   148,  -216,
    1032,  1034,  1416,  1417,  1418,  -216,  1430,   760,  1431,  1447,
    1020,  1249,  1455,  1924,  1925,    29,    30,  1928,  1456,  1474,
      33,  1494,  2084,  -734,  2087,     1,  -737,    39,  1559,  1560,
    1561,  1562,  1581,  1563,   794,  1582,  1564,   474,  1586,  1587,
    1613,  1596,  1597,  1612,  1025,  1614,  1616,  1783,  1621,  1404,
       2,    44,    45,   753,   678,  1025,   678,  1629,   418,   122,
    1630,  1631,   124,   124,  1659,   124,  1635, -1019,   541, -1019,
    1655,   426,  1676,   400,  1688,  1677,  1828,   150,  1690,  1215,
    1692,  1693,  2143,  1703,  1735,   698,  1704,  1705,   420,  1711,
     472,  2123,   472,  1715,  1716,   839,   580,    29,    30,  1076,
    1708,  1983,    33,  1986,  1717,   422,  1722,   474,   474,    39,
    1729,   474,   474,   474,  1738,  1743,   472,  1745,   472,   124,
    1767,   682,  1771,   678,  1785,  1790,   695,  1997,  1799,  1999,
    1821,  -740,  1822,    44,    45,  2144,  1823,  1830,  1824,  1825,
    1826,  1133,  1133,  1133,  1133,  1516,   571,   655,  1851,  1852,
    1857,  1133,  1133,  1861,  1133,  1875,  1133,   572,  1878,  1879,
    1213,  1882,  2065,  1889,  1884,  1886,  1888,  1890,  1133,  1892,
       1,   455,   455,    29,    30,  1897,  1898,  1153,    33,  1899,
    1638,  1900,  1901,   961,  1912,    39,  1192,  1913,  1968,  1916,
    2022,  1917,  2022,  1013,  1922,     2,   580,   455,   455,  -231,
    1013,  -882,  -882,  1013,   122,  1972,  -882,   695,  1975,    44,
      45,  1979,   418,  -882,   556,  1976,  1980,  1984,  2008,   455,
     455,  2035, -1039, -1039,   455,   455,  2023, -1039,   455,   455,
    1987,  1989,  2028,  2037,  2038,  1025,  2039,  -882,  -882,  2072,
      29,    30,    29,    30,  2054,    33,  2040,    33,   474,   474,
    2042,  2043,    39,  2048,    39,   695,  1908,   760,  1911,  2049,
    2050,  2051,  2055,  2056,  2057,   677,  2058,   455,   677,   455,
    2073,  2097,  1919,  1921,  2104,  2110,    44,    45,    44,    45,
    2113,  2108,   472,   472,   472,   472,   472,   839,    52,   839,
     682,    53,   682,  1514,  2109,  2066,   472,   472,   472,   472,
     936,   420,  2111,  2119,  2112,   420,   677,  1133,  2137,  2138,
    2125,  2124,  2130,  1025,  2149,  2141,   655,     1,   655,  2088,
     677,   677,   677,   677,  -958,  2153,  2156,  2162,  1153,  1638,
    2163,   745,    19,    20,  2164,  2173,  2174,    58,  2177,  2175,
     957,  2178,     2,  1657,  2022,  1658,  2022,   769,   770,   771,
     772,   773,   774,   775,   776,   777,   778,  2180,  2158,   682,
    1797,   958,    29,    30,   959,   472,   472,    33,   420,   960,
    1464,   963,  1133,  1133,    39,  1509,  1133,  1419,  1133,   115,
     690,  1133,  1342,    29,    30,   655,   420,   691,    33,    29,
      30,    29,    30,  1499,    33,    39,    33,    58,    44,    45,
    1638,    39,  1153,    39,   152,  1775,  1153,   894,    52,  2022,
    2022,  1240,  2022,   886,  2022,   580,  1991,   623,  1133,    44,
      45,    58,   728,  2126,    58,    44,    45,    44,    45,    52,
     259,    58,  1215,  1656,   294,  1022,   283,   671,    58,    58,
     285,  1153,  1638,  2147,   287,   568,  1133,   297,  1013,  1013,
    1013,    58,  2022,  2022,   387,  2022,  1967,   779,  1153,     0,
       0,     0,     0,     0,     0,     0,    58,   400,     0,     0,
       0,  2022,     0,     0,   412,  1300,  1302,  2046,  1304,   412,
     259,     0,   412,     0,     0,     0,  2053,     0,  2022,     0,
       0,     0,   259,     0,    58,   412,   259,   412,     0,   412,
       0,     0,     0,  1364,  1366,  1368,  1370,     0,     0,     0,
       0,   705,   705,     0,   705,   705,     0,     0,     0,   705,
     705,   705,   705,     0,   725,   259,   259,     0,     0,     0,
     729,     0,     0,     0,   745,     0,     0,     0,   412,     0,
       0,     0,     0,  2062,  2064,     0,   422,   422,     0,     0,
       0,     0,   563,     0,    19,    20,  1013,    19,    20,   474,
     474,    58,   420,     0,     0,     0,     0,   420,     0,  -458,
       0,     0,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
       0,     0,     0,     0,    29,    30,     0,    29,    30,    33,
     928,   931,    33,     0,     0,     0,    39,     0,     0,    39,
     627,   631,   848,     0,   852,     0,   259,     0,     0,   259,
     259,   651,     0,   474,   474,     0,   928,   931,     0,    58,
      44,    45,     0,    44,    45,     0,     0,     0,     0,    58,
     259,    58,   420,  1148,     0,     0,  1619,     0,   928,   931,
      29,    30,     0,   928,   931,    33,   422,   928,   931,   259,
       0,     0,    39,     0,     0,   259,     0,     0,   705,   705,
     705,   705,   705,   705,   705,   705,   412,     0,     0,     0,
       0,     0,     0,   420,     0,     0,    44,    45,  1807,   455,
       0,  1192,     0,     0,  -458,  -458,    52,     0,     0,   868,
       0,     0,     0,     0,  -458,     0,    55,     0,     0,     0,
     572,  1013,  1013,  -458,  -458,  -458,  -458,  -458,  1013,  1013,
       0,     0,  1013,  1013,     0,     0,     0,     0,     0,     0,
       0,  1656,     0,    58,  1022,     0,     0,     0,   412,     0,
     412,     0,    29,    30,     0,     0,     0,    33,     0,     0,
       0,     0,     0,     0,    39,   677,   677,     0,     0,   455,
     455,     0,   705,   455,   455,   455,     0,   677,     0,     0,
      58,     0,   412,    58,     0,     0,   259,    58,    44,    45,
       0,     0,   888,   929,   932,     0,    58,   259,     0,    58,
     172,     0,   406,  1066,     0,     0,   420,     0,     0,     0,
      55,     0,     0,     0,     0,     0,     0,    55,    55,   929,
     932,     0,     0,     0,     0,     0,     0,   412,   412,     0,
       0,     0,    58,    58,     0,     0,     1,     0,     0,   412,
       0,   929,   932,     0,   967,     0,   929,   932,     0,   259,
     929,   932,     0,   412,   412,     0,     0,     0,     0,     0,
       0,     2,     0,     0,  1117,     0,     0,     0,     0,   474,
     122,   474,    58,     0,     0,   412,   412,     0,     0,     0,
     412,   412,     0,     0,   412,   412,     0,     0,     0,     0,
     627,     0,   651,   627,     0,   474,     0,   474,     0,   259,
       0,     0,   259,     0,     0,     0,     0,     0,    29,    30,
     455,   455,     0,    33,   422,     0,     0,     0,    58,     0,
      39,     0,     0,   412,     0,   412,     0,     0,    58,   412,
       0,     0,     0,     0,    29,    30,  1013,     0,     0,    33,
     574,     0,     0,     0,    44,    45,    39,     0,    58,     0,
       0,    58,     0,    58,    52,    58,     0,    53,  1470,     0,
       0,     0,    58,     0,     0,     0,     0,     0,     0,     0,
      44,    45,  1936,  1940,     0,  1946,  1950,     0,     0,     0,
    1954,  1958,  1962,  1966,   408,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    29,    30,     0,   172,     0,
      33,     0,     0,     0,     0,     0,     0,    39,   172,     0,
      55,     0,     0,     0,     0,     0,   677,     0,   627,   631,
    1177,  1181,     0,     0,  1656,  1022,     0,   651,   651,   651,
     651,    44,    45,     0,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,   861,     0,     0,   627,     0,
       0,     0,     0,  1013,  1013,   259,   259,   259,     0,     0,
      58,   474,   474,   474,   474,   474,   412,    19,    20,     1,
       0,     0,     0,     0,   259,   474,   474,   474,   474,    29,
      30,   259,   259,   412,    33,   259,   259,     0,     0,     0,
       0,    39,   412,     0,     2,    58,     0,    29,    30,     0,
       0,     0,    33,   122,    58,     0,     0,   651,     0,    39,
       0,     0,     0,     0,   651,    44,    45,   651,     0,   707,
     707,   707,   707,   707,   707,   707,   707,   422,     0,   862,
       0,   422,     0,    44,    45,     0,     0,     0,     0,   574,
       0,    29,    30,    52,   474,   474,    33,     0,     0,  -458,
    -458,     0,     0,    39,     0,     0,     0,     0,     0,  -458,
       0,     0,     0,     0,  -458,  -458,  -458,  1471,  -458,  -458,
    -458,  -458,  -458,     1,     0,     0,     0,    44,    45,     0,
       0,     0,     0,     0,     0,   677,     0,   677,   928,   931,
      53,   574,   928,   931,   422,     0,     0,    58,     2,     0,
      58,    58,    58,     0,     0,     0,  1497,   194,   195,   196,
       0,     0,   422,   707,     0,     0,     0,     0,     0,   628,
     632,   455,   455,   412,   412,    58,     0,     0,     0,     0,
       0,   574,    58,     0,     0,     1,  1013,  1013,     0,     0,
     259,    58,     0,     0,     0,    29,    30,     0,    58,     0,
      33,   259,     0,   412,   677,    58,     0,    39,     0,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,   122,
       0,     0,     0,     0,     0,   455,   455,     0,     0,     0,
       0,    44,    45,     0,     0,     0,     0,     0,     0,     0,
       0,    52,     0,     0,    53,     0,     0,     0,    58,     0,
      67,     0,     0,     0,  1572,     0,    58,    29,    30,     0,
       0,     0,    33,     0,     0,     0,     0,     0,     0,    39,
       0,     0,    58,   412,     0,     0,     0,     0,     0,     0,
      58,    58,     0,     0,     0,   412,     0,     0,     0,     0,
       0,    58,     0,    44,    45,     0,     0,     0,     0,     0,
       0,     0,     0,    52,     0,  1610,    53,     0,     0,     0,
       0,     0,   651,   259,   651,     0,     0,     0,     0,     0,
     259,   929,   932,     0,     0,   929,   932,     0,     0,     0,
       0,     0,     0,     0,    67,     0,     0,     0,   422,     0,
       0,     0,     0,   422,    67,     0,     0,     0,     0,     0,
       0,    67,    67,     0,     0,   412,   412,     0,     0,   412,
     412,   412,     0,     0,     0,     0,     0,     0,     0,   172,
       0,     0,     0,     0,     0,  1204,     0,     0,     0,    58,
     412,     0,     0,     0,    58,     0,     0,     0,     0,     0,
      58,     0,     0,   487,     0,     0,    58,  1686,     0,     0,
       0,  1204,    58,     0,  1204,   487,     0,     0,   422,   487,
       0,     0,     0,     0,  1594,     0,     0,  1600,     0,  1706,
     651,     0,     0,   651,     0,     0,   651,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   628,
       0,     0,   628,     0,     0,     0,     0,     0,     0,   422,
       0,    89,     0,     0,     0,  1641,     0,     0,     0,     0,
       0,   455,     0,   455,   651,     0,     0,     0,     0,  1177,
    1181,  1177,  1181,     0,     0,     0,     0,     0,   651,   651,
     651,   651,   456,     0,     0,   456,     0,   455,     0,   455,
     378,     0,   627,     0,   627,     0,   412,   412,   456,     0,
     456,   259,   456,   259,   132,     0,   574,     0,     0,     0,
      58,     0,     0,     0,     0,     0,     0,    58,     0,     0,
     259,   412,    58,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    67,     0,   165,   184,   198,     0,     0,     0,
     259,   574,    67,   236,    67,    89,     0,   259,     0,     0,
     574,     0,    89,    89,     0,     0,     0,   574,     0,     0,
       0,     0,   422,     0,   574,   259,   651,   628,   632,  1178,
    1182,     0,   259,   651,     0,     0,   259,   651,   558,     0,
       0,     0,     0,   198,   405,   407,   409,   410,     0,     0,
     928,   931,     0,   478,     0,     0,   478,   628,     0,     0,
       0,     0,     0,   977,     0,  -641,     0,     0,     0,   478,
       0,   478,     0,   478,     0,   574,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -641,   574,     0,     0,     0,     0,   539,   407,   409,  -641,
    -641,  -641,     0,     0,   928,   931,     0,     0,     0,     0,
       0,     0,     0,   455,   455,   455,   455,   455,     0,     0,
       0,     0,     0,    87,  1782,     0,     0,   455,   455,   455,
     455,     0,     0,     0,   569,   584,     0,  -641,  -641,   487,
       0,     0,  -641,     0,     0,     0,     0,     0,     0,  -641,
     487,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   378,
       0,     0,     0,  -641,  -641,     0,    87,     0,    58,    58,
     621,     0,     0,  -641,     0,     0,  -641,     0,     0,   978,
       0,   976,  -641,   184,   412,     0,   455,   455,   412,     0,
       0,     0,   487,   696,     0,    89,     0,    87,    87,     0,
       0,     0,     0,     0,     0,    87,     0,    87,     0,     0,
       0,     0,     0,     0,    87,    87,     0,     0,   558,     0,
     558,     0,     0,   929,   932,     0,     0,     0,     0,     0,
     651,     0,     0,    58,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    87,    87,     0,     0,     0,
       0,   412,     0,     0,     0,     0,     0,   412,   412,     0,
     456,   456,    58,    58,    58,    58,     0,     0,     0,     0,
       0,     0,   962,     0,     0,     0,     0,   929,   932,     0,
       0,     0,     0,     0,     0,     0,   456,   456,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    87,     0,
     405,   407,   409,     0,     0,     0,     0,     0,   456,   456,
       0,   412,   412,   456,   456,     0,     0,   456,   456,  1668,
       0,     0,     0,  1907,   869,  1910,  1670,     0,     0,     0,
       0,   478,     0,    58,   664,     0,     0,     0,     0,  1918,
    1920,     0,   132,     0,  1835,  1839,    87,   259,   651,    87,
       0,     0,     0,   651,   651,     0,   456,  1594,   456,     0,
    1600,     0,  1012,     0,     0,     0,   651,     0,  1641,   651,
       0,   478,   478,     0,     0,     0,   943,   651,     0,     0,
     954,     0,    87,   478,     0,     0,     0,     0,     0,     0,
       0,    77,   165,     0,     0,    87,     0,   478,   478,   558,
       0,     0,     0,    67,     0,    87,     0,    87,     0,     0,
       0,     0,    58,     0,     0,     0,   869,     0,     0,   478,
     478,     0,     0,     0,   478,   478,     0,     0,   478,   478,
       0,   378,   198,   198,   198,   198,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   412,     0,    58,     0,     0,
     412,   198,   198,     0,     0,     0,     0,     0,     0,     0,
     558,     0,     0,  1595,     0,     0,  1601,   478,    58,   478,
       0,     0,  1059,     0,  1068,    77,     0,     0,    83,     0,
       0,     0,     0,     0,     0,    77,     0,     0,     0,   409,
       0,     0,    77,    77,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1642,   900,     0,     0,     0,     0,
       0,     0,    87,     0,     0,   412,     0,     0,  1178,  1182,
    1178,  1182,   928,   931,     0,   928,   931,     0,     0,     0,
     259,   651,     0,     0,   490,     0,   928,   931,   928,   931,
       0,   628,     0,   628,  2045,     0,   490,   412,     0,   412,
     490,     0,    58,  2052,    87,     0,     0,   378,     0,     0,
       0,   378,    83,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    83,   412,     0,   412,     0,  1012,     0,    83,
      83,     0,     0,   487,  1012,     0,     0,  1012,     0,     0,
       0,     0,   574,     0,   487,     0,     0,     0,  1193,  1835,
    1839,     0,     0,     0,   696,   928,   931,   378,   651,   651,
    2061,  2063,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   491,     0,     0,     0,  1223,     0,     0,     0,  1223,
       0,     0,     0,   491,   378,     0,     0,   491,     0,     0,
       0,     0,   378,     0,    87,    87,    87,    87,   869,    87,
       0,     0,    87,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   378,    87,    87,    87,     0,     0,     0,   412,
       0,   412,     0,    77,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    77,    87,    77,     0,     0,     0,     0,
       0,     0,   574,     0,     0,     0,     0,     0,  1135,     0,
       0,     0,     0,     0,     0,   929,   932,     0,   929,   932,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   929,
     932,   929,   932,     0,     0,     0,     0,     0,     0,     0,
     664,   664,   664,   664,     0,     0,     0,     0,     0,   412,
     412,   412,   412,   412,    58,     0,    58,     0,     0,     0,
       0,     0,     0,   412,   412,   412,   412,     0,     0,     0,
      83,  1012,     0,   558,     0,     0,     0,     0,   456,  1424,
      83,     0,    83,     0,     0,     0,   869,     0,     0,     0,
       0,     0,     0,   165,   869,  1438,     0,     0,   929,   932,
       0,     0,  1445,   348,     0,   869,     0,  1453,     0,     0,
       0,     0,   558,     0,     0,     0,     0,     0,     0,     0,
      87,     0,     0,     0,     0,     0,    87,   419,     0,     0,
     490,     0,   412,   412,     0,     0,     0,     0,     0,     0,
       0,   490,  1012,     0,  1012,     0,   132,     0,   456,   456,
       0,     0,   456,   456,   456,  1482,     0,     0,     0,     0,
     584,     0,     0,     0,     0,     0,   132,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   943,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   478,
       0,   419,     0,   490,     0,     0,     0,     0,     0,   407,
    1791,     0,  -630,     0,     0,     0,     0,     0,     0,     0,
     558,     0,     0,     0,     0,     0,     0,   882,     0,     0,
       0,   574,     0,     0,   943,     0,     0,  -630,   882,     0,
       0,     0,     0,     0,     0,     0,  -630,  -630,  -630,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1012,     0,     0,  1836,  1840,     0,     0,     0,     0,   478,
     478,   558,     0,   478,   478,   478,   632,     0,     0,   632,
    1556,   405,     0,     0,  -630,  -630,     0,   632,     0,  -630,
     882,   409,     0,     0,     0,     0,  -630,   378,   378,   456,
     456,     0,     0,     0,   419,     0,     0,     0,   710,   713,
     715,     0,     0,   419,     0,     0,     0,     0,     0,   419,
    -630,  -630,     0,     0,     0,   736,     0,  1484,     0,    87,
    -630,     0,   348,  -630,     0,     0,  1792,     0,   976,  -630,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   419,
       0,     0,     0,     0,   419,     0,     0,     0,     0,     0,
       0,     0,     0,   558,     0,     0,     0,     0,    87,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   558,     0,     0,    87,     0,
       0,   419,     0,   419,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1012,     0,     0,   378,
     478,   478,     0,  1012,    77,     0,     0,  1012,     0,     0,
       0,     0,     0,     0,     0,   419,     0,     0,     0,     0,
       0,   869,     0,     0,   869,     0,  1682,     0,     0,     0,
     306,     0,     1,   307,   107,   308,     0,   309,   310,     0,
       0,     0,     0,     0,  1223,     0,     0,     0,     0,     0,
       0,  1223,     0,     0,     0,     0,     0,     2,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    87,    87,     0,     0,   664,     0,     0,   664,
       0,    83,     0,     0,     0,   311,     0,     0,  1135,     0,
       0,   312,   313,   314,     0,     0,     0,     0,   632,   632,
       0,     0,     0,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   419,     0,   664,   317,     0,
       0,     0,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   664,   664,   664,   664,     0,     0,     0,   326,   327,
     328,     0,     0,   329,  1167,   330,     0,     0,  1168,     0,
       0,     0,   419,   331,   332,  1731,   333,   334,   335,   336,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   490,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   490,     0,     0,     0,     0,
     456,   456,     0,     0,     0,     0,     0,     0,     0,     0,
    1012,     0,     0,     0,    87,     0,    87,     0,     0,     0,
     558,     0,     0,   419,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1754,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1763,   378,     0,     0,   456,   456,  1012,   405,  1012,     0,
       0,     0,     0,     0,   198,     0,     0,     0,     0,     0,
       0,   882,     0,     0,     0,  1012,     0,     0,     0,     0,
       0,     0,   882,     0,     0,  1776,     0,   584,     0,     0,
       0,     0,     0,     0,   419,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   478,   478,     0,     0,     0,     0,     0,     0,     0,
     348,     0,     0,     0,   348,     0,     0,     0,  1012,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     419,     0,     0,     0,     0,     0,     0,   419,     0,     0,
     419,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   478,   478,     0,   405,     0,
     348,     0,     0,     0,     0,     0,   419,   419,   419,   419,
     419,   419,   419,     0,     0,   419,   419,   584,   419,   419,
     419,   419,   419,   419,   419,   419,     0,   348,     0,     0,
       0,     0,     0,     0,     0,   348,   419,   419,   419,   419,
     419,   419,   419,   419,   419,   419,   419,   419,   419,   419,
     419,   419,   419,   419,     0,   348,     0,     0,     0,   558,
       0,   558,     0,     0,     0,     0,     0,     0,     0,     0,
     378,     0,     0,     0,     0,   558,   558,     0,     0,     0,
       0,     0,   378,     0,     0,     0,   419,   419,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   127,     0,     0,    87,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     456,     0,   456,  1894,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   182,   127,     0,     0,     0,     0,
       0,  1012,   235,     0,     0,     0,   456,     0,   456,     0,
       0,     0,     0,     0,   419,     0,   419,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   366,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   127,   127,     0,     0,   419,     0,     0,     0,
       0,     0,   421,     0,     0,   419,   664,   664,     0,     0,
       0,     0,     0,     0,     0,     0,  1135,     0,  1135,   664,
      87,     0,   664,     0,     0,     0,     0,     0,     0,     0,
     664,     0,     0,  1135,     0,   419,     0,   419,     0,     0,
       0,   478,     0,   478,     0,   537,   869,     0,     0,     0,
       0,     0,     0,     0,     0,   378,   378,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   421,   478,     0,   478,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   409,
       0,     0,   783,     0,     0,     0,     0,     0,     0,     0,
     558,     0,     0,   601,     0,     0,   603,     0,     0,   558,
       0,     0,     0,   419,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   456,   456,   456,   456,   456,     0,     0,   127,
       0,     0,     0,     0,     0,     0,   456,   456,   456,   456,
       0,     0,   182,   419,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   419,     0,   558,   558,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   421,
       0,     0,     0,   711,   714,   716,     0,     0,   421,     0,
     348,   348,     0,     0,   421,     0,     0,     0,     0,     0,
     737,     0,     0,     0,     0,     0,     0,   366,     0,     0,
       0,     0,     0,     0,     0,   456,   456,     0,     0,     0,
       0,     0,     0,     0,   421,     0,     0,     0,     0,   421,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   478,   478,   478,   478,   478,   306,     0,
       1,   307,   107,     0,   419,     0,   419,   478,   478,   478,
     478,  1135,  1135,  1135,  1135,     0,   421,  1135,   421,   127,
       0,   664,   664,     0,  1135,     2,  1135,     0,   419,   378,
       0,     0,     0,     0,     0,     0,     0,     0,  1135,     0,
       0,     0,    87,     0,     0,   419,     0,   378,     0,   419,
     421,     0,   348,     0,     0,     0,   419,     0,     0,     0,
     419,   127,     0,   311,     0,     0,     0,     0,     0,   312,
     313,     0,     0,     0,     0,     0,   478,   478,     0,     0,
       0,     0,     0,   316,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   317,     0,   378,   235,
     318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   326,     0,     0,     0,
       0,   712,     0,     0,     0,     0,     0,     0,     0,     0,
     363,   331,   332,     0,     0,     0,  1145,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   754,     0,
       0,   127,   127,   127,   127,     0,  1017,     0,     0,   603,
     421,     0,     0,     0,     0,   782,     0,     0,     0,     0,
     127,   127,   127,     0,     0,     0,     0,  1135,     0,     0,
       0,     0,     0,     0,     0,     0,  1135,     0,  1135,     0,
       0,   127,     0,     0,     0,     0,     0,   421,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   419,     0,     0,
       0,   419,     0,     0,     0,     0,     0,     0,     0,   366,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1135,  1135,     0,     0,  1135,     0,  1135,     0,
       0,  1135,     0,     0,     0,  1135,     0,     0,   421,  1274,
       0,     0,     0,   419,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   419,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   419,     0,     0,     0,  1135,     0,
       0,   658,  1306,  1310,  1314,  1318,  1322,     0,     0,  1331,
       0,     0,   419,     0,   348,  1274,     0,     0,     0,   419,
       0,   419,     0,     0,     0,     0,  1135,   235,     0,     0,
    1372,  1376,  1380,  1384,  1388,     0,     0,  1331,   419,   421,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   756,
       0,     0,     0,     0,     0,   366,     0,     0,     0,   366,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   421,     0,     0,     0,     0,
       0,   419,   421,     0,     0,   421,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   366,     0,     0,     0,     0,
       0,   421,   421,   421,   421,   421,   421,   421,     0,     0,
     421,   421,     0,   421,   421,   421,   421,   421,   421,   421,
     421,     0,   366,     0,     0,     0,     0,     0,     0,     0,
     366,   421,   421,   421,   421,   421,   421,   421,   421,   421,
     421,   421,   421,   421,   421,   421,   421,   421,   421,  1144,
     366,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   419,     0,
       0,     0,   419,   419,   419,     0,     0,     0,     0,     0,
       0,   421,   421,   348,     0,     0,     0,     0,   419,   419,
       0,     0,     0,     0,     0,   348,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   127,     0,     0,     0,
       0,     0,     0,     0,   419,   419,     0,   419,   419,     0,
       0,     0,   419,   419,   419,   419,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   419,     0,
       0,     0,     0,     0,     0,   127,     0,     0,  1024,   421,
       0,   421,     0,     0,   419,     0,     0,     0,     0,     0,
       0,     0,   601,     0,   603,   127,     0,     0,     0,     0,
       0,     0,   754,     0,     0,     0,     0,     0,     0,   419,
       0,   421,     0,     0,     0,     0,  1282,     0,     0,     0,
     421,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1305,  1309,  1313,  1317,  1321,
       0,  1109,  1330,  1336,  1617,     0,     0,     0,   754,     0,
     421,  1347,   421,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1371,  1375,  1379,  1383,  1387,     0,     0,
    1330,  1400,  1644,     0,     0,   658,     0,     0,     0,  1651,
       0,     0,     0,     0,     0,     0,     0,     0,   348,   348,
       0,   419,   419,   419,   419,   419,   419,   419,   419,   127,
     127,     0,     0,     0,     0,     0,     0,   658,   658,   658,
     658,     0,     0,  1331,     0,  1331,     0,     0,   421,     0,
       0,     0,   419,   419,     0,     0,     0,     0,   402,     0,
       0,     0,   419,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   421,     0,
       0,     0,     0,     0,     0,     0,     0,  1241,     0,   421,
       0,  1245,     0,     0,     0,     0,     0,     0,     0,     0,
     402,     0,     0,     0,     0,   419,     0,     0,     0,   419,
     419,     0,     0,     0,     0,   366,   366,     0,     0,     0,
       0,     0,     0,   756,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1283,     0,   582,
       0,   306,     0,     1,   307,   107,   308,     0,   309,   310,
       0,   601,     0,   603,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1337,     0,     0,     0,     2,   756,
       0,     0,  1348,     0,     0,     0,     0,     0,     0,   421,
       0,   421,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1401,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   421,     0,     0,   311,   693,     0,     0,
       0,     0,   312,   313,   314,     0,     0,     0,     0,     0,
     421,     0,   348,     0,   421,   315,   316,   366,     0,     0,
       0,   421,     0,     0,     0,   421,     0,     0,     0,   317,
     348,     0,     0,   318,   319,   320,   321,   322,   323,   324,
     325,     0,   473,     0,     0,   473,     0,     0,     0,   326,
     327,   328,     0,     0,   329,  1167,   330,     0,   473,  1736,
     473,     0,   473,  1737,   331,   332,     0,   333,   334,   335,
     336,     0,     0,     0,     0,     0,     0,  1144,     0,     0,
       0,   348,     0,     0,     0,     0,     0,   306,     0,     1,
     307,   107,   308,     0,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,   858,  1282,     0,     0,     0,     0,
     863,     0,  1347,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,   122,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1330,     0,  1330,     0,
       0,     0,   311,     0,     0,     0,     0,     0,   312,   313,
     314,    29,    30,     0,     0,     0,    33,     0,     0,     0,
    1024,   315,   316,    39,   656,     0,     0,     0,     0,     0,
     940,     0,   421,     0,     0,   317,   421,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,    44,    45,     0,
       0,     0,     0,   127,     0,   326,   327,   895,  1723,     0,
     896,   739,   330,     0,     0,     0,     0,     0,     0,     0,
     331,   332,     0,   333,   334,   335,   336,     0,   421,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   421,     0,
       0,  1016,     0,     0,  1021,     0,     0,     0,     0,   421,
       0,     0,     0,     0,     0,     0,     0,  1016,     0,     0,
       0,     0,     0,   658,     0,     0,   658,   421,     0,   366,
       0,     0,     0,     0,   421,   658,   421,     0,   582,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   582,     0,   421,     0,     0,     0,  1636,  1637,     0,
       0,     0,     0,     0,   658,     0,  1283,   127,     0,     0,
    1649,     0,     0,  1348,     0,  1653,     0,     0,   658,   658,
     658,   658,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   421,     0,     0,     0,
       0,  1929,     0,     0,     0,     0,  1932,  1934,  1938,  1942,
    1944,  1948,     0,     0,     0,  1952,  1956,  1960,  1964,     0,
     473,   473,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   473,   473,     0,     0,
       0,     0,   693,     0,     0,     0,     0,     0,   693,  1724,
       0,     0,     0,     0,     0,     0,     0,     0,   473,   473,
       0,     0,     0,   473,   473,     0,     0,   473,   473,     0,
       0,     0,     0,     0,     0,  1010,     0,     0,     0,     0,
       0,     0,     0,   421,     0,     0,     0,   421,   421,   421,
       0,     0,     0,     0,     0,     0,     0,     0,   366,     0,
       0,     0,     0,   421,   421,     0,   473,     0,   473,     0,
     366,     0,     0,     0,     0,     0,     0,     0,     0,   306,
       0,     1,   307,   107,   308,     0,   309,   310,     0,   421,
     421,     0,   421,   421,     0,     0,     0,   421,   421,   421,
     421,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     0,   421,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   421,
       0,     0,     0,     0,     0,     0,     0,     0,   656,     0,
       0,     0,     0,     0,   311,     0,     0,     0,     0,     0,
     312,   313,   314,     0,   421,     0,     0,     0,     0,     0,
       0,     0,     0,   315,   316,     0,     0,     0,     0,   127,
     656,   656,   656,   656,     0,     0,     0,   317,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   693,
       0,     0,     0,     0,     0,     0,  1444,   326,   327,   328,
       0,     0,   329,  1167,   330,     0,     0,  1168,     0,     0,
       0,     0,   331,   332,  1741,   333,   334,   335,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   366,   366,     0,   421,   421,   421,   421,
     421,   421,   421,   421,     0,     0,     0,     0,     0,  1480,
    1010,     0,     0,     0,   582,     0,     0,  1010,     0,     0,
    1010,  1024,     0,     0,     0,     0,     0,   421,   421,     0,
     940,     0,     0,     0,  1723,     0,     0,   421,     0,  1931,
    1933,  1937,  1941,  1943,  1947,     0,     0,     0,  1951,  1955,
    1959,  1963,  1024,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   940,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     421,     0,     0,     0,   421,   421,     0,     0,     0,     0,
       0,     0,     0,   658,   658,     0,     0,     0,     0,     0,
       0,     0,     0,   658,     0,   658,   658,     0,     0,   658,
       0,     0,     0,     0,     0,   402,     0,   658,     0,     0,
     658,     0,     0,     0,   582,     0,   582,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   473,   473,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1933,  1937,  1943,
    1947,  1951,  1955,  1959,  1963,     0,     0,   306,     0,     1,
     307,   107,   308,     0,   309,   310,     0,   366,     0,     0,
    1024,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1926,     0,     2,   366,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1724,     0,     0,   473,     0,
    1649,     0,     0,  1653,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   693,     0,   693,     0,
       0,     0,   311,     0,     0,  1010,     0,  1010,   312,   313,
     314,     0,     0,     0,     0,     0,   366,     0,     0,     0,
       0,   315,   316,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,  1024,   473,   473,
       0,     0,   473,   473,   473,   326,   327,   328,  1024,     0,
     329,  1167,   330,     0,     0,  1736,     0,     0,     0,  1744,
     331,   332,     0,   333,   334,   335,   336,   306,     0,     1,
     307,   107,   308,     0,   309,   310,     0,     0,   658,   658,
     658,   658,     0,     0,   658,     0,     0,     0,   658,   658,
       0,   658,     0,   658,     2,     0,     0,     0,     0,     0,
       0,     0,     0,  1010,     0,   658,   656,     0,     0,   656,
       0,     0,     0,     0,     0,  2030,  2031,     0,   656,  1124,
    1125,  1126,   636,  1127,  1128,  1129,  1130,   641,   642,  1131,
       0,     0,   311,     0,     0,     0,     0,     0,   312,   313,
     314,     0,     0,     0,     0,     0,    33,   656,     0,     0,
       0,   315,   316,  1132,     0,   646,   647,   648,     0,     0,
       0,   656,   656,   656,   656,   317,     0,   224,     0,   318,
     319,   320,   321,   322,   323,   324,   325,    44,    45,   473,
     473,     0,     0,     0,     0,   326,   327,   328,     0,     0,
     329,  -453,   330,   649,     0,  -453,     0,   258,     0,   650,
     331,   332,    75,   333,   334,   335,   336,     0,     0,   224,
       0,     0,     0,     0,     0,     0,     0,   423,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1024,     0,
       0,     0,     0,     0,   693,     0,     0,   515,     0,     0,
       0,  1766,     0,     0,   658,     0,     0,     0,     0,  1010,
       0,     0,     0,   658,   118,   658,  1010,     0,     0,     0,
    1010,     0,     0,     0,     0,     0,     0,     0,     0,  1444,
       0,   582,     0,     0,  1779,     0,     0,  1021,     0,     0,
       0,     0,     0,     0,     0,     0,   180,     0,     0,     0,
       0,     0,     0,     0,     0,   265,    75,     0,     0,     0,
       0,     0,     0,    75,    75,     0,  1024,     0,     0,   658,
     658,     0,     0,   658,     0,   658,     0,     0,   658,     0,
       0,   389,   658,     0,     0,     0,     0,     0,     0,  2128,
       0,   306,     0,     1,   307,   107,   308,     0,   309,   310,
       0,     0,     0,     0,     0,   488,     0,  1024,     0,     0,
       0,     0,   858,     0,     0,   658,     0,   488,     2,     0,
     582,   488,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   582,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   658,     0,     0,     0,     0,     0,     0,
     265,   265,     0,     0,     0,     0,   311,     0,  2171,     0,
       0,     0,   312,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   315,   316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   579,     0,     0,   317,
       0,     0,     0,   318,   319,   320,   321,   322,   323,   324,
     325,     0,     0,     0,     0,     0,     0,     0,     0,   326,
     327,   328,     0,     0,   329,  1167,   330,  1633,     0,  1168,
       0,     0,     0,  1010,   331,   332,   840,   333,   334,   335,
     336,   618,     0,     0,   265,   265,   265,     0,     0,     0,
       0,     0,     0,     0,   180,     0,     0,     0,     0,     0,
     473,   473,     0,     0,   180,   265,    75,     0,     0,     0,
       0,     0,     0,     0,     0,   875,   515,     0,     0,  1010,
     884,  1010,     0,     0,   721,     0,     0,     0,     0,   891,
     721,     0,   898,     0,     0,     0,     0,     0,     0,     0,
       0,   744,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   473,   473,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   949,   693,   693,     0,
    1974,     0,   965,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1010,     0,     0,     0,     0,   656,   656,     0,     0,
       0,     0,     0,     0,     0,     0,   656,     0,   656,   656,
       0,     0,   656,     0,     0,     0,     0,     0,     0,     0,
     656,     0,     0,   656,  1016,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   579,     0,     0,     0,     0,
       0,   880,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   224,   880,     0,     0,     0,     0,     0,     0,     0,
       0,   224,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    92,
       0,   224,     0,     0,   224,     0,   224,   579,   224,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   971,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   579,     0,     0,
       0,   121,   133,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   265,     0,     0,
       0,     0,     0,     0,   265,     0,     0,   265,     0,     0,
       0,     0,     0,   185,   133,     0,     0,     0,   233,     0,
       0,     0,     0,    92,  1010,     0,     0,     0,     0,     0,
      92,    92,     0,     0,     0,     0,     0,     0,     0,     0,
     473,     0,   473,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,     0,     0,     0,     0,   663,     0,     0,
       0,   399,     0,     0,     0,     0,   473,     0,   473,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   656,   656,   656,   656,     0,     0,   656,     0,     0,
       0,   656,   656,     0,   656,     0,   656,  1149,     0,     0,
       0,     0,   742,   536,     0,     0,     0,     0,   656,     0,
       0,     0,     0,     0,     0,     0,     0,   552,     0,     0,
       0,     0,   265,   265,   265,   265,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   586,     0,     0,     0,     0,     0,     0,
     265,   265,   265,     0,     0,   180,     0,     0,     0,     0,
       0,  1207,     0,     0,     0,     0,     0,     0,     0,   265,
       0,     0,     0,   840,   840,   840,  1220,  1230,   744,     0,
    1220,  1230,     0,     0,     0,     0,     0,  1207,   133,     0,
    1207,     0,     0,     0,     0,     0,   423,   423,   224,  1251,
       0,   185,   265,     0,     0,     0,     0,     0,     0,   265,
       0,   697,   265,    92,   742,     0,  1136,     0,     0,     0,
       0,     0,   473,   473,   473,   473,   473,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   473,   473,   473,   473,
       0,     0,     0,     0,     0,     0,     0,   656,     0,     0,
    1175,  1179,     0,     0,     0,     0,   656,     0,   656,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1476,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   579,     0,     0,     0,   423,     0,     0,     0,
       0,     0,     0,   515,   515,   473,   473,     0,     0,     0,
       0,     0,   656,   656,   515,     0,   656,     0,   656,     0,
       0,   656,     0,     0,     0,   656,     0,   579,     0,     0,
       0,     0,     0,     0,     0,  1435,   579,     0,     0,     0,
       0,     0,   870,   579,     0,     0,  1435,   118,   744,     0,
     579,     0,     0,     0,     0,     0,     0,     0,   656,     0,
     133,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   656,     0,     0,     0,
       0,     0,     0,     0,   944,     0,     0,   952,     0,     0,
       0,   579,   224,     0,     0,     0,     0,   224,     0,     0,
       0,     0,     0,  1576,     0,     0,  1147,   579,     0,  1576,
       0,     0,     0,     0,     0,   224,     0,     0,     0,     0,
       0,     0,  1165,     0,   870,     0,     0,     0,     0,     0,
       0,     0,     0,   663,   663,   663,   663,     0,     0,     0,
     133,   133,   133,   133,     0,     0,     0,   265,   265,   265,
       0,     0,     0,     0,     0,   618,     0,     0,     0,   133,
     133,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   742,     0,     0,   742,     0,     0,   626,     0,
    1060,     0,  1069,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1071,     0,     0,     0,     0,   742,     0,
       0,     0,     0,     0,  1165,     2,   203,   204,   205,   206,
     207,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,    19,    20,   248,   249,    23,    24,    25,     0,
     552,  1281,     0,     0,   423,   224,     0,     0,     0,     0,
       0,     0,     0,     0,   250,     0,     0,     0,     0,     0,
       0,     0,    29,    30,     0,   265,     0,    33,   265,     0,
       0,   265,     0,   251,    39,   252,     0,     0,     0,  1334,
       0,     0,     0,     0,  1149,     0,     0,  1346,   253,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    44,    45,
     254,   255,   256,   257,   209,   210,     0,  1398,     0,   265,
       0,     0,     0,     0,     0,  1191,     0,     0,   258,     0,
       0,     0,   697,   265,   265,   265,   265,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1225,     0,     0,   265,  1225,   265,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1672,     0,     0,   618,   870,     0,     0,   742,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1698,     0,     0,     0,     0,
       0,     0,  1698,     0,  1592,     0,     0,  1598,     0,     0,
       0,     0,     0,     0,     0,     0,  1615,     0,     0,     0,
     265,   265,     0,     0,     0,     0,     0,   265,   265,     0,
       0,   265,   265,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1639,     0,     0,     0,     0,
       0,   840,   840,     0,     0,     0,     0,     0,     0,  1175,
    1179,  1175,  1179,     0,     0,     0,     0,   423,     0,     0,
       0,   423,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   870,  1425,     0,
       0,     0,     0,     0,   870,     0,     0,     0,     0,     0,
       0,     0,   870,  1439,     0,     0,     0,     0,     0,     0,
    1446,     0,     0,   870,   121,   133,     0,     0,     0,     0,
       0,     0,     0,     0,   423,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   423,  1795,   423,  1795,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   133,     0,     0,     0,     0,     0,
       0,     0,  1479,     0,     0,     0,     0,     0,   586,     0,
       0,     0,     0,     0,   133,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   944,     0,     0,     0,     0,   663,
       0,     0,   663,  1603,  1605,     0,  1608,     0,     0,     0,
       0,     0,   264,     0,  1618,     0,     0,     0,     0,     0,
       0,     0,  1627,     0,     0,     0,     0,     0,     0,  1165,
       0,     0,     0,     0,     0,   265,     0,     0,   579,     0,
     663,     0,   944,     0,     0,     0,     0,  1165,     0,     0,
       0,     0,  1165,     0,   663,   663,   663,   663,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1662,     0,  1666,     0,     0,  1557,     0,
       0,     0,     0,     0,     0,   515,     0,  1565,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   264,   264,     0,
       0,     0,     0,     0,     0,     0,     0,  1165,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   423,     0,
     224,     0,     0,   423,     0,     0,     0,     0,   579,     0,
       0,     0,     0,   578,     0,     0,     0,     0,     0,     0,
       0,     0,   265,   265,     0,     0,     0,     0,   265,   265,
       0,     0,     0,  1165,     0,     0,     0,     0,     0,     0,
       0,   265,     0,     0,   265,     0,     0,     0,     0,     0,
       0,     0,   265,     0,     0,     0,     0,     0,   617,     0,
       0,   264,   264,   264,     0,     0,     0,     0,   423,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   264,     0,     0,  1165,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1165,     0,
       0,   720,     0,     0,     0,     0,     0,   720,     0,   870,
       0,     0,   870,     0,  1225,     0,     0,     0,   743,     0,
       0,     0,  1689,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1225,     0,     0,     0,     0,     0,     0,  1225,
       0,     0,     0,   744,     0,     0,     0,     0,     0,  1165,
       0,   557,     0,     0,  1833,  1837,     0,     0,     0,     0,
       0,     0,     0,     0,  1846,     0,  1849,  1592,     0,     0,
    1598,     0,     0,     0,     0,     0,     0,     0,  1639,     0,
       0,  1862,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     1,   265,   265,     0,     0,     0,
       0,     0,   578,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   423,     0,     0,     0,     0,   579,     0,     2,
     203,   204,   205,   206,   207,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    19,    20,   248,   249,
      23,    24,    25,     0,   706,     0,     0,     0,     0,     0,
       0,     0,     0,   557,   578,     0,     0,     0,   250,   557,
       0,     0,     0,     0,     0,     0,    29,    30,     0,     0,
       0,    33,     0,   265,   265,     0,     0,   251,    39,   252,
       0,     0,     0,     0,     0,     0,     0,   423,     0,   423,
       0,     0,   253,     0,   578,     0,     0,     0,     0,     0,
       0,     0,    44,    45,   254,   255,   256,   257,   209,   210,
       0,     0,    52,  1755,   264,   868,     0,     0,     0,     0,
       0,   264,  1432,     0,   264,     0,   572,  1762,     0,     0,
       0,   557,     0,   557,  1765,     0,   744,     0,     0,   663,
     663,     0,   399,     0,     0,  1165,     0,  1165,     0,     0,
    1165,   663,     0,     0,     0,     0,  1853,  1856,     0,  1858,
       0,     0,     0,  1446,     0,   586,     0,     0,     0,  1165,
       0,  1869,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2001,
    2002,  2003,  2004,     0,     0,  2005,     0,     0,     0,  1833,
    1837,     0,  1846,  1165,  1849,     0,     0,  1165,     0,     0,
       0,     0,     0,     0,     0,     0,  2014,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   741,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1819,     0,     0,     0,   264,
     264,   264,   264,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   586,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1011,     0,   264,   264,   264,
     267,     0,     0,     0,     0,     0,     0,     0,  1206,     0,
       0,     0,     0,     0,     0,     0,   264,     0,     0,     0,
       0,     0,     0,  1219,  1229,   743,     0,  1219,  1229,     0,
       0,     0,   557,     0,  1206,     0,     0,  1206,     0,     0,
       0,     0,     0,     0,     0,     0,  1250,     0,     0,   264,
       0,     0,     0,     0,     0,     0,   264,     0,     0,   264,
     741,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2005,     0,     0,     0,     0,
       0,     0,     0,     0,  2083,     0,  2086,     0,     0,     0,
       0,  1895,  1165,   557,     0,   267,   267,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     663,  1165,     0,     0,     0,     0,     0,     0,  1165,     0,
       0,     0,  1858,     0,  2012,     0,     0,     0,     0,     0,
       0,   581,     0,  2018,     0,     0,     0,     0,     0,   578,
    2115,  2116,     0,     0,  2083,     0,  2086,     0,     0,  2120,
       0,     0,     0,  2122,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1425,  1199,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   578,     0,   620,   742,     0,   267,
     267,   267,     0,   578,     0,  1765,  2122,     0,     0,     0,
     578,     0,     0,     0,     0,   743,     0,   578,     0,     0,
     267,     0,     0,     0,   870,     0,     0,     0,     0,     0,
    1011,     0,     0,     0,  2160,     0,     0,  1011,     0,   723,
    1011,     0,     0,     0,     0,   723,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   746,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   578,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1146,     0,   578,     0,     0,     0,     0,     0,
       0,  2075,  2078,     0,  1165,     0,  1165,     0,  1164,   663,
    1165,   663,  1169,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1689,   264,   264,   264,     0,     0,     0,
       0,     0,   617,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   741,     0,
     581,   741,     0,     0,     0,     0,     0,  1165,     0,     0,
    1165,     0,     0,     0,     0,  1234,     0,     0,   663,     0,
       0,     0,     0,     0,   741,     0,     0,     0,     0,     0,
    1164,  1169,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   581,     0,  1165,     0,     0,  1280,     0,     0,
       0,     0,     0,     0,  1011,     0,   557,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   264,     0,     0,   264,  -873,     0,   264,  -873,
    -873,  -873,   581,  -873,  -873,  1332,     0,     0,     0,     0,
       0,     0,     0,  1345,     0,   557,     0,     0,     0,     0,
       0,     0,   267,     0,     0,     0,     0,     0,     0,   267,
       0,     0,   267,  1396,     0,     0,   264,     0,     0,     0,
       0,     0,     0,     0,     0,  1011,     0,  1011,     0,     0,
     264,   264,   264,   264,     0,     0,     0,     0,     0,     0,
       0,  -873,     0,     0,     0,     0,     0,  -873,  -873,  -873,
       0,     0,     0,   264,     0,   264,     0,     0,     0,     0,
    -873,     0,     0,     0,     0,     0,     0,     0,     0,  1671,
       0,     0,   617,     0,  -873,   741,     0,     0,  -873,  -873,
    -873,  -873,  -873,  -873,  -873,  -873,     0,     0,     0,     0,
       0,     0,  1697,   557,  -873,  -873,     0,     0,     0,  1697,
       0,  -873,  -873,     0,  -873,  -873,  -873,     0,     0,  -873,
    -873,     0,  -873,  -873,  -873,  -873,     0,   264,   264,     0,
       0,     0,     0,     0,   264,   264,     0,     0,   264,   264,
       0,     0,     0,  1011,     0,     0,     0,   267,   267,   267,
     267,     0,     0,     0,   557,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   267,   267,   267,     0,     0,
       0,     0,     0,     0,     0,     0,  1209,     0,     0,     0,
       0,     0,     0,     0,   267,     0,     0,     0,     0,     0,
       0,  1222,  1232,   746,     0,  1222,  1232,     0,     0,     0,
       0,     0,  1209,     0,     0,  1209,     0,     0,     0,     0,
       0,     0,     0,     0,  1253,     0,     0,   267,     0,     0,
       0,     0,     0,     0,   267,     0,     0,   267,     0,     0,
       0,     0,     0,     0,     0,     0,   557,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   557,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1865,     0,
       1,   307,   107,   308,     0,   309,   310,     0,     0,  1011,
       0,     0,     0,     0,     0,     0,  1011,     0,     0,     0,
    1011,     0,     0,     0,     0,     2,     0,     0,     0,  1602,
    1604,     0,  1607,     0,     0,     0,     0,   581,     0,     0,
    1146,     0,     0,  1169,     0,     0,     0,     0,  1626,     0,
       0,     0,     0,     0,     0,  1164,  1169,     0,     0,     0,
     123,     0,   264,   311,     0,   578,     0,   140,     0,   312,
     313,   314,   581,  1164,  1169,     0,     0,     0,  1164,     0,
       0,   581,   315,   316,     0,     0,     0,     0,   581,     0,
     163,   173,   197,   746,     0,   581,   317,     0,     0,     0,
     318,   319,   320,   321,   322,   323,   324,   325,     0,  1660,
       0,  1664,     0,     0,     0,     0,   326,   327,   328,     0,
       0,   329,  1167,   330,  1866,     0,  1168,     0,     0,     0,
       0,   331,   332,     0,   333,   334,   335,   336,     0,   123,
     123,     0,     0,  1164,     0,     0,   581,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   498,     0,     0,     0,
       0,     0,   581,     0,     0,   578,     0,     0,     0,     0,
       0,     0,   529,     0,     0,     0,     0,     0,     0,   264,
     264,     0,     0,     0,     0,   264,   264,     0,     0,  1164,
    1169,     0,   123,     0,     0,     0,     0,     0,   264,     0,
       0,   264,   267,   267,   267,     0,     0,     0,     0,   264,
     620,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1011,     0,     0,     0,     0,     0,     0,
     163,   575,     0,   557,     0,     0,     0,     0,     0,     0,
       0,  1164,     0,  1169,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1164,  1169,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1011,
       0,  1011,     0,     0,     0,     0,   173,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1011,   173,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   575,
     743,     0,     0,     0,     0,  1164,     0,  1169,     0,     0,
     267,     0,     0,   267,     0,     0,   267,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1011,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   267,     0,     0,     0,     0,     0,
       0,     0,   264,   264,     0,     0,     0,     0,   267,   267,
     267,   267,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   578,     0,     0,     0,     0,     0,
       0,   267,     0,   267,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   123,  1674,     0,     0,
     620,     0,   123,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1700,     0,     0,     0,     0,     0,     0,  1700,     0,     0,
     264,   264,   557,     0,   557,     0,     0,     0,   575,     0,
       0,     0,     0,     0,     0,   267,   267,     0,   557,   557,
       0,     0,   267,   267,     0,     0,   267,   267,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   575,     0,  1935,  1939,     0,  1945,  1949,     0,
       0,  1829,  1953,  1957,  1961,  1965,     0,     0,   163,     0,
       0,     0,     0,   743,     0,     0,     0,     0,     0,     0,
       0,  1164,  1169,  1164,  1169,     0,  1164,  1848,     0,   126,
       0,     0,  1602,  1855,  1011,  1626,     0,  1169,     0,     0,
       0,     0,     0,     0,     0,  1164,  1169,  1626,   123,   123,
     123,   123,     0,   123,     0,     0,   123,     0,     0,     0,
     126,   126,     0,     0,     0,     0,     0,   123,   123,   123,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1164,
       0,  1169,     0,  1164,     0,  1169,   529,     0,   575,     0,
     123,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   123,     0,     0,     0,     0,   126,   126,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1935,  1939,  1945,  1949,  1953,  1957,  1961,  1965,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   126,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   557,     0,     0,     0,     0,     0,     0,
     267,     0,   557,   581,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     583,     0,     0,     0,     0,     0,  1187,     0,     0,     0,
       0,     0,     0,     0,   123,     0,     0,     0,     0,     0,
     575,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1011,     0,     0,     0,   557,
     557,     0,     0,     0,     0,   126,     0,     0,  1164,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   126,     0,
       0,     0,     0,     0,     0,     0,     0,  1164,   694,     0,
       0,     0,  1169,     0,  1164,  1848,     0,  1169,  1626,     0,
    2011,     0,  2013,   581,     0,     0,     0,     0,  1169,  2017,
       0,     0,     0,     0,     0,     0,     0,   267,   267,     0,
       0,     0,     0,   267,   267,     0,     0,     0,     0,     0,
       0,     0,     1,     0,     0,     0,   267,     0,     0,   267,
       0,     0,     0,     0,     0,     0,     0,   267,     0,     0,
       0,     0,     0,   741,     0,     0,     0,     2,     0,     0,
       0,     0,     0,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   126,    28,     0,     0,     0,
       0,   583,     0,     0,    29,    30,     0,     0,     0,    33,
       0,     0,    36,    37,     0,    38,    39,    40,     0,   163,
       0,   575,     0,     0,     0,     0,     0,     0,   575,     0,
      41,     0,     0,   575,     0,     0,     0,   126,   746,     0,
      44,    45,    46,    47,    48,    49,     0,  2074,  2077,     0,
    1164,  1169,  1164,     0,     0,     0,  1164,  1848,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   583,   123,     0,     0,     0,     0,     0,     0,     0,
       0,   123,     0,     0,     0,     0,   575,     0,     0,     0,
       0,     0,   123,     0,     0,     0,     0,     0,     0,     0,
     267,   267,   575,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1164,  1169,     0,  1164,  1848,     0,     0,
       0,  2121,   581,     0,     0,     0,   262,   126,   126,   126,
     126,     0,   126,     0,     0,   694,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   126,   126,   126,     0,
     575,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1164,     0,     0,     0,     0,     0,     0,   126,     0,   583,
       0,     0,     0,     0,     0,     0,   486,     0,   267,   267,
       0,     0,   583,     0,     0,     0,     0,     0,   486,     0,
       0,     0,   486,     0,     0,     0,   123,   123,     0,     0,
       0,     0,     0,     0,     0,     0,   123,     0,   123,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   262,   262,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   746,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   577,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   694,     0,     0,     0,     0,     0,   694,
       0,     0,   616,     0,     0,   262,   262,   262,   306,     0,
       1,   307,   107,   308,     0,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   262,     0,   123,     0,
     123,     0,     0,     0,     0,     2,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   719,     0,     0,     0,     0,
       0,   719,     0,     0,     0,     0,     0,     0,     0,     0,
    1124,  1125,  1126,   636,  1127,  1128,  1129,  1130,   641,   642,
    1131,     0,     0,   311,     0,     0,     0,     0,     0,   312,
     313,   314,     0,     0,     0,     0,     0,    33,     0,     0,
       0,     0,   315,   316,  1132,     0,   646,   647,   648,     0,
       0,   263,     0,     0,     0,     0,   317,     0,     0,     0,
     318,   319,   320,   321,   322,   323,   324,   325,    44,    45,
       0,     0,     0,     0,     0,     0,   326,   327,   328,     0,
       0,   329,  1167,   330,   649,     0,  1168,     0,   258,     0,
     650,   331,   332,     0,   333,   334,   335,   336,     0,     0,
       0,   263,     0,     0,     0,     0,   577,     0,     0,     0,
       0,     0,   879,   263,     0,     0,     0,   263,     0,     0,
       0,     0,     0,   879,     0,     0,     0,     0,     0,     0,
     583,     0,     0,     0,     0,     0,     0,   583,     0,     0,
       0,     0,   126,     0,     0,     0,   263,   263,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   577,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   970,     0,     0,     0,     0,
       0,   126,     0,     0,     0,     0,     0,     0,     0,     0,
     583,     0,     0,     0,     0,   583,     0,     0,   577,     0,
       0,   126,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   583,     0,     0,     0,     0,     0,     0,   262,     0,
       0,     0,     0,     0,     0,   262,   123,   263,   262,     0,
     263,   263,   263,   123,     0,     0,     0,     0,     0,     0,
     123,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   263,     0,     0,     0,     0,     0,     0,     0,   583,
       0,   123,     0,   575,     0,     0,   123,     0,     0,   123,
     263,     0,     0,     0,     0,     0,   263,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   126,   126,     0,     0,     0,
       0,     0,     0,     0,     0,   583,     0,   583,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   123,     0,     0,     0,     0,     0,
       0,     0,   123,   262,   262,   262,   262,     0,     0,     0,
       0,     0,     0,   575,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   262,   262,   262,     0,     0,     0,   263,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   263,     0,
     262,     0,     0,     0,     0,     0,     0,  1218,  1228,     0,
       0,  1218,  1228,     0,     0,     0,     0,     0,   268,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   262,     0,     0,     0,   694,     0,   694,
     262,     0,     0,   262,     0,     0,     0,     0,     0,     0,
     263,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   268,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     268,     0,     0,     0,   268,     0,     0,     0,     0,     0,
       0,     0,     0,   263,     0,     0,     0,     0,     0,     0,
     263,     0,     0,   263,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   268,   268,     0,     0,     0,     0,     0,
       0,     0,     0,   577,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
     123,     0,   123,     0,     0,     0,     0,     0,   577,     0,
       0,     0,     0,     0,     0,     0,  1434,   577,     0,     0,
       0,     0,     0,     0,   577,     0,     0,  1434,     0,     0,
       0,   577,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   268,     0,     0,   268,   268,   268,
       0,     0,     0,     0,     0,     0,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   268,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   263,   263,
     263,   263,   577,     0,     0,     0,     0,   268,     0,     0,
       0,     0,     0,   268,     0,     0,     0,     0,   577,     0,
       0,     0,     0,     0,     0,     0,   263,   263,   263,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   263,     0,     0,     0,     0,
       0,     0,   263,   263,     0,   583,   263,   263,   262,   262,
     262,     0,   583,     0,     0,     0,   616,     0,     0,   126,
       0,     0,     0,     0,     0,     0,     0,     0,   263,     0,
       0,     0,     0,     0,     0,   263,     0,     0,   263,     0,
     583,     0,   583,     0,     0,   583,     0,     0,   583,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   268,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   268,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   262,     0,     0,   262,
       0,     0,   262,   126,     0,     0,     0,     0,     0,     0,
       0,   583,     0,     0,     0,     0,     0,   268,     0,     0,
       0,     0,   583,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     262,   263,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   263,     0,   262,   262,   262,   262,     0,     0,
     268,     0,     0,     0,     0,     0,     0,   268,     0,     0,
     268,     0,     0,     0,     0,     0,     0,   262,     0,   262,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   616,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1696,     0,     0,     0,
       0,     0,     0,  1696,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   262,   262,     0,     0,     0,     0,     0,   262,   262,
       0,     0,   262,   262,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   263,   263,   263,     0,     0,     0,     0,
       0,   263,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   268,   268,   268,   268,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   583,   583,
       0,   583,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   268,   268,   268,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   268,     0,     0,     0,     0,     0,     0,   268,
     268,     0,     0,   268,   268,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   126,     0,     0,     0,     0,
       0,   263,     0,     0,   263,   268,   306,   263,     1,   307,
     107,   308,   268,   309,   310,   268,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   263,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   263,
     263,   263,   263,     0,     0,     0,     0,     0,     0,     0,
       0,   311,     0,     0,     0,     0,     0,   312,   313,   314,
       0,     0,   263,     0,   263,     0,   262,     0,     0,   577,
     315,   316,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   263,     0,     0,   317,     0,     0,     0,   318,   319,
     320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
       0,   263,     0,     0,   326,   327,   328,     0,   263,   329,
    1167,   330,  1866,     0,  1168,     0,     0,     0,   268,   331,
     332,     0,   333,   334,   335,   336,   263,   263,     0,   268,
       0,     0,     0,   263,   263,     0,     0,   263,   263,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   577,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   262,   262,     0,     0,     0,     0,   262,
     262,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   262,     0,     0,   262,     0,     0,     0,     0,
       0,     0,     0,   262,     0,     0,     0,     0,     0,   306,
       0,     1,   307,   107,   308,     0,   309,   310,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     268,   268,   268,     0,     0,     0,     2,     0,   268,     0,
       0,     0,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,    28,     0,     0,     0,     0,
     312,   313,   314,    29,    30,     0,     0,     0,    33,     0,
       0,    36,    37,   315,   411,    39,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,     0,    41,
       0,   318,   319,   320,   321,   322,   323,   324,   325,    44,
      45,    46,    47,    48,    49,     0,     0,   326,   327,   328,
       0,   263,   329,   739,   330,     0,     0,     0,   268,     0,
       0,   268,   331,   332,   268,   333,   334,   335,   336,     0,
       0,     0,     0,     0,     0,     0,   262,   262,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   577,     0,
       0,     0,   268,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   268,   268,   268,   268,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   268,
       0,   268,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   262,   262,     0,     0,   268,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   263,   263,
       0,     0,     0,     0,   263,   263,     0,     0,   268,     0,
       0,     0,     0,     0,     0,   268,     0,   263,     0,     0,
     263,     0,     0,     0,     0,     0,     0,     0,   263,     0,
       0,     0,     0,   268,   268,     0,     0,     0,     0,     0,
     268,   268,     0,     0,   268,   268,     0,     0,     0,   762,
       0,     0,     0,     0,     0,   763,   764,   765,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -345,     0,     0,     0,     0,
       0,     0,     0,  -345,  -345,     0,     0,     0,  -345,     0,
       0,     0,     0,     0,  -345,  -345,  -345,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -345,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,     0,  -345,
    -345,  -345,   766,     0,     0,  -345,  1538,  -345,  -345,     0,
     767,   263,   263,   768,     0,  -345,  -345,  -345,     0,  -345,
    -345,  -345,  -345,  -345,     0,     0,  -458,     0,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   268,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   263,
     263,  -458,     0,     0,     0,     0,     0,  -458,  -458,  -458,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -458,  -458,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -458,     0,     0,     0,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,     0,     0,     0,     0,
       0,     0,     0,     0,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,     0,     0,  -458,     0,  -458,
    -458,     0,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   268,   268,     0,     0,     0,
       0,   268,   268,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   268,     0,     0,   268,     0,     0,
       0,     0,     0,  -345,   762,   268,  -345,  -345,  -345,  -345,
     763,   764,   765,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,     0,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,     0,  -345,
    -345,     0,  -345,     0,     0,  -345,  -345,  -345,  -345,  -345,
       0,     0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,
    -345,     0,  -345,  -345,  -345,     0,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,   766,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,   767,  -345,  -345,   768,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   268,   268,
       0,     0,     0,     0,     0,     0,  -450,  1160,     0,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,     0,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
       0,     0,  -450,  -450,     0,  -450,   268,   268,  -450,  -450,
    -450,  -450,  -450,     0,     0,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,     0,  -450,     0,  -450,  -450,  -450,     0,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -304,   306,     0,     1,   307,   107,   308,  -304,
     309,   310,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
       2,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,     0,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,     0,     0,   311,  -304,
       0,  -304,     0,     0,   312,   313,   314,  -304,  -304,     0,
       0,  -304,  -304,  -304,  -304,  -304,  -304,   315,   316,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,     0,  -304,
       0,   317,  -304,  -304,     0,   318,   319,   320,   321,   322,
     323,   324,   325,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,   326,   327,   328,  -304,  -304,   329,  1248,   330,  -304,
    -304,  1163,  -304,  -304,  -304,  -304,   331,   332,  -304,   333,
     334,   335,   336,  -304,  -304,  -304,  -304,  -304,  -305,   306,
       0,     1,   307,   107,   308,  -305,   309,   310,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,     2,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
       0,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,     0,     0,   311,  -305,     0,  -305,     0,     0,
     312,   313,   314,  -305,  -305,     0,     0,  -305,  -305,  -305,
    -305,  -305,  -305,   315,   316,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,     0,  -305,     0,   317,  -305,  -305,
       0,   318,   319,   320,   321,   322,   323,   324,   325,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,   326,   327,   328,
    -305,  -305,   329,  1167,   330,  -305,  -305,  1168,  -305,  -305,
    -305,  -305,   331,   332,  -305,   333,   334,   335,   336,  -305,
    -305,  -305,  -305,  -305,  -565,   306,     0,     1,   307,   107,
     308,  -565,   309,   310,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,     2,  -565,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,  -565,  -565,     0,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,     0,     0,
     311,  -565,     0,  -565,     0,     0,   312,   313,   314,  -565,
    -565,     0,     0,  -565,  -565,  -565,  -565,  -565,  -565,   315,
     316,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,
       0,  -565,     0,   317,  -565,  -565,     0,   318,   319,   320,
     321,   322,   323,   324,   325,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,  -565,   326,   327,   328,  -565,  -565,   329,  -565,
     330,  -565,  -565,  -565,  -565,   750,  -565,  1329,   331,   332,
    -565,   333,   334,   335,   336,  -565,  -565,  -565,  -565,  -565,
    -566,   306,     0,     1,   307,   107,   308,  -566,   309,   310,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,     2,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,     0,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,     0,     0,   311,  -566,     0,  -566,
       0,     0,   312,   313,   314,  -566,  -566,     0,     0,  -566,
    -566,  -566,  -566,  -566,  -566,   315,   316,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,     0,  -566,     0,   317,
    -566,  -566,     0,   318,   319,   320,   321,   322,   323,   324,
     325,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,   326,
     327,   328,  -566,  -566,   329,  -566,   330,  -566,  -566,  -566,
    -566,   750,  -566,  1395,   331,   332,  -566,   333,   334,   335,
     336,  -566,  -566,  -566,  -566,  -566,  -576,   306,     0,     1,
     307,   107,   308,  -576,   309,   310,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,     2,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,     0,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
       0,     0,   311,  -576,     0,  -576,     0,     0,   312,   313,
     314,  -576,  -576,     0,     0,  -576,  -576,  -576,  -576,  -576,
    -576,   315,   316,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,     0,  -576,     0,   317,  -576,  -576,     0,   318,
     319,   320,   321,   322,   323,   324,   325,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,   326,   327,   328,  -576,  -576,
     329,  -576,   330,  -576,  -576,  1163,  -576,  -576,  -576,  -576,
     331,   332,  -576,   333,   334,   335,   336,  -576,  -576,  -576,
    -576,  -576,  -578,   306,     0,     1,   307,   107,   308,  -578,
     309,   310,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
       2,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,     0,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,     0,     0,   311,  -578,
       0,  -578,     0,     0,   312,   313,   314,  -578,  -578,     0,
       0,  -578,  -578,  -578,  -578,  -578,  -578,   315,   316,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,     0,  -578,
       0,   317,  -578,  -578,     0,   318,   319,   320,   321,   322,
     323,   324,   325,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,   326,   327,   328,  -578,  -578,   329,  1167,   330,  -578,
    -578,  1168,  -578,  -578,  -578,  -578,   331,   332,  -578,   333,
     334,   335,   336,  -578,  -578,  -578,  -578,  -578,  -577,   306,
       0,     1,   307,   107,   308,  -577,   309,   310,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,     2,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
       0,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,     0,     0,   311,  -577,     0,  -577,     0,     0,
     312,   313,   314,  -577,  -577,     0,     0,  -577,  -577,  -577,
    -577,  -577,  -577,   315,   316,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,     0,  -577,     0,   317,  -577,  -577,
       0,   318,   319,   320,   321,   322,   323,   324,   325,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,   326,   327,   328,
    -577,  -577,   329,  -577,   330,  -577,  -577,  1163,  -577,  -577,
    -577,  -577,   331,   332,  -577,   333,   334,   335,   336,  -577,
    -577,  -577,  -577,  -577,  -338,  1891,     0,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,     0,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,     0,     0,
    -338,  -338,     0,  -338,     0,     0,  -338,  -338,  -338,  -338,
    -338,     0,     0,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
       0,  -338,     0,  -338,  -338,  -338,     0,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -342,  1927,     0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,     0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,     0,     0,  -342,  -342,     0,  -342,
       0,     0,  -342,  -342,  -342,  -342,  -342,     0,     0,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,     0,  -342,     0,  -342,
    -342,  -342,     0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -332,   306,     0,     1,
     307,   107,   308,  -332,   309,   310,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,     2,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,     0,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
       0,     0,   311,  -332,     0,  -332,     0,     0,   312,   313,
     314,  -332,  -332,     0,     0,  -332,  -332,  -332,  -332,  -332,
    -332,   315,   316,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,     0,  -332,     0,   317,  -332,  -332,     0,   318,
     319,   320,   321,   322,   323,   324,   325,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,   326,   327,   328,  -332,  -332,
     329,  -332,   330,  -332,  -332,  -332,  -332,   750,  -332,  -332,
     331,   332,  -332,   333,   334,   335,   336,  -332,  -332,  -332,
    -332,  -332,  -543,   306,     0,     1,   307,   107,   308,  -543,
     309,   310,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
       2,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,     0,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,     0,     0,   311,  -543,
       0,  -543,     0,     0,   312,   313,   314,  -543,  -543,     0,
       0,  -543,  -543,  -543,  -543,  -543,  -543,   315,   316,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,     0,  -543,
       0,   317,  -543,  -543,     0,   318,   319,   320,   321,   322,
     323,   324,   325,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,   326,   327,   328,  -543,  -543,   329,  -543,   330,  -543,
    -543,  -543,  -543,   750,  -543,  -543,   331,   332,  -543,   333,
     334,   335,   336,  -543,  -543,  -543,  -543,  -543,  -551,   306,
       0,     1,   307,   107,   308,  -551,   309,   310,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,     2,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
       0,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,     0,     0,   311,  -551,     0,  -551,     0,     0,
     312,   313,   314,  -551,  -551,     0,     0,  -551,  -551,  -551,
    -551,  -551,  -551,   315,   316,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,     0,  -551,     0,   317,  -551,  -551,
       0,   318,   319,   320,   321,   322,   323,   324,   325,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,   326,   327,   328,
    -551,  -551,   329,  -551,   330,  -551,  -551,  -551,  -551,   750,
    -551,  -551,   331,   332,  -551,   333,   334,   335,   336,  -551,
    -551,  -551,  -551,  -551,  -544,   306,     0,     1,   307,   107,
     308,  -544,   309,   310,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,     2,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,     0,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,     0,     0,
     311,  -544,     0,  -544,     0,     0,   312,   313,   314,  -544,
    -544,     0,     0,  -544,  -544,  -544,  -544,  -544,  -544,   315,
     316,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
       0,  -544,     0,   317,  -544,  -544,     0,   318,   319,   320,
     321,   322,   323,   324,   325,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,   326,   327,   328,  -544,  -544,   329,  -544,
     330,  -544,  -544,  -544,  -544,   750,  -544,  -544,   331,   332,
    -544,   333,   334,   335,   336,  -544,  -544,  -544,  -544,  -544,
    -552,   306,     0,     1,   307,   107,   308,  -552,   309,   310,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,     2,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,     0,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,     0,     0,   311,  -552,     0,  -552,
       0,     0,   312,   313,   314,  -552,  -552,     0,     0,  -552,
    -552,  -552,  -552,  -552,  -552,   315,   316,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,     0,  -552,     0,   317,
    -552,  -552,     0,   318,   319,   320,   321,   322,   323,   324,
     325,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,   326,
     327,   328,  -552,  -552,   329,  -552,   330,  -552,  -552,  -552,
    -552,   750,  -552,  -552,   331,   332,  -552,   333,   334,   335,
     336,  -552,  -552,  -552,  -552,  -552,  -545,   306,     0,     1,
     307,   107,   308,  -545,   309,   310,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,     2,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,     0,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
       0,     0,   311,  -545,     0,  -545,     0,     0,   312,   313,
     314,  -545,  -545,     0,     0,  -545,  -545,  -545,  -545,  -545,
    -545,   315,   316,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,     0,  -545,     0,   317,  -545,  -545,     0,   318,
     319,   320,   321,   322,   323,   324,   325,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,   326,   327,   328,  -545,  -545,
     329,  -545,   330,  -545,  -545,  -545,  -545,   750,  -545,  -545,
     331,   332,  -545,   333,   334,   335,   336,  -545,  -545,  -545,
    -545,  -545,  -553,   306,     0,     1,   307,   107,   308,  -553,
     309,   310,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
       2,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,     0,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,     0,     0,   311,  -553,
       0,  -553,     0,     0,   312,   313,   314,  -553,  -553,     0,
       0,  -553,  -553,  -553,  -553,  -553,  -553,   315,   316,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,     0,  -553,
       0,   317,  -553,  -553,     0,   318,   319,   320,   321,   322,
     323,   324,   325,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,   326,   327,   328,  -553,  -553,   329,  -553,   330,  -553,
    -553,  -553,  -553,   750,  -553,  -553,   331,   332,  -553,   333,
     334,   335,   336,  -553,  -553,  -553,  -553,  -553,  -546,   306,
       0,     1,   307,   107,   308,  -546,   309,   310,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,     2,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
       0,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,     0,     0,   311,  -546,     0,  -546,     0,     0,
     312,   313,   314,  -546,  -546,     0,     0,  -546,  -546,  -546,
    -546,  -546,  -546,   315,   316,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,     0,  -546,     0,   317,  -546,  -546,
       0,   318,   319,   320,   321,   322,   323,   324,   325,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,   326,   327,   328,
    -546,  -546,   329,  -546,   330,  -546,  -546,  -546,  -546,   750,
    -546,  -546,   331,   332,  -546,   333,   334,   335,   336,  -546,
    -546,  -546,  -546,  -546,  -554,   306,     0,     1,   307,   107,
     308,  -554,   309,   310,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,     2,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,     0,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,     0,     0,
     311,  -554,     0,  -554,     0,     0,   312,   313,   314,  -554,
    -554,     0,     0,  -554,  -554,  -554,  -554,  -554,  -554,   315,
     316,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
       0,  -554,     0,   317,  -554,  -554,     0,   318,   319,   320,
     321,   322,   323,   324,   325,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,   326,   327,   328,  -554,  -554,   329,  -554,
     330,  -554,  -554,  -554,  -554,   750,  -554,  -554,   331,   332,
    -554,   333,   334,   335,   336,  -554,  -554,  -554,  -554,  -554,
    -340,  2032,     0,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,     0,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,     0,     0,  -340,  -340,     0,  -340,
       0,     0,  -340,  -340,  -340,  -340,  -340,     0,     0,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,     0,  -340,     0,  -340,
    -340,  -340,     0,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -339,  2033,     0,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,     0,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
       0,     0,  -339,  -339,     0,  -339,     0,     0,  -339,  -339,
    -339,  -339,  -339,     0,     0,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,     0,  -339,     0,  -339,  -339,  -339,     0,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -345,   762,     0,  -345,  -345,  -345,  -345,   763,
     764,   765,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,     0,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,     0,     0,  -345,  -345,
       0,  -345,     0,     0,  -345,  -345,  -345,  -345,  -345,     0,
       0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,  -345,
       0,  -345,  -345,  -345,     0,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,   766,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  1158,  -345,  -345,   768,     0,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -458,     0,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -458,     0,     0,     0,     0,     0,  -458,
    -458,  -458,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -458,  -458,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -458,     0,     0,     0,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,     0,     0,
       0,     0,     0,     0,     0,     0,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,     0,  -458,  -458,     0,     0,  -458,
       0,  -458,  -458,     0,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -450,  1160,     0,  -450,  -450,  -450,  -450,
       0,  -450,  -450,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,     0,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,     0,     0,  -450,
    -450,     0,  -450,     0,     0,  -450,  -450,  -450,  -450,  -450,
       0,     0,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,     0,
    -450,     0,  -450,  -450,  -450,     0,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,     0,     0,  -450,  -450,  -450,
    -450,     0,  -450,  -450,  -450,  1161,  -450,  -450,  -450,     0,
    -450,  -450,  -450,  -450, -1093,   306,     0,     1,   307,   107,
     308,     0,   309,   310,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1093, -1093, -1093, -1093, -1093, -1093, -1093,
   -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093,
   -1093, -1093, -1093, -1093, -1093, -1093,     0, -1093, -1093, -1093,
   -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093,     0,     0,
     311, -1093,     0, -1093,     0,     0,   312,   313,   314, -1093,
   -1093,     0,     0, -1093, -1093, -1093, -1093, -1093, -1093,   315,
     316, -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093,
       0, -1093,     0,   317, -1093, -1093,     0,   318,   319,   320,
     321,   322,   323,   324,   325, -1093, -1093, -1093, -1093, -1093,
   -1093, -1093, -1093,   326,   327,   328,     0,     0,   329,  1167,
     330, -1093,     0,  1168, -1093, -1093,     0, -1093,   331,   332,
       0,   333,   334,   335,   336, -1237,   306,     0,     1,   307,
     107,   308,     0,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2, -1237, -1237, -1237, -1237, -1237, -1237,
   -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237,
   -1237, -1237, -1237, -1237, -1237, -1237, -1237,     0, -1237, -1237,
   -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237,     0,
       0,   311, -1237,     0, -1237,     0,     0,   312,   313,   314,
   -1237, -1237,     0,     0, -1237, -1237, -1237, -1237, -1237, -1237,
     315,   316, -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237,
   -1237,     0, -1237,     0,   317, -1237, -1237,     0,   318,   319,
     320,   321,   322,   323,   324,   325, -1237, -1237, -1237, -1237,
   -1237, -1237, -1237, -1237,   326,   327,   328,     0,     0,   329,
    1167,   330,  1633,     0,  1168, -1237, -1237,     0, -1237,   331,
     332,     0,   333,   334,   335,   336, -1195,   306,     0,     1,
     307,   107,   308,     0,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1195, -1195, -1195, -1195, -1195,
   -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195,
   -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195,     0, -1195,
   -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195,
       0,     0,   311, -1195,     0, -1195,     0,     0,   312,   313,
     314, -1195, -1195,     0,     0, -1195, -1195, -1195, -1195, -1195,
   -1195,   315,   316, -1195, -1195, -1195, -1195, -1195, -1195, -1195,
   -1195, -1195,     0, -1195,     0,   317, -1195, -1195,     0,   318,
     319,   320,   321,   322,   323,   324,   325, -1195, -1195, -1195,
   -1195, -1195, -1195, -1195, -1195,   326,   327,   328,     0,     0,
     329,  1842,   330, -1195,     0,  1168, -1195, -1195,     0, -1195,
     331,   332,     0,   333,   334,   335,   336, -1226,   306,     0,
       1,   307,   107,   308,     0,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2, -1226, -1226, -1226, -1226,
   -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226,
   -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226,     0,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,     0,     0,   311, -1226,     0, -1226,     0,     0,   312,
     313,   314, -1226, -1226,     0,     0, -1226,    33, -1226, -1226,
   -1226, -1226,   315,   316,  1132, -1226,   646,   647,   648, -1226,
   -1226, -1226, -1226,     0, -1226,     0,   317, -1226, -1226,     0,
     318,   319,   320,   321,   322,   323,   324,   325,    44,    45,
   -1226, -1226, -1226, -1226, -1226, -1226,   326,   327,   328,     0,
       0,   329,  1167,   330,   649,     0,  1168, -1226,   258,     0,
     650,   331,   332,     0,   333,   334,   335,   336,  -577,   306,
       0,     1,   307,   107,   308,     0,   309,   310,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
       0,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,     0,     0,   311,  -577,     0,  -577,     0,     0,
     312,   313,   314,  -577,  -577,     0,     0,  -577,  -577,  -577,
    -577,  -577,  -577,   315,   316,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,     0,  -577,     0,   317,  -577,  -577,
       0,   318,   319,   320,   321,   322,   323,   324,   325,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,   326,   327,   328,
       0,     0,   329,  -577,   330,  1162,     0,  1163,  -577,  -577,
       0,  -577,   331,   332,     0,   333,   334,   335,   336, -1218,
     306,     0,     1,   307,   107,   308,     0,   309,   310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2, -1218, -1218,
   -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218,
   -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218,
   -1218,     0, -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218,
   -1218, -1218, -1218,     0,     0,   311, -1218,     0, -1218,     0,
       0,   312,   313,   314, -1218, -1218,     0,     0, -1218, -1218,
   -1218, -1218, -1218, -1218,   315,   316, -1218, -1218, -1218, -1218,
   -1218, -1218, -1218, -1218, -1218,     0, -1218,     0,   317, -1218,
   -1218,     0,   318,   319,   320,   321,   322,   323,   324,   325,
   -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218,   326,   327,
     328,     0,     0,   329,  2079,   330, -1218,     0,  1163, -1218,
   -1218,     0, -1218,   331,   332,     0,   333,   334,   335,   336,
   -1219,   306,     0,     1,   307,   107,   308,     0,   309,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1219,
   -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219,
   -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219,
   -1219, -1219,     0, -1219, -1219, -1219, -1219, -1219, -1219, -1219,
   -1219, -1219, -1219, -1219,     0,     0,   311, -1219,     0, -1219,
       0,     0,   312,   313,   314, -1219, -1219,     0,     0, -1219,
   -1219, -1219, -1219, -1219, -1219,   315,   316, -1219, -1219, -1219,
   -1219, -1219, -1219, -1219, -1219, -1219,     0, -1219,     0,   317,
   -1219, -1219,     0,   318,   319,   320,   321,   322,   323,   324,
     325, -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219,   326,
     327,   328,     0,     0,   329,  1167,   330,  2080,     0,  1168,
   -1219, -1219,     0, -1219,   331,   332,     0,   333,   334,   335,
     336, -1213,   306,     0,     1,   307,   107,   308,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
   -1213, -1213, -1213, -1213, -1213, -1213, -1213, -1213, -1213, -1213,
   -1213, -1213, -1213, -1213, -1213, -1213, -1213, -1213, -1213, -1213,
   -1213, -1213, -1213,     0,   633,   634,   635,   636,   637,   638,
     639,   640,   641,   642,   643,     0,     0,   311, -1213,     0,
   -1213,     0,     0,   312,   313,   314, -1213, -1213,     0,     0,
   -1213,    33, -1213, -1213, -1213, -1213,   315,   316,  1132, -1213,
     646,   647,   648, -1213, -1213, -1213, -1213,     0, -1213,     0,
     317, -1213, -1213,     0,   318,   319,   320,   321,   322,   323,
     324,   325,    44,    45, -1213, -1213, -1213, -1213, -1213, -1213,
     326,   327,   328,     0,     0,   329,  1167,   330,   649,     0,
    1168, -1213,   258,     0,   650,   331,   332,     0,   333,   334,
     335,   336, -1161,   624,     0, -1161, -1161, -1161, -1161,     0,
   -1161, -1161,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161,
   -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161,
   -1161, -1161, -1161, -1161,     0, -1161, -1161, -1161, -1161, -1161,
   -1161, -1161, -1161, -1161, -1161, -1161,     0,     0, -1161, -1161,
       0, -1161,     0,     0, -1161, -1161, -1161, -1161, -1161,     0,
       0, -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161,
   -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161,     0, -1161,
       0, -1161, -1161, -1161,     0, -1161, -1161, -1161, -1161, -1161,
   -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161,
   -1161, -1161, -1161, -1161,     0,     0, -1161,     0, -1161,   625,
       0, -1161, -1161, -1161,     0, -1161, -1161, -1161,     0, -1161,
   -1161, -1161, -1161, -1184,   306,     0,     1,   307,   107,   308,
       0,   309,   310,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   203,   204,   205,   206,   207,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,    19,    20,
     248,   249,    23,    24,    25,     0,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,     0,     0,   311,
     250,     0, -1184,     0,     0,   312,   313,   314,    29,    30,
       0,     0, -1184,    33, -1184, -1184, -1184, -1184,   315,   644,
     645,   252,   646,   647,   648, -1184, -1184, -1184, -1184,     0,
   -1184,     0,   317, -1184,   253,     0,   318,   319,   320,   321,
     322,   323,   324,   325,    44,    45,   254,   255,   256,   257,
     209,   210,   326,   327,   328,     0,     0,   329,     0,   330,
     649,     0, -1184, -1184,   258,     0,   650,   331,   332,     0,
     333,   334,   335,   336, -1162,   624,     0, -1162, -1162, -1162,
   -1162,     0, -1162, -1162,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162,
   -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162,
   -1162, -1162, -1162, -1162, -1162, -1162,     0, -1162, -1162, -1162,
   -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162,     0,     0,
   -1162, -1162,     0, -1162,     0,     0, -1162, -1162, -1162, -1162,
   -1162,     0,     0, -1162, -1162, -1162, -1162, -1162, -1162, -1162,
   -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162,
       0, -1162,     0, -1162, -1162, -1162,     0, -1162, -1162, -1162,
   -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162,
   -1162, -1162, -1162, -1162, -1162, -1162,     0,     0, -1162,     0,
   -1162,   625,     0, -1162, -1162, -1162,     0, -1162, -1162, -1162,
       0, -1162, -1162, -1162, -1162, -1223,   306,     0,     1,   307,
     107,   308,     0,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2, -1223, -1223, -1223, -1223, -1223, -1223,
   -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223,
   -1223, -1223, -1223, -1223, -1223, -1223, -1223,     0,  1124,  1125,
    1126,   636,  1127,  1128,  1129,  1130,   641,   642,  1131,     0,
       0,   311, -1223,     0, -1223,     0,     0,   312,   313,   314,
   -1223, -1223,     0,     0, -1223,    33, -1223, -1223, -1223, -1223,
     315,   316,  1132, -1223,   646,   647,   648, -1223, -1223, -1223,
   -1223,     0, -1223,     0,   317, -1223, -1223,     0,   318,   319,
     320,   321,   322,   323,   324,   325,    44,    45, -1223, -1223,
   -1223, -1223, -1223, -1223,   326,   327,   328,     0,     0,   329,
       0,   330,   649,     0, -1223, -1223,   258,     0,   650,   331,
     332,     0,   333,   334,   335,   336, -1239,   306,     0,     1,
     307,   107,   308,     0,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1239, -1239, -1239, -1239, -1239,
   -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239,
   -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239,     0, -1239,
   -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239,
       0,     0,   311, -1239,     0, -1239,     0,     0,   312,   313,
     314, -1239, -1239,     0,     0, -1239, -1239, -1239, -1239, -1239,
   -1239,   315,   316, -1239, -1239, -1239, -1239, -1239, -1239, -1239,
   -1239, -1239,     0, -1239,     0,   317, -1239, -1239,     0,   318,
     319,   320,   321,   322,   323,   324,   325, -1239, -1239, -1239,
   -1239, -1239, -1239, -1239, -1239,   326,   327,   328,     0,     0,
     329,     0,   330,  1143,     0, -1239, -1239,   750,     0, -1239,
     331,   332,     0,   333,   334,   335,   336, -1174,  1170,     0,
       1,   307,   107,   308,     0,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   203,   204,   205,   206,
     207,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,    19,    20,   248,   249,    23,    24,    25,     0,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,     0,     0,   311,   250,     0, -1174,     0,     0,   312,
     313,   314,    29,    30,     0,     0, -1174,    33, -1174, -1174,
   -1174, -1174,   315,   644,   645,   252,   646,   647,   648, -1174,
   -1174, -1174, -1174,     0, -1174,     0,   317, -1174,   253,     0,
     318,   319,   320,   321,   322,   323,   324,   325,    44,    45,
     254,   255,   256,   257,   209,   210,   326,   327,   328,     0,
       0,   329,     0,   330,   649,     0, -1174, -1174,   258,     0,
     650,   331,   332,     0,   333,   334,   335,   336, -1178,   306,
       0,     1,   307,   107,   308,     0,   309,   310,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   203,   204,   205,
     206,   207,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,    19,    20,   248,   249,    23,    24,    25,
       0,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,     0,     0,   311,   250,     0, -1178,     0,     0,
     312,   313,   314,    29,    30,     0,     0, -1178,    33, -1178,
   -1178, -1178, -1178,   315,   644,   645,   252,   646,   647,   648,
   -1178, -1178, -1178, -1178,     0, -1178,     0,   317, -1178,   253,
       0,   318,   319,   320,   321,   322,   323,   324,   325,    44,
      45,   254,   255,   256,   257,   209,   210,   326,   327,   328,
       0,     0,   329,     0,   330,   649,     0, -1178, -1178,   258,
       0,   650,   331,   332,     0,   333,   334,   335,   336, -1173,
     306,     0,     1,   307,   107,   308,     0,   309,   310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   203,   204,
     205,   206,   207,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,    19,    20,   248,   249,    23,    24,
      25,     0,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,     0,     0,   311,   250,     0, -1173,     0,
       0,   312,   313,   314,    29,    30,     0,     0, -1173,    33,
   -1173, -1173, -1173, -1173,   315,   644,   645,   252,   646,   647,
     648, -1173, -1173, -1173, -1173,     0, -1173,     0,   317, -1173,
     253,     0,   318,   319,   320,   321,   322,   323,   324,   325,
      44,    45,   254,   255,   256,   257,   209,   210,   326,   327,
     328,     0,     0,   329,     0,   330,   649,     0, -1173, -1173,
     258,     0,   650,   331,   332,     0,   333,   334,   335,   336,
   -1177,   306,     0,     1,   307,   107,   308,     0,   309,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   203,
     204,   205,   206,   207,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,    19,    20,   248,   249,    23,
      24,    25,     0,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,     0,     0,   311,   250,     0, -1177,
       0,     0,   312,   313,   314,    29,    30,     0,     0, -1177,
      33, -1177, -1177, -1177, -1177,   315,   644,   645,   252,   646,
     647,   648, -1177, -1177, -1177, -1177,     0, -1177,     0,   317,
   -1177,   253,     0,   318,   319,   320,   321,   322,   323,   324,
     325,    44,    45,   254,   255,   256,   257,   209,   210,   326,
     327,   328,     0,     0,   329,     0,   330,   649,     0, -1177,
   -1177,   258,     0,   650,   331,   332,     0,   333,   334,   335,
     336, -1080,  1183,     0, -1080, -1080, -1080, -1080,     0, -1080,
   -1080,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1080,
   -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080,
   -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080,
   -1080, -1080, -1080,     0, -1080, -1080, -1080, -1080, -1080, -1080,
   -1080, -1080, -1080, -1080, -1080,     0,     0, -1080, -1080,     0,
   -1080,     0,     0, -1080, -1080, -1080, -1080, -1080,     0,     0,
   -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080,
   -1080, -1080, -1080, -1080, -1080, -1080, -1080,     0, -1080,     0,
   -1080, -1080, -1080,     0, -1080, -1080, -1080, -1080, -1080, -1080,
   -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080,
   -1080, -1080, -1080,     0,     0, -1080,     0, -1080, -1080,     0,
   -1080, -1080, -1080,     0, -1080, -1080, -1080,     0, -1080, -1080,
   -1080, -1080, -1082,  1184,     0, -1082, -1082, -1082, -1082,     0,
   -1082, -1082,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082,     0, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082,     0,     0, -1082, -1082,
       0, -1082,     0,     0, -1082, -1082, -1082, -1082, -1082,     0,
       0, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,     0, -1082,
       0, -1082, -1082, -1082,     0, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082,     0,     0, -1082,     0, -1082, -1082,
       0, -1082, -1082, -1082,     0, -1082, -1082, -1082,     0, -1082,
   -1082, -1082, -1082, -1128,   306,     0,     1,   307,   107,   308,
       0,   309,   310,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   203,   204,   205,   206,   207,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,    19,    20,
     248,   249,    23,    24,    25,     0,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,     0,     0,   311,
     250,     0, -1128,     0,     0,   312,   313,   314,    29,    30,
       0,     0, -1128,    33, -1128, -1128, -1128, -1128,   315,   644,
     645,   252,   646,   647,   648, -1128, -1128, -1128, -1128,     0,
   -1128,     0,   317, -1128,   253,     0,   318,   319,   320,   321,
     322,   323,   324,   325,    44,    45,   254,   255,   256,   257,
     209,   210,   326,   327,   328,     0,     0,   329,     0,   330,
     649,     0, -1128, -1128,   258,     0,   650,   331,   332,     0,
     333,   334,   335,   336, -1130,   306,     0,     1,   307,   107,
     308,     0,   309,   310,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   203,   204,   205,   206,   207,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,    19,
      20,   248,   249,    23,    24,    25,     0,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,     0,     0,
     311,   250,     0, -1130,     0,     0,   312,   313,   314,    29,
      30,     0,     0, -1130,    33, -1130, -1130, -1130, -1130,   315,
     644,   645,   252,   646,   647,   648, -1130, -1130, -1130, -1130,
       0, -1130,     0,   317, -1130,   253,     0,   318,   319,   320,
     321,   322,   323,   324,   325,    44,    45,   254,   255,   256,
     257,   209,   210,   326,   327,   328,     0,     0,   329,     0,
     330,   649,     0, -1130, -1130,   258,     0,   650,   331,   332,
       0,   333,   334,   335,   336, -1175,   306,     0,     1,   307,
     107,   308,     0,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   203,   204,   205,   206,   207,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
      19,    20,   248,   249,    23,    24,    25,     0,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,     0,
       0,   311,   250,     0, -1175,     0,     0,   312,   313,   314,
      29,    30,     0,     0, -1175,    33, -1175, -1175, -1175, -1175,
     315,   644,   645,   252,   646,   647,   648, -1175, -1175, -1175,
   -1175,     0, -1175,     0,   317, -1175,   253,     0,   318,   319,
     320,   321,   322,   323,   324,   325,    44,    45,   254,   255,
     256,   257,   209,   210,   326,   327,   328,     0,     0,   329,
       0,   330,   649,     0, -1175, -1175,   258,     0,   650,   331,
     332,     0,   333,   334,   335,   336, -1179,   306,     0,     1,
     307,   107,   308,     0,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   203,   204,   205,   206,   207,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,    19,    20,   248,   249,    23,    24,    25,     0,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
       0,     0,   311,   250,     0, -1179,     0,     0,   312,   313,
     314,    29,    30,     0,     0, -1179,    33, -1179, -1179, -1179,
   -1179,   315,   644,   645,   252,   646,   647,   648, -1179, -1179,
   -1179, -1179,     0, -1179,     0,   317, -1179,   253,     0,   318,
     319,   320,   321,   322,   323,   324,   325,    44,    45,   254,
     255,   256,   257,   209,   210,   326,   327,   328,     0,     0,
     329,     0,   330,   649,     0, -1179, -1179,   258,     0,   650,
     331,   332,     0,   333,   334,   335,   336, -1176,   306,     0,
       1,   307,   107,   308,     0,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   203,   204,   205,   206,
     207,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,    19,    20,   248,   249,    23,    24,    25,     0,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,     0,     0,   311,   250,     0, -1176,     0,     0,   312,
     313,   314,    29,    30,     0,     0, -1176,    33, -1176, -1176,
   -1176, -1176,   315,   644,   645,   252,   646,   647,   648, -1176,
   -1176, -1176, -1176,     0, -1176,     0,   317, -1176,   253,     0,
     318,   319,   320,   321,   322,   323,   324,   325,    44,    45,
     254,   255,   256,   257,   209,   210,   326,   327,   328,     0,
       0,   329,     0,   330,   649,     0, -1176, -1176,   258,     0,
     650,   331,   332,     0,   333,   334,   335,   336, -1180,   306,
       0,     1,   307,   107,   308,     0,   309,   310,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   203,   204,   205,
     206,   207,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,    19,    20,   248,   249,    23,    24,    25,
       0,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,     0,     0,   311,   250,     0, -1180,     0,     0,
     312,   313,   314,    29,    30,     0,     0, -1180,    33, -1180,
   -1180, -1180, -1180,   315,   644,   645,   252,   646,   647,   648,
   -1180, -1180, -1180, -1180,     0, -1180,     0,   317, -1180,   253,
       0,   318,   319,   320,   321,   322,   323,   324,   325,    44,
      45,   254,   255,   256,   257,   209,   210,   326,   327,   328,
       0,     0,   329,     0,   330,   649,     0, -1180, -1180,   258,
       0,   650,   331,   332,     0,   333,   334,   335,   336, -1171,
     624,     0, -1171, -1171, -1171, -1171,     0, -1171, -1171,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1171, -1171, -1171,
   -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171,
   -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171,
   -1171,     0, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171,
   -1171, -1171, -1171,     0,     0, -1171, -1171,     0, -1171,     0,
       0, -1171, -1171, -1171, -1171, -1171,     0,     0, -1171, -1171,
   -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171,
   -1171, -1171, -1171, -1171, -1171,     0, -1171,     0, -1171, -1171,
   -1171,     0, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171,
   -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171,
   -1171,     0,     0, -1171,     0, -1171,   625,     0, -1171, -1171,
   -1171,     0, -1171, -1171, -1171,     0, -1171, -1171, -1171, -1171,
   -1172,   624,     0, -1172, -1172, -1172, -1172,     0, -1172, -1172,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1172, -1172,
   -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172,
   -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172,
   -1172, -1172,     0, -1172, -1172, -1172, -1172, -1172, -1172, -1172,
   -1172, -1172, -1172, -1172,     0,     0, -1172, -1172,     0, -1172,
       0,     0, -1172, -1172, -1172, -1172, -1172,     0,     0, -1172,
   -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172,
   -1172, -1172, -1172, -1172, -1172, -1172,     0, -1172,     0, -1172,
   -1172, -1172,     0, -1172, -1172, -1172, -1172, -1172, -1172, -1172,
   -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172,
   -1172, -1172,     0,     0, -1172,     0, -1172,   625,     0, -1172,
   -1172, -1172,     0, -1172, -1172, -1172,     0, -1172, -1172, -1172,
   -1172, -1006,   306,     0,     1,   307,   107,   308,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
   -1006, -1006, -1006, -1006, -1006, -1006, -1006, -1006, -1006, -1006,
   -1006, -1006, -1006, -1006, -1006, -1006, -1006, -1006, -1006, -1006,
   -1006, -1006, -1006,     0, -1006, -1006, -1006, -1006, -1006, -1006,
   -1006, -1006, -1006, -1006, -1006,     0,     0,   311, -1006,     0,
   -1006,     0,     0,   312,   313,   314, -1006, -1006,     0,     0,
   -1006, -1006, -1006, -1006, -1006, -1006,   315,   316, -1006, -1006,
   -1006, -1006, -1006, -1006, -1006, -1006, -1006,     0, -1006,     0,
     317, -1006, -1006,     0,   318,   319,   320,   321,   322,   323,
     324,   325, -1006, -1006, -1006, -1006, -1006, -1006, -1006, -1006,
     326,   327,   328,     0,     0,   329,     0,   330, -1006,     0,
    1811,  1812,  1023,     0, -1006,   331,   332,     0,   333,   334,
     335,   336, -1134,   624,     0, -1134, -1134, -1134, -1134,     0,
   -1134, -1134,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134,
   -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134,
   -1134, -1134, -1134, -1134,     0, -1134, -1134, -1134, -1134, -1134,
   -1134, -1134, -1134, -1134, -1134, -1134,     0,     0, -1134, -1134,
       0, -1134,     0,     0, -1134, -1134, -1134, -1134, -1134,     0,
       0, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134,
   -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134,     0, -1134,
       0, -1134, -1134, -1134,     0, -1134, -1134, -1134, -1134, -1134,
   -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134,
   -1134, -1134, -1134, -1134,     0,     0, -1134,     0, -1134,   625,
       0, -1134, -1134, -1134,     0, -1134, -1134, -1134,     0, -1134,
   -1134, -1134, -1134, -1135,   624,     0, -1135, -1135, -1135, -1135,
       0, -1135, -1135,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135,
   -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135,
   -1135, -1135, -1135, -1135, -1135,     0, -1135, -1135, -1135, -1135,
   -1135, -1135, -1135, -1135, -1135, -1135, -1135,     0,     0, -1135,
   -1135,     0, -1135,     0,     0, -1135, -1135, -1135, -1135, -1135,
       0,     0, -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135,
   -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135,     0,
   -1135,     0, -1135, -1135, -1135,     0, -1135, -1135, -1135, -1135,
   -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135,
   -1135, -1135, -1135, -1135, -1135,     0,     0, -1135,     0, -1135,
     625,     0, -1135, -1135, -1135,     0, -1135, -1135, -1135,     0,
   -1135, -1135, -1135, -1135, -1131,   624,     0, -1131, -1131, -1131,
   -1131,     0, -1131, -1131,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131,     0, -1131, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131,     0,     0,
   -1131, -1131,     0, -1131,     0,     0, -1131, -1131, -1131, -1131,
   -1131,     0,     0, -1131, -1131, -1131, -1131, -1131, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131,
       0, -1131,     0, -1131, -1131, -1131,     0, -1131, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131,     0,     0, -1131,     0,
   -1131,   625,     0, -1131, -1131, -1131,     0, -1131, -1131, -1131,
       0, -1131, -1131, -1131, -1131, -1008,   306,     0,     1,   307,
     107,   308,     0,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2, -1008, -1008, -1008, -1008, -1008, -1008,
   -1008, -1008, -1008, -1008, -1008, -1008, -1008, -1008, -1008, -1008,
   -1008, -1008, -1008, -1008, -1008, -1008, -1008,     0, -1008, -1008,
   -1008, -1008, -1008, -1008, -1008, -1008, -1008, -1008, -1008,     0,
       0,   311, -1008,     0, -1008,     0,     0,   312,   313,   314,
   -1008, -1008,     0,     0, -1008, -1008, -1008, -1008, -1008, -1008,
     315,   316, -1008, -1008, -1008, -1008, -1008, -1008, -1008, -1008,
   -1008,     0, -1008,     0,   317, -1008, -1008,     0,   318,   319,
     320,   321,   322,   323,   324,   325, -1008, -1008, -1008, -1008,
   -1008, -1008, -1008, -1008,   326,   327,   328,     0,     0,   329,
       0,   330, -1008,     0, -1008,  1992,  1023,     0, -1008,   331,
     332,     0,   333,   334,   335,   336, -1002,  1995,     0, -1002,
   -1002, -1002, -1002,     0, -1002, -1002,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1002, -1002, -1002, -1002, -1002, -1002,
   -1002, -1002, -1002, -1002, -1002, -1002, -1002, -1002, -1002, -1002,
   -1002, -1002, -1002, -1002, -1002, -1002, -1002, -1002,     0, -1002,
   -1002, -1002, -1002, -1002, -1002, -1002, -1002, -1002, -1002, -1002,
       0,     0, -1002, -1002,     0, -1002,     0,     0, -1002, -1002,
   -1002, -1002, -1002,     0,     0, -1002, -1002, -1002, -1002, -1002,
   -1002, -1002, -1002, -1002, -1002, -1002, -1002, -1002, -1002, -1002,
   -1002, -1002,     0, -1002,     0, -1002, -1002, -1002,     0, -1002,
   -1002, -1002, -1002, -1002, -1002, -1002, -1002, -1002, -1002, -1002,
   -1002, -1002, -1002, -1002, -1002, -1002, -1002, -1002,     0,     0,
   -1002,     0, -1002, -1002,     0, -1002, -1002, -1002,     0, -1002,
   -1002, -1002,     0, -1002, -1002, -1002, -1002, -1132,   624,     0,
   -1132, -1132, -1132, -1132,     0, -1132, -1132,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1132, -1132, -1132, -1132, -1132,
   -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132,
   -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132,     0,
   -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132,
   -1132,     0,     0, -1132, -1132,     0, -1132,     0,     0, -1132,
   -1132, -1132, -1132, -1132,     0,     0, -1132, -1132, -1132, -1132,
   -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132,
   -1132, -1132, -1132,     0, -1132,     0, -1132, -1132, -1132,     0,
   -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132,
   -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132,     0,
       0, -1132,     0, -1132,   625,     0, -1132, -1132, -1132,     0,
   -1132, -1132, -1132,     0, -1132, -1132, -1132, -1132, -1133,   624,
       0, -1133, -1133, -1133, -1133,     0, -1133, -1133,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1133, -1133, -1133, -1133,
   -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133,
   -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133,
       0, -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133,
   -1133, -1133,     0,     0, -1133, -1133,     0, -1133,     0,     0,
   -1133, -1133, -1133, -1133, -1133,     0,     0, -1133, -1133, -1133,
   -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133,
   -1133, -1133, -1133, -1133,     0, -1133,     0, -1133, -1133, -1133,
       0, -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133,
   -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133,
       0,     0, -1133,     0, -1133,   625,     0, -1133, -1133, -1133,
       0, -1133, -1133, -1133,     0, -1133, -1133, -1133, -1133, -1220,
     306,     0,     1,   307,   107,   308,     0,   309,   310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2, -1220, -1220,
   -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220,
   -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220,
   -1220,     0, -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220,
   -1220, -1220, -1220,     0,     0,   311, -1220,     0, -1220,     0,
       0,   312,   313,   314, -1220, -1220,     0,     0, -1220, -1220,
   -1220, -1220, -1220, -1220,   315,   316, -1220, -1220, -1220, -1220,
   -1220, -1220, -1220, -1220, -1220,     0, -1220,     0,   317, -1220,
   -1220,     0,   318,   319,   320,   321,   322,   323,   324,   325,
   -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220,   326,   327,
     328,     0,     0,   329,     0,   330, -1220,     0, -1220, -1220,
   -1220,     0, -1220,   331,   332,     0,   333,   334,   335,   336,
   -1003,  2071,     0, -1003, -1003, -1003, -1003,     0, -1003, -1003,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003,     0, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003,     0,     0, -1003, -1003,     0, -1003,
       0,     0, -1003, -1003, -1003, -1003, -1003,     0,     0, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003,     0, -1003,     0, -1003,
   -1003, -1003,     0, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003,     0,     0, -1003,     0, -1003, -1003,     0, -1003,
   -1003, -1003,     0, -1003, -1003, -1003,     0, -1003, -1003, -1003,
   -1003,  -909,   589,     0,  -909,  -909,  -909,  -909,     0,  -909,
    -909,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -909,
    -909,  -909,  -909,  -909,  -909,  -909,  -909,  -909,  -909,  -909,
    -909,  -909,  -909,  -909,  -909,  -909,  -909,  -909,  -909,  -909,
    -909,  -909,  -909,     0,     0,  -909,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -909,  -909,     0,
    -909,     0,     0,  -909,  -909,  -909,  -909,  -909,     0,     0,
    -909,  -909,  -909,  -909,  -909,  -909,  -909,  -909,  -909,  -909,
    -909,     0,     0,  -909,  -909,  -909,  -909,     0,  -909,     0,
    -909,  -909,  -909,     0,  -909,  -909,  -909,  -909,  -909,  -909,
    -909,  -909,  -909,  -909,  -909,  -909,  -909,  -909,  -909,  -909,
    -909,  -909,  -909,     0,     0,  -909,   854,  -909,  -909,     0,
     591,  -909,  -909,     0,     0,  -909,  -909,     0,  -909,  -909,
    -909,  -909,   306,     0,     1,   307,   107,   308,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    19,    20,   248,   249,
      23,    24,    25,     0,   633,   634,   635,   636,   637,   638,
     639,   640,   641,   642,   643,     0,     0,   311,   250,     0,
       0,     0,     0,   312,   313,   314,    29,    30,     0,     0,
       0,    33,     0,     0,     0,     0,   315,   644,   645,   252,
     646,   647,   648,     0,     0,     0,     0,     0,     0,     0,
     317,     0,   253,     0,   318,   319,   320,   321,   322,   323,
     324,   325,    44,    45,   254,   255,   256,   257,   209,   210,
     326,   327,   328,     0,     0,   329,     0,   330,   649,     0,
       0,     0,   258,     0,   650,   331,   332,     0,   333,   334,
     335,   336,   306,     0,     1,   307,   107,   308,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    19,    20,   248,   249,
      23,    24,    25,     0,  1124,  1125,  1126,   636,  1127,  1128,
    1129,  1130,   641,   642,  1131,     0,     0,   311,   250,     0,
       0,     0,     0,   312,   313,   314,    29,    30,     0,     0,
       0,    33,     0,     0,     0,     0,   315,   644,   645,   252,
     646,   647,   648,     0,     0,     0,     0,     0,     0,     0,
     317,     0,   253,     0,   318,   319,   320,   321,   322,   323,
     324,   325,    44,    45,   254,   255,   256,   257,   209,   210,
     326,   327,   328,     0,     0,   329,     0,   330,   649,     0,
       0,     0,   258,     0,   650,   331,   332,     0,   333,   334,
     335,   336,   306,     0,     1,   307,   107,   308,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    19,    20,   248,   249,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   250,     0,
       0,     0,     0,   312,   313,   314,    29,    30,     0,     0,
       0,    33,     0,     0,     0,     0,   315,   644,    39,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     317,     0,   253,     0,   318,   319,   320,   321,   322,   323,
     324,   325,    44,    45,   254,   255,   256,   257,   209,   210,
     326,   327,   328,     0,     0,   329,     0,   330,   993,     0,
     994,   995,   750,     0,     0,   331,   332,     0,   333,   334,
     335,   336,  1257,     0,     1,   307,   107,   308,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    19,    20,   248,   249,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   250,     0,
       0,     0,     0,   312,   313,   314,    29,    30,     0,     0,
       0,    33,     0,     0,     0,     0,   315,   644,    39,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     317,     0,   253,     0,   318,   319,   320,   321,   322,   323,
     324,   325,    44,    45,   254,   255,   256,   257,   209,   210,
     326,   327,   328,     0,     0,   329,     0,   330,   993,     0,
     994,  -110,   750,     0,     0,   331,   332,     0,   333,   334,
     335,   336,  1264,     0,     1,   307,   107,   308,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    19,    20,   248,   249,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   250,     0,
       0,     0,     0,   312,   313,   314,    29,    30,     0,     0,
       0,    33,     0,     0,     0,     0,   315,   644,    39,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     317,     0,   253,     0,   318,   319,   320,   321,   322,   323,
     324,   325,    44,    45,   254,   255,   256,   257,   209,   210,
     326,   327,   328,     0,     0,   329,     0,   330,   993,     0,
     994,   -98,   750,     0,     0,   331,   332,     0,   333,   334,
     335,   336,  1268,     0,     1,   307,   107,   308,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    19,    20,   248,   249,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   250,     0,
       0,     0,     0,   312,   313,   314,    29,    30,     0,     0,
       0,    33,     0,     0,     0,     0,   315,   644,    39,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     317,     0,   253,     0,   318,   319,   320,   321,   322,   323,
     324,   325,    44,    45,   254,   255,   256,   257,   209,   210,
     326,   327,   328,     0,     0,   329,     0,   330,   993,     0,
     994,  -102,   750,     0,     0,   331,   332,     0,   333,   334,
     335,   336,   306,     0,     1,   307,   107,   308,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    19,    20,   248,   249,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   250,     0,
       0,     0,     0,   312,   313,   314,    29,    30,     0,     0,
       0,    33,     0,     0,     0,     0,   315,   644,    39,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     317,     0,   253,     0,   318,   319,   320,   321,   322,   323,
     324,   325,    44,    45,   254,   255,   256,   257,   209,   210,
     326,   327,   328,     0,     0,   329,     0,   330,  1522,     0,
     994,   -65,   750,     0,     0,   331,   332,     0,   333,   334,
     335,   336,   306,     0,     1,   307,   107,   308,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    19,    20,   248,   249,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   250,     0,
       0,     0,     0,   312,   313,   314,    29,    30,     0,     0,
       0,    33,     0,     0,     0,     0,   315,   644,    39,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     317,     0,   253,     0,   318,   319,   320,   321,   322,   323,
     324,   325,    44,    45,   254,   255,   256,   257,   209,   210,
     326,   327,   328,     0,     0,   329,     0,   330,  1531,     0,
     994,  1532,   750,     0,     0,   331,   332,     0,   333,   334,
     335,   336,  1589,     0,     1,   307,   107,   308,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    19,    20,   248,   249,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   250,     0,
       0,     0,     0,   312,   313,   314,    29,    30,     0,     0,
       0,    33,     0,     0,     0,     0,   315,   644,    39,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     317,     0,   253,     0,   318,   319,   320,   321,   322,   323,
     324,   325,    44,    45,   254,   255,   256,   257,   209,   210,
     326,   327,   328,     0,     0,   329,     0,   330,   993,     0,
     994,   -81,   750,     0,     0,   331,   332,     0,   333,   334,
     335,   336,   306,     0,     1,   307,   107,   308,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    19,    20,   248,   249,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   250,     0,
       0,     0,     0,   312,   313,   314,    29,    30,     0,     0,
       0,    33,     0,     0,     0,     0,   315,   644,    39,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     317,     0,   253,     0,   318,   319,   320,   321,   322,   323,
     324,   325,    44,    45,   254,   255,   256,   257,   209,   210,
     326,   327,   328,     0,     0,   329,     0,   330,  1531,     0,
     994,  -107,   750,     0,     0,   331,   332,     0,   333,   334,
     335,   336,   306,     0,     1,   307,   107,   308,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    19,    20,   248,   249,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   250,     0,
       0,     0,     0,   312,   313,   314,    29,    30,     0,     0,
       0,    33,     0,     0,     0,     0,   315,   644,    39,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     317,     0,   253,     0,   318,   319,   320,   321,   322,   323,
     324,   325,    44,    45,   254,   255,   256,   257,   209,   210,
     326,   327,   328,     0,     0,   329,     0,   330,  1531,     0,
     994,   -97,   750,     0,     0,   331,   332,     0,   333,   334,
     335,   336,   306,     0,     1,   307,   107,   308,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    19,    20,   248,   249,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   250,     0,
       0,     0,     0,   312,   313,   314,    29,    30,     0,     0,
       0,    33,     0,     0,     0,     0,   315,   644,    39,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     317,     0,   253,     0,   318,   319,   320,   321,   322,   323,
     324,   325,    44,    45,   254,   255,   256,   257,   209,   210,
     326,   327,   328,     0,     0,   329,     0,   330,  1531,     0,
     994,  -101,   750,     0,     0,   331,   332,     0,   333,   334,
     335,   336,  1772,     0,     1,   307,   107,   308,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    19,    20,   248,   249,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   250,     0,
       0,     0,     0,   312,   313,   314,    29,    30,     0,     0,
       0,    33,     0,     0,     0,     0,   315,   644,    39,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     317,     0,   253,     0,   318,   319,   320,   321,   322,   323,
     324,   325,    44,    45,   254,   255,   256,   257,   209,   210,
     326,   327,   328,     0,     0,   329,     0,   330,   993,     0,
     994,   -88,   750,     0,     0,   331,   332,     0,   333,   334,
     335,   336,   306,     0,     1,   307,   107,   308,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    19,    20,   248,   249,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   250,     0,
       0,     0,     0,   312,   313,   314,    29,    30,     0,     0,
       0,    33,     0,     0,     0,     0,   315,   644,    39,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     317,     0,   253,     0,   318,   319,   320,   321,   322,   323,
     324,   325,    44,    45,   254,   255,   256,   257,   209,   210,
     326,   327,   328,     0,     0,   329,     0,   330,  1531,     0,
     994,   -78,   750,     0,     0,   331,   332,     0,   333,   334,
     335,   336,   306,     0,     1,   307,   107,   308,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    19,    20,   248,   249,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   250,     0,
       0,     0,     0,   312,   313,   314,    29,    30,     0,     0,
       0,    33,     0,     0,     0,     0,   315,   644,    39,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     317,     0,   253,     0,   318,   319,   320,   321,   322,   323,
     324,   325,    44,    45,   254,   255,   256,   257,   209,   210,
     326,   327,   328,     0,     0,   329,     0,   330,  1531,     0,
     994,   -85,   750,     0,     0,   331,   332,     0,   333,   334,
     335,   336,   306,     0,     1,   307,   107,   308,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,    28,     0,
       0,     0,     0,   312,   313,   314,    29,    30,     0,     0,
       0,    33,     0,     0,    36,    37,   315,   411,    39,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     317,     0,    41,     0,   318,   319,   320,   321,   322,   323,
     324,   325,    44,    45,    46,    47,    48,    49,   209,   210,
     326,   327,   328,     0,     0,   329,   306,   330,     1,   307,
     107,   308,     0,   309,   310,   331,   332,     0,   333,   334,
     335,   336,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   203,   204,   205,   206,   207,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   872,    28,     0,     0,     0,     0,   312,   313,   314,
      29,    30,     0,     0,     0,    33,     0,     0,    36,    37,
     315,   411,    39,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   317,     0,    41,     0,   318,   319,
     320,   321,   322,   323,   324,   325,    44,    45,    46,    47,
      48,    49,   209,   210,   326,   327,   328,     0,     0,   329,
     306,   330,     1,   307,   107,   308,     0,   309,   310,   331,
     332,     0,   333,   334,   335,   336,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,     0,     0,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1203,    28,     0,     0,     0,
       0,   312,   313,   314,    29,    30,     0,     0,     0,    33,
       0,     0,    36,    37,   315,   411,    39,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   317,     0,
      41,     0,   318,   319,   320,   321,   322,   323,   324,   325,
      44,    45,    46,    47,    48,    49,     0,     0,   326,   327,
     328,     0,     0,   329,   739,   330,     0,     0,     0,     0,
       0,     0,     0,   331,   332,     0,   333,   334,   335,   336,
     306,     0,     1,   307,   107,   308,     0,   309,   310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,     0,     0,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,    28,     0,     0,     0,
       0,   312,   313,   314,    29,    30,     0,     0,     0,    33,
       0,     0,    36,    37,   315,   411,    39,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   317,     0,
      41,     0,   318,   319,   320,   321,   322,   323,   324,   325,
      44,    45,    46,    47,    48,    49,     0,     0,   326,   327,
     328,     0,     0,   329,   306,   330,     1,   307,   107,   308,
     258,   309,   310,   331,   332,     0,   333,   334,   335,   336,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,     0,     0,     0,     0,     0,     8,     9,    10,
     570,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
      28,     0,     0,     0,     0,   312,   313,   314,    29,    30,
       0,     0,     0,    33,     0,     0,    36,    37,   315,   411,
      39,    40,     0,   306,     0,     1,   307,   107,   308,     0,
     309,   310,   317,     0,    41,     0,   318,   319,   320,   321,
     322,   323,   324,   325,    44,    45,    46,    47,    48,    49,
       2,     0,   326,   327,   895,     0,     0,   896,   739,   330,
       0,     0,     0,     0,     0,     0,     0,   331,   332,     0,
     333,   334,   335,   336,     0,  1124,  1125,  1126,   636,  1127,
    1128,  1129,  1130,   641,   642,  1131,     0,     0,   311,     0,
       0,     0,     0,     0,   312,   313,   314,     0,     0,     0,
       0,     0,    33,     0,     0,     0,     0,   315,   316,  1132,
       0,   646,   647,   648,     0,     0,     0,     0,     0,     0,
       0,   317,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,    44,    45,     0,     0,     0,     0,     0,
       0,   326,   327,   328,     0,     0,   329,     0,   330,   649,
       0,     0,     0,   258,     0,   650,   331,   332,     0,   333,
     334,   335,   336,  1845,     0,     1,   307,   107,   308,     0,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1124,  1125,  1126,   636,  1127,
    1128,  1129,  1130,   641,   642,  1131,     0,     0,   311,     0,
       0,     0,     0,     0,   312,   313,   314,     0,     0,     0,
       0,     0,    33,     0,     0,     0,     0,   315,   316,  1132,
       0,   646,   647,   648,     0,     0,     0,     0,     0,     0,
       0,   317,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,    44,    45,     0,     0,     0,     0,     0,
       0,   326,   327,   328,     0,     0,   329,     0,   330,   649,
       0,     0,     0,   258,     0,   650,   331,   332,     0,   333,
     334,   335,   336,   306,     0,     1,   307,   107,   308,     0,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,     0,     0,   311,     0,
       0,     0,     0,     0,   312,   313,   314,     0,     0,     0,
       0,     0,    33,     0,     0,     0,     0,   315,   316,  1132,
       0,   646,   647,   648,     0,     0,     0,     0,     0,     0,
       0,   317,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,    44,    45,     0,     0,     0,     0,     0,
       0,   326,   327,   328,     0,     0,   329,     0,   330,   649,
       0,     0,     0,   258,     0,   650,   331,   332,     0,   333,
     334,   335,   336,   306,     0,     1,   307,   107,   308,     0,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
       0,     0,     0,     0,   312,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   315,   316,   306,
       0,     1,   307,   107,   308,     0,   309,   310,     0,     0,
       0,   317,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,     0,     0,     0,     2,     0,     0,     0,
       0,   326,   327,   328,     0,     0,   329,  1167,   330,     0,
       0,  1736,     0,     0,     0,  1883,   331,   332,     0,   333,
     334,   335,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,     0,     0,     0,     0,
     312,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   315,   316,  2015,     0,     1,   307,   107,
     308,     0,   309,   310,     0,     0,     0,   317,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,     0,
       0,     0,     2,     0,     0,     0,     0,   326,   327,   328,
       0,     0,   329,  1167,   330,     0,     0,  1736,     0,     0,
       0,  1887,   331,   332,     0,   333,   334,   335,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,     0,     0,     0,     0,   312,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   315,
     316,   306,     0,     1,   307,   107,   308,     0,   309,   310,
       0,     0,     0,   317,     0,     0,     0,   318,   319,   320,
     321,   322,   323,   324,   325,     0,     0,     0,     2,     0,
       0,     0,     0,   326,   327,   328,     0,     0,   329,  1167,
     330,  1866,     0,  1168,     0,     0,     0,     0,   331,   332,
       0,   333,   334,   335,   336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,     0,     0,
       0,     0,   312,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   315,   316,   306,     0,     1,
     307,   107,   308,     0,   309,   310,     0,     0,     0,   317,
       0,     0,     0,   318,   319,   320,   321,   322,   323,   324,
     325,     0,     0,     0,     2,     0,     0,     0,     0,   326,
     327,   328,     0,     0,   329,     0,   330,     0,     0,  2069,
    2070,  1023,     0,     0,   331,   332,     0,   333,   334,   335,
     336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,     0,     0,     0,     0,   312,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   315,   316,   306,     0,     1,   307,   107,   308,     0,
     309,   310,     0,     0,     0,   317,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
       2,     0,     0,     0,     0,   326,   327,   328,     0,     0,
     329,  2081,   330,  2082,     0,  1163,     0,     0,     0,     0,
     331,   332,     0,   333,   334,   335,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
       0,     0,     0,     0,   312,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   315,   316,   306,
       0,     1,   307,   107,   308,     0,   309,   310,     0,     0,
       0,   317,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,     0,     0,     0,     2,     0,     0,     0,
       0,   326,   327,   328,     0,     0,   329,  1167,   330,  2080,
       0,  1168,     0,     0,     0,     0,   331,   332,     0,   333,
     334,   335,   336,     0,     0,   306,     0,     1,   307,   107,
     308,     0,   309,   310,   311,     0,     0,     0,     0,     0,
     312,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   315,   316,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,     0,
       0,     0,     0,     0,     0,     0,     0,   326,   327,   328,
     311,     0,   329,     0,   330,     0,   312,   313,   314,   750,
       0,     0,   331,   332,   751,   333,   334,   335,   336,   315,
     316,   306,     0,     1,   307,   107,   308,     0,   309,   310,
       0,     0,     0,   317,     0,     0,     0,   318,   319,   320,
     321,   322,   323,   324,   325,     0,     0,     0,     2,     0,
       0,     0,     0,   326,   327,   328,     0,     0,   329,     0,
     330,  1162,     0,  1163,     0,     0,     0,     0,   331,   332,
       0,   333,   334,   335,   336,     0,     0,   306,     0,     1,
     307,   107,   308,     0,   309,   310,   311,     0,     0,     0,
       0,     0,   312,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   315,   316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
       0,     0,     0,   318,   319,   320,   321,   322,   323,   324,
     325,     0,     0,     0,     0,     0,     0,     0,     0,   326,
     327,   328,   311,     0,   329,  1273,   330,     0,   312,   313,
     314,   750,     0,     0,   331,   332,     0,   333,   334,   335,
     336,   315,   316,   306,     0,     1,   307,   107,   308,     0,
     309,   310,     0,     0,     0,   317,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
       2,     0,     0,     0,     0,   326,   327,   328,     0,     0,
     329,  1340,   330,     0,     0,     0,     0,   750,     0,     0,
     331,   332,     0,   333,   334,   335,   336,     0,     0,   306,
       0,     1,   307,   107,   308,     0,   309,   310,   311,     0,
       0,     0,     0,     0,   312,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   315,   316,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,     0,     0,     0,     0,     0,     0,     0,
       0,   326,   327,   328,   311,     0,   329,     0,   330,  1143,
     312,   313,   314,   750,     0,     0,   331,   332,     0,   333,
     334,   335,   336,   315,   316,  1622,     0,     1,   307,   107,
     308,     0,   309,   310,     0,     0,     0,   317,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,     0,
       0,     0,     2,     0,     0,     0,     0,   326,   327,   328,
       0,     0,   329,  1167,   330,     0,     0,  1168,     0,     0,
       0,     0,   331,   332,     0,   333,   334,   335,   336,     0,
       0,   306,     0,     1,   307,   107,   308,     0,   309,   310,
     311,     0,     0,     0,     0,     0,   312,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   315,
     316,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,     0,     0,     0,   318,   319,   320,
     321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
       0,     0,     0,   326,   327,   328,   311,     0,   329,  1623,
     330,  1624,   312,   313,   314,     0,     0,     0,   331,   332,
       0,   333,   334,   335,   336,   315,   316,   306,     0,     1,
     307,   107,   308,     0,   309,   310,     0,     0,     0,   317,
       0,     0,     0,   318,   319,   320,   321,   322,   323,   324,
     325,     0,     0,     0,     2,     0,     0,     0,     0,   326,
     327,   328,     0,     0,   329,     0,   330,  1632,     0,  1163,
       0,     0,     0,     0,   331,   332,     0,   333,   334,   335,
     336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,     0,     0,     0,     0,   312,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   315,   316,   306,     0,     1,   307,   107,   308,     0,
     309,   310,     0,     0,     0,   317,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
       2,     0,     0,     0,     0,   326,   327,   328,     0,     0,
     329,  1702,   330,     0,     0,  1163,     0,     0,     0,     0,
     331,   332,     0,   333,   334,   335,   336,     0,     0,     0,
       0,     0,   306,     0,     1,   307,   107,   308,   311,   309,
     310,     0,     0,     0,   312,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   315,   316,     2,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,     0,     0,     0,     0,     0,     0,     0,
       0,   326,   327,   328,     0,     0,   329,   311,   330,     0,
       0,  1163,     0,   312,   313,   314,   331,   332,  1730,   333,
     334,   335,   336,     0,     0,     0,   315,   316,   306,     0,
       1,   307,   107,   308,     0,   309,   310,     0,     0,     0,
     317,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,     0,     0,     0,     2,     0,     0,     0,     0,
     326,   327,   328,     0,     0,   329,     0,   330,     0,     0,
    1733,     0,     0,     0,  1734,   331,   332,     0,   333,   334,
     335,   336,     0,     0,     0,     0,     0,   306,     0,     1,
     307,   107,   308,   311,   309,   310,     0,     0,     0,   312,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,   316,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   317,     0,     0,     0,
     318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
       0,     0,     0,     0,     0,     0,   326,   327,   328,     0,
       0,   329,   311,   330,     0,     0,  1163,     0,   312,   313,
     314,   331,   332,  1740,   333,   334,   335,   336,     0,     0,
       0,   315,   316,   306,     0,     1,   307,   107,   308,     0,
     309,   310,     0,     0,     0,   317,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
       2,     0,     0,     0,     0,   326,   327,   328,     0,     0,
     329,     0,   330,     0,     0,  1733,     0,     0,     0,  1742,
     331,   332,     0,   333,   334,   335,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
       0,     0,     0,     0,   312,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   315,   316,   306,
       0,     1,   307,   107,   308,     0,   309,   310,     0,     0,
       0,   317,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,     0,     0,     0,     2,     0,     0,     0,
       0,   326,   327,   328,     0,     0,   329,  1841,   330,     0,
       0,  1163,     0,     0,     0,     0,   331,   332,     0,   333,
     334,   335,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,     0,     0,     0,     0,
     312,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   315,   316,   306,     0,     1,   307,   107,
     308,     0,   309,   310,     0,     0,     0,   317,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,     0,
       0,     0,     2,     0,     0,     0,     0,   326,   327,   328,
       0,     0,   329,  1843,   330,     0,     0,  1163,     0,     0,
       0,     0,   331,   332,     0,   333,   334,   335,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,     0,     0,     0,     0,   312,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   315,
     316,   306,     0,     1,   307,   107,   308,     0,   309,   310,
       0,     0,     0,   317,     0,     0,     0,   318,   319,   320,
     321,   322,   323,   324,   325,     0,     0,     0,     2,     0,
       0,     0,     0,   326,   327,   328,     0,     0,   329,  1844,
     330,     0,     0,  1168,     0,     0,     0,     0,   331,   332,
       0,   333,   334,   335,   336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,     0,     0,
       0,     0,   312,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   315,   316,   306,     0,     1,
     307,   107,   308,     0,   309,   310,     0,     0,     0,   317,
       0,     0,     0,   318,   319,   320,   321,   322,   323,   324,
     325,     0,     0,     0,     2,     0,     0,     0,     0,   326,
     327,   328,     0,     0,   329,  1847,   330,     0,     0,  1163,
       0,     0,     0,     0,   331,   332,     0,   333,   334,   335,
     336,     0,     0,   306,     0,     1,   307,   107,   308,     0,
     309,   310,   311,     0,     0,     0,     0,     0,   312,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   315,   316,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
       0,     0,     0,     0,     0,   326,   327,   328,   311,     0,
     329,  1623,   330,  1624,   312,   313,   314,     0,     0,     0,
     331,   332,     0,   333,   334,   335,   336,   315,   316,  1867,
       0,     1,   307,   107,   308,     0,   309,   310,     0,     0,
       0,   317,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,     0,     0,     0,     2,     0,     0,     0,
       0,   326,   327,   328,     0,     0,   329,     0,   330,  1864,
       0,  1163,     0,     0,     0,     0,   331,   332,     0,   333,
     334,   335,   336,     0,     0,   306,     0,     1,   307,   107,
     308,     0,   309,   310,   311,     0,     0,     0,     0,     0,
     312,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   315,   316,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,     0,
       0,     0,     0,     0,     0,     0,     0,   326,   327,   328,
     311,     0,   329,  1868,   330,  1624,   312,   313,   314,     0,
       0,     0,   331,   332,     0,   333,   334,   335,   336,   315,
     316,   306,     0,     1,   307,   107,   308,     0,   309,   310,
       0,     0,     0,   317,     0,     0,     0,   318,   319,   320,
     321,   322,   323,   324,   325,     0,     0,     0,     2,     0,
       0,     0,     0,   326,   327,   328,     0,     0,   329,     0,
     330,     0,     0,  1733,     0,     0,     0,  1881,   331,   332,
       0,   333,   334,   335,   336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,     0,     0,
       0,     0,   312,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   315,   316,   306,     0,     1,
     307,   107,   308,     0,   309,   310,     0,     0,     0,   317,
       0,     0,     0,   318,   319,   320,   321,   322,   323,   324,
     325,     0,     0,     0,     2,     0,     0,     0,     0,   326,
     327,   328,     0,     0,   329,     0,   330,     0,     0,  1733,
       0,     0,     0,  1885,   331,   332,     0,   333,   334,   335,
     336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,     0,     0,     0,     0,   312,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   315,   316,   306,     0,     1,   307,   107,   308,     0,
     309,   310,     0,     0,     0,   317,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
       2,     0,     0,     0,     0,   326,   327,   328,     0,     0,
     329,  2000,   330,     0,     0,  1163,     0,     0,     0,     0,
     331,   332,     0,   333,   334,   335,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
       0,     0,     0,     0,   312,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   315,   316,   306,
       0,     1,   307,   107,   308,     0,   309,   310,     0,     0,
       0,   317,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,     0,     0,     0,     2,     0,     0,     0,
       0,   326,   327,   328,     0,     0,   329,  1842,   330,     0,
       0,  1168,     0,     0,     0,     0,   331,   332,     0,   333,
     334,   335,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,     0,     0,     0,     0,
     312,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   315,   316,   306,     0,     1,   307,   107,
     308,     0,   309,   310,     0,     0,     0,   317,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,     0,
       0,     0,     2,     0,     0,     0,     0,   326,   327,   328,
       0,     0,   329,  2007,   330,     0,     0,  1163,     0,     0,
       0,     0,   331,   332,     0,   333,   334,   335,   336,     0,
       0,   306,     0,     1,   307,   107,   308,     0,   309,   310,
     311,     0,     0,     0,     0,     0,   312,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   315,
     316,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,     0,     0,     0,   318,   319,   320,
     321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
       0,     0,     0,   326,   327,   328,   311,     0,   329,  1868,
     330,  1624,   312,   313,   314,     0,     0,     0,   331,   332,
       0,   333,   334,   335,   336,   315,   316,   306,     0,     1,
     307,   107,   308,     0,   309,   310,     0,     0,     0,   317,
       0,     0,     0,   318,   319,   320,   321,   322,   323,   324,
     325,     0,     0,     0,     2,     0,     0,     0,     0,   326,
     327,   328,     0,     0,   329,  2085,   330,     0,     0,  1163,
       0,     0,     0,     0,   331,   332,     0,   333,   334,   335,
     336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,     0,     0,     0,     0,   312,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   315,   316,   306,     0,     1,   307,   107,   308,     0,
     309,   310,     0,     0,     0,   317,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
       2,     0,     0,     0,     0,   326,   327,   328,     0,     0,
     329,     0,   330,     0,     0,     0,  2114,  1023,     0,     0,
     331,   332,     0,   333,   334,   335,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
       0,     0,     0,     0,   312,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   315,   316,   306,
       0,     1,   307,   107,   308,     0,   309,   310,     0,     0,
       0,   317,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,     0,     0,     0,     2,     0,     0,     0,
       0,   326,   327,   328,     0,     0,   329,  2117,   330,     0,
       0,  1163,     0,     0,     0,     0,   331,   332,     0,   333,
     334,   335,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,     0,     0,     0,     0,
     312,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   315,   316,   306,     0,     1,   307,   107,
     308,     0,   309,   310,     0,     0,     0,   317,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,     0,
       0,     0,     2,     0,     0,     0,     0,   326,   327,   328,
       0,     0,   329,  2118,   330,     0,     0,  1163,     0,     0,
       0,     0,   331,   332,     0,   333,   334,   335,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,     0,     0,     0,     0,   312,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   315,
     316,   306,     0,     1,   307,   107,   308,     0,   309,   310,
       0,     0,     0,   317,     0,     0,     0,   318,   319,   320,
     321,   322,   323,   324,   325,     0,     0,     0,     2,     0,
       0,     0,     0,   326,   327,   328,     0,     0,   329,  2146,
     330,     0,     0,  1163,     0,     0,     0,     0,   331,   332,
       0,   333,   334,   335,   336,     0,     0,   306,     0,     1,
     307,   107,   308,     0,   309,   310,   311,     0,     0,     0,
       0,     0,   312,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   315,   316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
       0,     0,     0,   318,   319,   320,   321,   322,   323,   324,
     325,     0,     0,     0,     0,     0,     0,     0,     0,   326,
     327,   328,   311,     0,   329,     0,   330,     0,   312,   313,
     314,     0,     0,     0,   331,   332,   554,   333,   334,   335,
     336,   315,   316,   306,     0,     1,   307,   107,   308,     0,
     309,   310,     0,     0,     0,   317,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
       2,     0,     0,     0,     0,   326,   327,   328,     0,     0,
     329,     0,   330,     0,     0,     0,     0,   750,     0,     0,
     331,   332,     0,   333,   334,   335,   336,     0,     0,   306,
       0,     1,   307,   107,   308,     0,   309,   310,   311,     0,
       0,     0,     0,     0,   312,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   315,   316,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,     0,     0,     0,     0,     0,     0,     0,
       0,   326,   327,   328,   311,     0,   329,     0,   330,     0,
     312,   313,   314,     0,     0,     0,   331,   332,   846,   333,
     334,   335,   336,   315,   316,   306,     0,     1,   307,   107,
     308,     0,   309,   310,     0,     0,     0,   317,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,     0,
       0,     0,     2,     0,     0,     0,     0,   326,   327,   328,
       0,     0,   329,     0,   330,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   850,   333,   334,   335,   336,     0,
       0,   306,     0,     1,   307,   107,   308,     0,   309,   310,
     311,     0,     0,     0,     0,     0,   312,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   315,
     316,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,     0,     0,     0,   318,   319,   320,
     321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
       0,     0,     0,   326,   327,   328,   311,     0,   329,     0,
     330,     0,   312,   313,   314,  1023,     0,     0,   331,   332,
       0,   333,   334,   335,   336,   315,   316,   306,     0,     1,
     307,   107,   308,     0,   309,   310,     0,     0,     0,   317,
       0,     0,     0,   318,   319,   320,   321,   322,   323,   324,
     325,     0,     0,     0,     2,     0,     0,     0,     0,   326,
     327,   328,     0,     0,   329,     0,   330,     0,     0,     0,
       0,     0,     0,     0,   331,   332,  1064,   333,   334,   335,
     336,     0,     0,   306,     0,     1,   307,   107,   308,     0,
     309,   310,   311,     0,     0,     0,     0,     0,   312,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   315,   316,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
       0,     0,     0,     0,     0,   326,   327,   328,   311,     0,
     329,     0,   330,     0,   312,   313,   314,     0,     0,  1116,
     331,   332,     0,   333,   334,   335,   336,   315,   316,  1467,
       0,     1,   307,   107,   308,     0,   309,   310,     0,     0,
       0,   317,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,     0,     0,     0,     2,     0,     0,     0,
       0,   326,   327,   328,     0,     0,   329,   739,   330,     0,
       0,     0,     0,     0,     0,     0,   331,   332,     0,   333,
     334,   335,   336,     0,     0,   306,     0,     1,   307,   107,
     308,     0,   309,   310,   311,     0,     0,     0,     0,     0,
     312,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   315,   316,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,     0,
       0,     0,     0,     0,     0,     0,     0,   326,   327,   328,
     311,     0,   329,     0,   330,     0,   312,   313,   314,   750,
       0,     0,   331,   332,     0,   333,   334,   335,   336,   315,
     316,   306,     0,     1,   307,   107,   308,     0,   309,   310,
       0,     0,     0,   317,     0,     0,     0,   318,   319,   320,
     321,   322,   323,   324,   325,     0,     0,     0,     2,     0,
       0,     0,     0,   326,   327,   328,     0,     0,   329,     0,
     330,     0,     0,     0,     0,     0,     0,     0,   331,   332,
    1570,   333,   334,   335,   336,     0,     0,   306,     0,     1,
     307,   107,   308,     0,   309,   310,   311,     0,     0,     0,
       0,     0,   312,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   315,   316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
       0,     0,     0,   318,   319,   320,   321,   322,   323,   324,
     325,     0,     0,     0,     0,     0,     0,     0,     0,   326,
     327,   328,   311,     0,   329,  1606,   330,     0,   312,   313,
     314,     0,     0,     0,   331,   332,     0,   333,   334,   335,
     336,   315,   316,   306,     0,     1,   307,   107,   308,     0,
     309,   310,     0,     0,     0,   317,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
       2,     0,     0,     0,     0,   326,   327,   328,     0,     0,
     329,     0,   330,     0,     0,     0,     0,     0,     0,  1609,
     331,   332,     0,   333,   334,   335,   336,     0,     0,  1801,
       0,     1,   307,   107,   308,     0,   309,   310,   311,     0,
       0,     0,     0,     0,   312,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   315,   316,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,     0,     0,     0,     0,     0,     0,     0,
       0,   326,   327,   328,   311,     0,   329,     0,   330,     0,
     312,   313,   314,  1800,     0,     0,   331,   332,     0,   333,
     334,   335,   336,   315,   316,  1804,     0,     1,   307,   107,
     308,     0,   309,   310,     0,     0,     0,   317,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,     0,
       0,     0,     2,     0,     0,     0,     0,   326,   327,   328,
       0,     0,   329,     0,   330,     0,     0,     0,     0,   750,
       0,     0,   331,   332,     0,   333,   334,   335,   336,     0,
       0,  1808,     0,     1,   307,   107,   308,     0,   309,   310,
     311,     0,     0,     0,     0,     0,   312,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   315,
     316,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,     0,     0,     0,   318,   319,   320,
     321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
       0,     0,     0,   326,   327,   328,   311,     0,   329,     0,
     330,     0,   312,   313,   314,   750,     0,     0,   331,   332,
       0,   333,   334,   335,   336,   315,   316,   306,     0,     1,
     307,   107,   308,     0,   309,   310,     0,     0,     0,   317,
       0,     0,     0,   318,   319,   320,   321,   322,   323,   324,
     325,     0,     0,     0,     2,     0,     0,     0,     0,   326,
     327,   328,     0,     0,   329,     0,   330,     0,     0,     0,
       0,   750,     0,     0,   331,   332,     0,   333,   334,   335,
     336,     0,     0,   306,     0,     1,   307,   107,   308,     0,
     309,   310,   311,     0,     0,     0,     0,     0,   312,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   315,   316,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
       0,     0,     0,     0,     0,   326,   327,   328,   311,     0,
     329,  1854,   330,     0,   312,   313,   314,     0,     0,     0,
     331,   332,     0,   333,   334,   335,   336,   315,   316,   306,
       0,     1,   307,   107,   308,     0,   309,   310,     0,     0,
       0,   317,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,     0,     0,     0,     2,     0,     0,     0,
       0,   326,   327,   328,     0,     0,  1914,     0,   330,     0,
       0,     0,     0,  1800,     0,     0,   331,   332,     0,   333,
     334,   335,   336,     0,     0,   306,     0,     1,   307,   107,
     308,     0,   309,   310,   311,     0,     0,     0,     0,     0,
     312,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   315,   316,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,     0,
       0,     0,     0,     0,     0,     0,     0,   326,   327,   328,
     311,     0,   329,  2016,   330,     0,   312,   313,   314,     0,
       0,     0,   331,   332,     0,   333,   334,   335,   336,   315,
     316,   306,     0,     1,   307,   107,   308,     0,   309,   310,
       0,     0,     0,   317,     0,     0,     0,   318,   319,   320,
     321,   322,   323,   324,   325,     0,     0,     0,     2,     0,
       0,     0,     0,   326,   327,   328,     0,     0,   329,  2076,
     330,     0,     0,     0,     0,     0,     0,     0,   331,   332,
       0,   333,   334,   335,   336,     0,     0,   306,     0,     1,
     307,   107,   308,     0,   309,   310,   311,     0,     0,     0,
       0,     0,   312,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   315,   316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
       0,     0,     0,   318,   319,   320,   321,   322,   323,   324,
     325,     0,     0,     0,     0,     0,     0,     0,     0,   326,
     327,   328,   311,     0,   329,     0,   330,     0,   312,   313,
     314,     0,     0,     0,   331,   332,     0,   333,   334,   335,
     336,   315,   316,   306,     0,     1,   307,   107,   308,     0,
     309,   310,     0,     0,     0,   317,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
       2,     0,     0,     0,     0,   326,   327,   328,     0,     0,
     709,     0,   330,     0,     0,     0,     0,     0,     0,     0,
     331,   332,     0,   333,   334,   335,   336,     0,     0,   306,
       0,     1,   307,   107,   308,     0,   309,   310,   311,     0,
       0,     0,     0,     0,   312,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   315,   316,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,     0,     0,     0,     0,     0,     0,     0,
       0,   326,   327,   328,   311,     0,   712,     0,   330,     0,
     312,   313,   314,     0,     0,     0,   331,   332,     0,   333,
     334,   335,   336,   315,   316,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,     0,
       0,  -897,   589,     0,  -897,  -897,  -897,   326,   327,   328,
       0,     0,   735,     0,   330,     0,     0,     0,     0,     0,
       0,     0,   331,   332,     0,   333,   334,   335,   336,  -897,
    -897,  -897,  -897,  -897,  -897,  -897,  -897,  -897,  -897,  -897,
    -897,  -897,  -897,  -897,  -897,  -897,  -897,  -897,  -897,  -897,
    -897,  -897,  -897,     0,     0,  -897,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -897,  -897,     0,
    -897,     0,     0,  -897,  -897,     0,  -897,  -897,     0,     0,
    -897,  -897,  -897,  -897,  -897,  -897,     0,  -897,  -897,  -897,
    -897,     0,     0,  -897,  -897,  -897,  -897,     0,  -897,     0,
    -897,  -897,  -897,     0,  -897,  -897,  -897,  -897,  -897,  -897,
    -897,     0,  -897,  -897,  -897,  -897,  -897,  -897,  -897,  -897,
    -897,     0,  -897,     0,     0,  -897,   590,  -897,  -897,     0,
     591,  -897,     0,     0,     0,  -897,  -897,  -189,   913,     0,
    -189,  -189,  -189,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,     0,
       0,  -189,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -189,  -189,     0,  -189,     0,     0,  -189,
    -189,     0,  -189,  -189,     0,     0,  -189,  -189,  -189,  -189,
    -189,  -189,     0,  -189,  -189,  -189,  -189,     0,     0,  -189,
    -189,  -189,  -189,     0,  -189,     0,  -189,  -189,  -189,     0,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,     0,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,     0,  -189,     0,
       0,  -189,     0,  -189,   914,     0,   915,  -189,     0,     0,
       0,  -189,  -189,  -253,   927,     0,     1,   307,   107,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   203,   204,   205,   206,   207,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,     0,     0,  -253,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
      28,     0,   429,     0,     0,   312,   313,     0,    29,    30,
       0,     0,   430,    33,   431,   432,    36,    37,     0,   411,
      39,    40,   433,     0,     0,   434,   435,   436,   437,     0,
     438,     0,   439,   440,    41,     0,   318,   319,   320,   321,
     322,   323,   324,     0,    44,    45,    46,    47,    48,    49,
     209,   210,   326,     0,    52,     0,     0,   441,     0,   442,
     443,  -251,   930,  -253,     1,   307,   107,   331,   332,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,     0,     0,  -251,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,    28,     0,
     429,     0,     0,   312,   313,     0,    29,    30,     0,     0,
     430,    33,   431,   432,    36,    37,     0,   411,    39,    40,
     433,     0,     0,   434,   435,   436,   437,     0,   438,     0,
     439,   440,    41,     0,   318,   319,   320,   321,   322,   323,
     324,     0,    44,    45,    46,    47,    48,    49,   209,   210,
     326,     0,    52,     0,     0,   441,     0,   442,   443,  -254,
     927,  -251,     1,   307,   107,   331,   332,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   203,   204,
     205,   206,   207,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,     0,     0,  -254,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,    28,     0,   429,     0,
       0,   312,   313,     0,    29,    30,     0,     0,   430,    33,
     431,   432,    36,    37,     0,   411,    39,    40,   433,     0,
       0,   434,   435,   436,   437,     0,   438,     0,   439,   440,
      41,     0,   318,   319,   320,   321,   322,   323,   324,     0,
      44,    45,    46,    47,    48,    49,   209,   210,   326,     0,
      52,     0,     0,   441,     0,   442,   443,  -252,   930,  -254,
       1,   307,   107,   331,   332,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   203,   204,   205,   206,
     207,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,     0,
       0,  -252,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,    28,     0,   429,     0,     0,   312,
     313,     0,    29,    30,     0,     0,   430,    33,   431,   432,
      36,    37,     0,   411,    39,    40,   433,     0,     0,   434,
     435,   436,   437,     0,   438,     0,   439,   440,    41,     0,
     318,   319,   320,   321,   322,   323,   324,     0,    44,    45,
      46,    47,    48,    49,   209,   210,   326,     0,    52,     0,
       0,   441,     0,   442,   443,     0,   428,  -252,     1,   307,
     107,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   203,   204,   205,   206,   207,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,    28,     0,   429,     0,     0,   312,   313,     0,
      29,    30,     0,     0,   430,    33,   431,   432,    36,    37,
       0,   411,    39,    40,   433,     0,     0,   434,   435,   436,
     437,     0,   438,     0,   439,   440,    41,     0,   318,   319,
     320,   321,   322,   323,   324,     0,    44,    45,    46,    47,
      48,    49,   209,   210,   326,     0,    52,     0,     0,   441,
       0,   442,   443,     0,   494,   444,     1,   307,   107,   331,
     332,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   203,   204,   205,   206,   207,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
      28,     0,   429,     0,     0,   312,   313,     0,    29,    30,
       0,     0,   430,    33,   431,   432,    36,    37,     0,   411,
      39,    40,   433,     0,     0,   434,   435,   436,   437,     0,
     438,     0,   439,   440,    41,     0,   318,   319,   320,   321,
     322,   323,   324,     0,    44,    45,    46,    47,    48,    49,
     209,   210,   326,     0,    52,     0,     0,   441,     0,   442,
     443,     0,   516,   495,     1,   307,   107,   331,   332,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,    28,     0,
     429,     0,     0,   312,   313,     0,    29,    30,     0,     0,
     430,    33,   431,   432,    36,    37,     0,   411,    39,    40,
     433,     0,     0,   434,   435,   436,   437,     0,   438,     0,
     439,   440,    41,     0,   318,   319,   320,   321,   322,   323,
     324,     0,    44,    45,    46,    47,    48,    49,   209,   210,
     326,     0,    52,     0,     0,   441,     0,   442,   443,     0,
     521,   517,     1,   307,   107,   331,   332,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   203,   204,
     205,   206,   207,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,    28,     0,   429,     0,
       0,   312,   313,     0,    29,    30,     0,     0,   430,    33,
     431,   432,    36,    37,     0,   411,    39,    40,   433,     0,
       0,   434,   435,   436,   437,     0,   438,     0,   439,   440,
      41,     0,   318,   319,   320,   321,   322,   323,   324,     0,
      44,    45,    46,    47,    48,    49,   209,   210,   326,     0,
      52,     0,     0,   441,     0,   442,   443,     0,   525,   522,
       1,   307,   107,   331,   332,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   203,   204,   205,   206,
     207,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,    28,     0,   429,     0,     0,   312,
     313,     0,    29,    30,     0,     0,   430,    33,   431,   432,
      36,    37,     0,   411,    39,    40,   433,     0,     0,   434,
     435,   436,   437,     0,   438,     0,   439,   440,    41,     0,
     318,   319,   320,   321,   322,   323,   324,     0,    44,    45,
      46,    47,    48,    49,   209,   210,   326,     0,    52,     0,
       0,   441,     0,   442,   443,     0,   927,   526,     1,   307,
     107,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   203,   204,   205,   206,   207,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,    28,     0,   429,     0,     0,   312,   313,     0,
      29,    30,     0,     0,   430,    33,   431,   432,    36,    37,
       0,   411,    39,    40,   433,     0,     0,   434,   435,   436,
     437,     0,   438,     0,   439,   440,    41,     0,   318,   319,
     320,   321,   322,   323,   324,     0,    44,    45,    46,    47,
      48,    49,   209,   210,   326,     0,    52,     0,     0,   441,
       0,   442,   443,     0,   930,  -752,     1,   307,   107,   331,
     332,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   203,   204,   205,   206,   207,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
      28,     0,   429,     0,     0,   312,   313,     0,    29,    30,
       0,     0,   430,    33,   431,   432,    36,    37,     0,   411,
      39,    40,   433,     0,     0,   434,   435,   436,   437,     0,
     438,     0,   439,   440,    41,     0,   318,   319,   320,   321,
     322,   323,   324,     0,    44,    45,    46,    47,    48,    49,
     209,   210,   326,     0,    52,     0,     0,   441,     0,   442,
     443,     0,   927,  -753,     1,   307,   107,   331,   332,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,    28,     0,
     429,     0,     0,   312,   313,     0,    29,    30,     0,     0,
     430,    33,   431,   432,    36,    37,     0,   411,    39,    40,
     433,     0,     0,   434,   435,   436,   437,     0,   438,     0,
     439,   440,    41,     0,   318,   319,   320,   321,   322,   323,
     324,     0,    44,    45,    46,    47,    48,    49,   209,   210,
     326,     0,    52,     0,     0,   441,     0,   442,   443,     0,
     930,  -749,     1,   307,   107,   331,   332,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   203,   204,
     205,   206,   207,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,    28,     0,   429,     0,
       0,   312,   313,     0,    29,    30,     0,     0,   430,    33,
     431,   432,    36,    37,     0,   411,    39,    40,   433,     0,
       0,   434,   435,   436,   437,     0,   438,     0,   439,   440,
      41,     0,   318,   319,   320,   321,   322,   323,   324,     0,
      44,    45,    46,    47,    48,    49,   209,   210,   326,     0,
      52,     0,     0,   441,     0,   442,   443,     0,   927,  -750,
       1,   307,   107,   331,   332,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   203,   204,   205,   206,
     207,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,    28,     0,   429,     0,     0,   312,
     313,     0,    29,    30,     0,     0,   430,    33,   431,   432,
      36,    37,     0,   411,    39,    40,   433,     0,     0,   434,
     435,   436,   437,     0,   438,     0,   439,   440,    41,     0,
     318,   319,   320,   321,   322,   323,   324,     0,    44,    45,
      46,    47,    48,    49,   209,   210,   326,     0,    52,     0,
       0,   441,     0,   442,   443,     0,   930,  -755,     1,   307,
     107,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   203,   204,   205,   206,   207,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,    28,     0,   429,     0,     0,   312,   313,     0,
      29,    30,     0,     0,   430,    33,   431,   432,    36,    37,
       0,   411,    39,    40,   433,     0,     0,   434,   435,   436,
     437,     0,   438,     0,   439,   440,    41,     0,   318,   319,
     320,   321,   322,   323,   324,     0,    44,    45,    46,    47,
      48,    49,   209,   210,   326,     0,    52,     0,     0,   441,
       0,   442,   443,     0,  1046,  -756,     1,   307,   107,   331,
     332,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   203,   204,   205,   206,   207,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
      28,     0,   429,     0,     0,   312,   313,     0,    29,    30,
       0,     0,   430,    33,   431,   432,    36,    37,     0,   411,
      39,    40,   433,     0,     0,   434,   435,   436,   437,     0,
     438,     0,   439,   440,    41,     0,   318,   319,   320,   321,
     322,   323,   324,     0,    44,    45,    46,    47,    48,    49,
     209,   210,   326,     0,    52,     0,     0,   441,     0,   442,
     443,     0,  1050,  1047,     1,   307,   107,   331,   332,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,    28,     0,
     429,     0,     0,   312,   313,     0,    29,    30,     0,     0,
     430,    33,   431,   432,    36,    37,     0,   411,    39,    40,
     433,     0,     0,   434,   435,   436,   437,     0,   438,     0,
     439,   440,    41,     0,   318,   319,   320,   321,   322,   323,
     324,     0,    44,    45,    46,    47,    48,    49,   209,   210,
     326,     0,    52,     0,     0,   441,     0,   442,   443,     0,
     306,  1051,     1,   307,   107,   331,   332,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   203,   204,
     205,   206,   207,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,    28,     0,   429,     0,
       0,   312,   313,     0,    29,    30,     0,     0,   430,    33,
     431,   432,    36,    37,     0,   411,    39,    40,   433,     0,
       0,   434,   435,   436,   437,     0,   438,     0,   439,   440,
      41,     0,   318,   319,   320,   321,   322,   323,   324,     0,
      44,    45,    46,    47,    48,    49,   209,   210,   326,     0,
      52,     0,     0,   441,     0,   442,   443,     0,   927,  -649,
       1,   307,   107,   331,   332,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   203,   204,   205,   206,
     207,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,    28,     0,   429,     0,     0,   312,
     313,     0,    29,    30,     0,     0,   430,    33,   431,   432,
      36,    37,     0,   411,    39,    40,   433,     0,     0,   434,
     435,   436,   437,     0,   438,     0,   439,   440,    41,     0,
     318,   319,   320,   321,   322,   323,   324,     0,    44,    45,
      46,    47,    48,    49,   209,   210,   326,     0,    52,     0,
       0,   441,     0,   442,   443,     0,   930,  -732,     1,   307,
     107,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   203,   204,   205,   206,   207,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,    28,     0,   429,     0,     0,   312,   313,     0,
      29,    30,     0,     0,   430,    33,   431,   432,    36,    37,
       0,   411,    39,    40,   433,     0,     0,   434,   435,   436,
     437,     0,   438,     0,   439,   440,    41,     0,   318,   319,
     320,   321,   322,   323,   324,     0,    44,    45,    46,    47,
      48,    49,   209,   210,   326,     0,    52,     0,     0,   441,
       0,   442,   443,     0,   927,  -733,     1,   307,   107,   331,
     332,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   203,   204,   205,   206,   207,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
      28,     0,   429,     0,     0,   312,   313,     0,    29,    30,
       0,     0,   430,    33,   431,   432,    36,    37,     0,   411,
      39,    40,   433,     0,     0,   434,   435,   436,   437,     0,
     438,     0,   439,   440,    41,     0,   318,   319,   320,   321,
     322,   323,   324,     0,    44,    45,    46,    47,    48,    49,
     209,   210,   326,     0,    52,     0,     0,   441,     0,   442,
     443,     0,   930,  -735,     1,   307,   107,   331,   332,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,    28,     0,
     429,     0,     0,   312,   313,     0,    29,    30,     0,     0,
     430,    33,   431,   432,    36,    37,     0,   411,    39,    40,
     433,     0,     0,   434,   435,   436,   437,     0,   438,     0,
     439,   440,    41,     0,   318,   319,   320,   321,   322,   323,
     324,     0,    44,    45,    46,    47,    48,    49,   209,   210,
     326,     0,    52,     0,     0,   441,     0,   442,   443,     0,
    1552,  -736,     1,   307,   107,   331,   332,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   203,   204,
     205,   206,   207,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,    28,     0,   429,     0,
       0,   312,   313,     0,    29,    30,     0,     0,   430,    33,
     431,   432,    36,    37,     0,   411,    39,    40,   433,     0,
       0,   434,   435,   436,   437,     0,   438,     0,   439,   440,
      41,     0,   318,   319,   320,   321,   322,   323,   324,     0,
      44,    45,    46,    47,    48,    49,   209,   210,   326,     0,
      52,     0,     0,   441,     0,   442,   443,     0,   927,  1553,
       1,   307,   107,   331,   332,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   203,   204,   205,   206,
     207,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,    28,     0,   429,     0,     0,   312,
     313,     0,    29,    30,     0,     0,   430,    33,   431,   432,
      36,    37,     0,   411,    39,    40,   433,     0,     0,   434,
     435,   436,   437,     0,   438,     0,   439,   440,    41,     0,
     318,   319,   320,   321,   322,   323,   324,     0,    44,    45,
      46,    47,    48,    49,   209,   210,   326,     0,    52,     0,
       0,   441,     0,   442,   443,     0,   930,  -644,     1,   307,
     107,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   203,   204,   205,   206,   207,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,    28,     0,   429,     0,     0,   312,   313,     0,
      29,    30,     0,     0,   430,    33,   431,   432,    36,    37,
       0,   411,    39,    40,   433,     0,     0,   434,   435,   436,
     437,     0,   438,     0,   439,   440,    41,     0,   318,   319,
     320,   321,   322,   323,   324,     0,    44,    45,    46,    47,
      48,    49,   209,   210,   326,     0,    52,     0,     0,   441,
       0,   442,   443,     0,   927,  -645,     1,   307,   107,   331,
     332,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   203,   204,   205,   206,   207,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
      28,     0,   429,     0,     0,   312,   313,     0,    29,    30,
       0,     0,   430,    33,   431,   432,    36,    37,     0,   411,
      39,    40,   433,     0,     0,   434,   435,   436,   437,     0,
     438,     0,   439,   440,    41,     0,   318,   319,   320,   321,
     322,   323,   324,     0,    44,    45,    46,    47,    48,    49,
     209,   210,   326,     0,    52,     0,     0,   441,     0,   442,
     443,     0,   930,  -738,     1,   307,   107,   331,   332,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,    28,     0,
     429,     0,     0,   312,   313,     0,    29,    30,     0,     0,
     430,    33,   431,   432,    36,    37,     0,   411,    39,    40,
     433,     0,     0,   434,   435,   436,   437,     0,   438,     0,
     439,   440,    41,     0,   318,   319,   320,   321,   322,   323,
     324,     0,    44,    45,    46,    47,    48,    49,   209,   210,
     326,     0,    52,     0,     0,   441,     0,   442,   443,     0,
     306,  -739,     1,   307,   107,   331,   332,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   203,   204,
     205,   206,   207,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,    28,     0,   429,     0,
       0,   312,   313,     0,    29,    30,     0,     0,   430,    33,
     431,   432,    36,    37,     0,   411,    39,    40,   433,     0,
       0,   434,   435,   436,   437,     0,   438,     0,   439,   440,
      41,     0,   318,   319,   320,   321,   322,   323,   324,     0,
      44,    45,    46,    47,    48,    49,   209,   210,   326,     0,
      52,     0,     0,   441,     0,   442,   443,     0,   306,  -648,
       1,   307,   107,   331,   332,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   203,   204,   205,   206,
     207,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,    28,     0,   429,     0,     0,   312,
     313,     0,    29,    30,     0,     0,   430,    33,   431,   432,
      36,    37,     0,   411,    39,    40,   433,     0,     0,   434,
     435,   436,   437,     0,   438,     0,   439,   440,    41,     0,
     318,   319,   320,   321,   322,   323,   324,     0,    44,    45,
      46,    47,    48,    49,   209,   210,   326,     0,    52,     0,
       0,   441,     0,   442,   443,     0,   306,  -646,     1,   307,
     107,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   203,   204,   205,   206,   207,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,    28,     0,   429,     0,     0,   312,   313,     0,
      29,    30,     0,     0,   430,    33,   431,   432,    36,    37,
       0,   411,    39,    40,   433,     0,     0,   434,   435,   436,
     437,     0,   438,     0,   439,   440,    41,     0,   318,   319,
     320,   321,   322,   323,   324,     0,    44,    45,    46,    47,
      48,    49,   209,   210,   326,     0,    52,     0,     0,   441,
       0,   442,   443,     0,   306,  -624,     1,   307,   107,   331,
     332,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   203,   204,   205,   206,   207,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
      28,     0,   429,     0,     0,   312,   313,     0,    29,    30,
       0,     0,   430,    33,   431,   432,    36,    37,     0,   411,
      39,    40,   433,     0,     0,   434,   435,   436,   437,     0,
     438,     0,   439,   440,    41,     0,   318,   319,   320,   321,
     322,   323,   324,     0,    44,    45,    46,    47,    48,    49,
     209,   210,   326,     0,    52,     0,     0,   441,     0,   442,
     443,     0,   927,  -623,     1,   307,   107,   331,   332,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,    28,     0,
     429,     0,     0,   312,   313,     0,    29,    30,     0,     0,
     430,    33,   431,   432,    36,    37,     0,   411,    39,    40,
     433,     0,     0,   434,   435,   436,   437,     0,   438,     0,
     439,   440,    41,     0,   318,   319,   320,   321,   322,   323,
     324,     0,    44,    45,    46,    47,    48,    49,   209,   210,
     326,     0,    52,     0,     0,   441,     0,   442,   443,     0,
     930,  -637,     1,   307,   107,   331,   332,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   203,   204,
     205,   206,   207,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,    28,     0,   429,     0,
       0,   312,   313,     0,    29,    30,     0,     0,   430,    33,
     431,   432,    36,    37,     0,   411,    39,    40,   433,     0,
       0,   434,   435,   436,   437,     0,   438,     0,   439,   440,
      41,     0,   318,   319,   320,   321,   322,   323,   324,     0,
      44,    45,    46,    47,    48,    49,   209,   210,   326,     0,
      52,     0,     0,   441,     0,   442,   443,     0,   306,  -638,
       1,   307,   107,   331,   332,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   203,   204,   205,   206,
     207,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,    28,     0,   429,     0,     0,   312,
     313,     0,    29,    30,     0,     0,   430,    33,   431,   432,
      36,    37,     0,   411,    39,    40,   433,     0,     0,   434,
     435,   436,   437,     0,   438,     0,   439,   440,    41,     0,
     318,   319,   320,   321,   322,   323,   324,     0,    44,    45,
      46,    47,    48,    49,   209,   210,   326,     0,    52,     0,
       0,   441,     0,   442,   443,     0,   927,  -647,     1,   307,
     107,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   203,   204,   205,   206,   207,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,    28,     0,   429,     0,     0,   312,   313,     0,
      29,    30,     0,     0,   430,    33,   431,   432,    36,    37,
       0,   411,    39,    40,   433,     0,     0,   434,   435,   436,
     437,     0,   438,     0,   439,   440,    41,     0,   318,   319,
     320,   321,   322,   323,   324,     0,    44,    45,    46,    47,
      48,    49,   209,   210,   326,     0,    52,     0,     0,   441,
       0,   442,   443,     0,   930,  -633,     1,   307,   107,   331,
     332,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   203,   204,   205,   206,   207,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
      28,     0,   429,     0,     0,   312,   313,     0,    29,    30,
       0,     0,   430,    33,   431,   432,    36,    37,     0,   411,
      39,    40,   433,     0,     0,   434,   435,   436,   437,     0,
     438,     0,   439,   440,    41,     0,   318,   319,   320,   321,
     322,   323,   324,     0,    44,    45,    46,    47,    48,    49,
     209,   210,   326,     0,    52,     0,     0,   441,     0,   442,
     443,     0,   927,  -634,     1,   307,   107,   331,   332,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,    28,     0,
     429,     0,     0,   312,   313,     0,    29,    30,     0,     0,
     430,    33,   431,   432,    36,    37,     0,   411,    39,    40,
     433,     0,     0,   434,   435,   436,   437,     0,   438,     0,
     439,   440,    41,     0,   318,   319,   320,   321,   322,   323,
     324,     0,    44,    45,    46,    47,    48,    49,   209,   210,
     326,     0,    52,     0,     0,   441,     0,   442,   443,     0,
     930,  -621,     1,   307,   107,   331,   332,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   203,   204,
     205,   206,   207,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,    28,     0,   429,     0,
       0,   312,   313,     0,    29,    30,     0,     0,   430,    33,
     431,   432,    36,    37,     0,   411,    39,    40,   433,     0,
       0,   434,   435,   436,   437,     0,   438,     0,   439,   440,
      41,     0,   318,   319,   320,   321,   322,   323,   324,     0,
      44,    45,    46,    47,    48,    49,   209,   210,   326,     0,
      52,     0,     0,   441,     0,   442,   443,     0,   927,  -622,
       1,   307,   107,   331,   332,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   203,   204,   205,   206,
     207,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,    28,     0,   429,     0,     0,   312,
     313,     0,    29,    30,     0,     0,   430,    33,   431,   432,
      36,    37,     0,   411,    39,    40,   433,     0,     0,   434,
     435,   436,   437,     0,   438,     0,   439,   440,    41,     0,
     318,   319,   320,   321,   322,   323,   324,     0,    44,    45,
      46,    47,    48,    49,   209,   210,   326,     0,    52,     0,
       0,   441,     0,   442,   443,     0,   930,  -616,     1,   307,
     107,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   203,   204,   205,   206,   207,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,    28,     0,   429,     0,     0,   312,   313,     0,
      29,    30,     0,     0,   430,    33,   431,   432,    36,    37,
       0,   411,    39,    40,   433,     0,     0,   434,   435,   436,
     437,     0,   438,     0,   439,   440,    41,     0,   318,   319,
     320,   321,   322,   323,   324,     0,    44,    45,    46,    47,
      48,    49,   209,   210,   326,     0,    52,     0,     0,   441,
       0,   442,   443,     0,   927,  -617,     1,   307,   107,   331,
     332,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   203,   204,   205,   206,   207,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
      28,     0,   429,     0,     0,   312,   313,     0,    29,    30,
       0,     0,   430,    33,   431,   432,    36,    37,     0,   411,
      39,    40,   433,     0,     0,   434,   435,   436,   437,     0,
     438,     0,   439,   440,    41,     0,   318,   319,   320,   321,
     322,   323,   324,     0,    44,    45,    46,    47,    48,    49,
     209,   210,   326,     0,    52,     0,     0,   441,     0,   442,
     443,     0,   930,  -635,     1,   307,   107,   331,   332,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     203,   204,   205,   206,   207,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,    28,     0,
     429,     0,     0,   312,   313,     0,    29,    30,     0,     0,
     430,    33,   431,   432,    36,    37,     0,   411,    39,    40,
     433,     0,     0,   434,   435,   436,   437,     0,   438,     0,
     439,   440,    41,     0,   318,   319,   320,   321,   322,   323,
     324,     0,    44,    45,    46,    47,    48,    49,   209,   210,
     326,     0,    52,     0,     0,   441,     0,   442,   443,     0,
     428,  -636,     1,   307,   107,   331,   332,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   203,   204,
     205,   206,   207,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,    28,     0,   429,     0,
       0,   312,   313,     0,    29,    30,     0,     0,   430,    33,
     431,   432,    36,    37,     0,   411,    39,    40,   433,     0,
       0,   434,   435,   436,   437,     0,   438,     0,   439,   440,
      41,     0,   318,   319,   320,   321,   322,   323,   324,     0,
      44,    45,    46,    47,    48,    49,   209,   210,   326,     0,
      52,     0,     0,   441,     0,   442,   443,   494,     0,     1,
     307,   107,     0,   331,   332,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   203,   204,   205,   206,   207,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,    28,     0,   429,     0,     0,   312,   313,
       0,    29,    30,     0,     0,   430,    33,   431,   432,    36,
      37,     0,   411,    39,    40,   433,     0,     0,   434,   435,
     436,   437,     0,   438,     0,   439,   440,    41,     0,   318,
     319,   320,   321,   322,   323,   324,     0,    44,    45,    46,
      47,    48,    49,   209,   210,   326,   202,    52,     1,     0,
     441,     0,   442,   443,     0,     0,     0,     0,     0,     0,
     331,   332,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   203,   204,   205,   206,   207,     8,
       9,    10,   570,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   208,    28,     0,     0,     0,     0,     0,     0,     0,
      29,    30,     0,     0,     0,    33,     0,     0,    36,    37,
       0,    38,    39,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,   209,   210,     0,   202,    52,     1,     0,   571,
    1055,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     572,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   203,   204,   205,   206,   207,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     208,    28,     0,     0,     0,     0,     0,     0,     0,    29,
      30,     0,     0,     0,    33,     0,     0,    36,    37,     0,
      38,    39,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    44,    45,    46,    47,    48,
      49,   209,   210,     1,     0,    52,     0,     0,   868,  1055,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   572,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   203,
     204,   205,   206,   207,     8,     9,    10,   570,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    28,     0,     0,
       0,     0,     0,     0,     0,    29,    30,     0,     0,     0,
      33,     0,     0,    36,    37,     0,    38,    39,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    44,    45,    46,    47,    48,    49,   209,   210,     1,
       0,    52,     0,     0,   571,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   572,     0,   573,     0,     0,
       0,     0,     0,     0,     2,   203,   204,   205,   206,   207,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,    29,    30,     0,     0,     0,    33,     0,     0,    36,
      37,     0,    38,    39,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    44,    45,    46,
      47,    48,    49,   209,   210,     1,     0,    52,     0,     0,
     868,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   572,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   203,   204,   205,   206,   207,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,    19,    20,   248,
     249,    23,    24,    25,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   250,
       0,     0,     0,     0,     0,     0,     0,    29,    30,     0,
       0,     0,    33,     0,     0,     0,     0,     0,   251,    39,
     252,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   253,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    44,    45,   254,   255,   256,   257,   209,
     210,     1,     0,    52,     0,     0,   868,     0,     0,     0,
       0,     0,     0,  1449,     0,     0,     0,   572,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   203,   204,   205,
     206,   207,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,    19,    20,   248,   249,    23,    24,    25,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   250,     0,     0,     0,     0,
       0,     0,     0,    29,    30,     0,     0,     0,    33,     0,
       0,     0,     0,     0,   251,    39,   252,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   253,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    44,
      45,   254,   255,   256,   257,   209,   210,     1,     0,    52,
       0,     0,  1215,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1216,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   203,   204,   205,   206,   207,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,    19,
      20,   248,   249,    23,    24,    25,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   250,     0,     0,     0,     0,     0,     0,     0,    29,
      30,     0,     0,     0,    33,     0,     0,     0,     0,     0,
     251,    39,   252,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   253,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    44,    45,   254,   255,   256,
     257,   209,   210,     1,     0,    52,     0,     0,  1215,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1238,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   203,
     204,   205,   206,   207,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,    19,    20,   248,   249,    23,
      24,    25,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   250,     0,     0,
       0,     0,     0,     0,     0,    29,    30,     0,     0,     0,
      33,     0,     0,     0,     0,     0,   251,    39,   252,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   253,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    44,    45,   254,   255,   256,   257,   209,   210,     1,
       0,    52,     0,     0,  1215,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1694,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   203,   204,   205,   206,   207,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,    19,    20,   248,   249,    23,    24,    25,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   250,     0,     0,     0,     0,     0,     0,
       0,    29,    30,     0,     0,     0,    33,     0,     0,     0,
       0,     0,   251,    39,   252,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   253,     0,     0,
       0,     1,     0,     0,     0,     0,     0,    44,    45,   254,
     255,   256,   257,   209,   210,     0,     0,    52,     0,     0,
    1215,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,  1709,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    28,     0,     0,     0,     0,
       0,     0,     0,    29,    30,     0,     0,     0,    33,     0,
       0,    36,    37,     0,    38,    39,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    44,
      45,    46,    47,    48,    49,     1,     0,     0,     0,    52,
       0,     0,   868,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   572,     0,     0,     0,     0,     0,     0,
       2,     3,     4,   277,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    27,    28,
       0,     0,     0,     0,     0,     0,     0,    29,    30,   278,
      32,     0,    33,     0,     0,    36,    37,     0,    38,    39,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    41,     0,     0,     0,     0,    43,     0,
       0,     1,     0,    44,    45,    46,    47,    48,    49,    50,
      51,     0,     0,    52,     0,     0,    53,     0,     0,     0,
       0,     0,     0,     0,     0,   279,     2,   203,   204,   205,
     206,   207,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    28,     0,   429,     0,     0,
       0,     0,     0,    29,    30,     0,     0,   430,    33,     0,
       0,    36,    37,     0,    38,    39,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,     0,     0,     0,     0,     0,     0,     1,     0,    44,
      45,    46,    47,    48,    49,   209,   210,     0,     0,    52,
       0,     0,   955,     0,   442,     0,     0,     0,     0,     0,
       0,   956,     2,   203,   204,   205,   206,   207,     8,     9,
      10,   570,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    28,     0,     0,     0,     0,     0,     0,     0,    29,
      30,     0,     0,     0,    33,     0,     0,    36,    37,     0,
      38,    39,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,     0,     0,     0,     0,
       0,     0,     0,     1,     0,    44,    45,    46,    47,    48,
      49,   209,   210,     0,     0,    52,     0,     0,   935,     0,
       0,     0,     0,     0,     0,     0,     0,   936,     2,   203,
     204,   205,   206,   207,     8,     9,    10,   570,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    28,     0,     0,
       0,     0,     0,     0,     0,    29,    30,     0,     0,     0,
      33,     0,     0,    36,    37,     0,    38,    39,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,  1517,     0,     0,
       0,    44,    45,    46,    47,    48,    49,   209,   210,     0,
       0,    52,     0,     0,    53,     0,     0,     0,     0,     0,
       0,     0,     0,   936,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   -66,     0,     0,     0,     0,     0,     0,
       0,   -66,   -66,     0,     0,     0,   -66,     0,     0,     0,
       0,     0,   -66,   -66,   -66,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   -66,     0,     0,
    1721,     0,     0,     0,     0,     0,     0,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,     0,     0,     0,     0,     0,
       0,     0,     0,  1518,     0,  1519,   -66,     2,   203,   204,
     205,   206,   207,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,    19,    20,   248,   249,    23,    24,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   250,     0,     0,     0,
       0,     0,     0,     0,    29,    30,     0,     0,     0,    33,
       0,     0,     0,     0,     0,   251,    39,   252,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     253,     0,     0,  1725,     0,     0,     0,     0,     0,     0,
      44,    45,   254,   255,   256,   257,   209,   210,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -111,
       2,   203,   204,   205,   206,   207,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,    19,    20,   248,
     249,    23,    24,    25,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   250,
       0,     0,     0,     0,     0,     0,     0,    29,    30,     0,
       0,     0,    33,     0,     0,     0,     0,     0,   251,    39,
     252,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   253,     0,     0,  1726,     0,     0,     0,
       0,     0,     0,    44,    45,   254,   255,   256,   257,   209,
     210,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -95,     2,   203,   204,   205,   206,   207,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
      19,    20,   248,   249,    23,    24,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   250,     0,     0,     0,     0,     0,     0,     0,
      29,    30,     0,     0,     0,    33,     0,     0,     0,     0,
       0,   251,    39,   252,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   253,     0,     0,  1832,
       0,     0,     0,     0,     0,     0,    44,    45,   254,   255,
     256,   257,   209,   210,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   -96,     2,   203,   204,   205,
     206,   207,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,    19,    20,   248,   249,    23,    24,    25,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   250,     0,     0,     0,     0,
       0,     0,     0,    29,    30,     0,     0,     0,    33,     0,
       0,     0,     0,     0,   251,    39,   252,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   253,
       0,     0,  1977,     0,     0,     0,     0,     0,     0,    44,
      45,   254,   255,   256,   257,   209,   210,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   -80,     2,
     203,   204,   205,   206,   207,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,    19,    20,   248,   249,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   250,     0,
       0,     0,     0,     0,     0,     0,    29,    30,     0,     0,
       0,    33,     0,     0,     0,     0,     0,   251,    39,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   253,     0, -1291,   296,     0,     1,     0,     0,
       0,     0,    44,    45,   254,   255,   256,   257,   209,   210,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   -87,     2,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,     0,     0,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,    28,     0,     0,     0,     0,     0,     0,     0,    29,
      30,    31,    32,     0,    33,    34,    35,    36,    37,     0,
      38,    39,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,    42,     1,     0,     0,
      43,     0,     0,     0,     0,    44,    45,    46,    47,    48,
      49,    50,    51,     0,     0,    52,     0,     0,    53,     0,
       0,    54,     2,   203,   204,   205,   206,   207,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    28,     0,     0,     0,     0,     0,     0,     0,    29,
      30,     0,     0,     0,    33,     0,     0,    36,    37,     0,
      38,    39,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,     0,     0,     0,     0,
       1,     0,   838,     0,     0,    44,    45,    46,    47,    48,
      49,   209,   210,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1408,     2,   203,   204,   205,   206,
     207,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    28,     0,     0,     0,     0,     0,
       0,     0,    29,    30,     0,     0,     0,    33,     0,     0,
      36,    37,     0,    38,    39,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    41,     0,
       0,     0,     0,     1,     0,   838,     0,     0,    44,    45,
      46,    47,    48,    49,   209,   210,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1752,     2,   203,
     204,   205,   206,   207,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    28,     0,     0,
       0,     0,     0,     0,     0,    29,    30,     0,     0,     0,
      33,     0,     0,    36,    37,     0,    38,    39,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,     0,   166,     0,     1,     0,   838,     0,
       0,    44,    45,    46,    47,    48,    49,   209,   210,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1753,     2,     3,     4,   167,     6,     7,     8,     9,    10,
     168,   169,   170,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
      28,     0,     0,     0,     0,     0,     0,     0,    29,    30,
       0,     0,     0,    33,     0,     0,    36,    37,     0,    38,
      39,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,   166,     0,     1,     0,     0,
       0,     0,     0,     0,    44,    45,    46,    47,    48,    49,
      50,    51,     0,     0,    52,     0,     0,    53,     0,     0,
     171,     0,     2,     3,     4,   167,     6,     7,     8,     9,
      10,   168,   169,   170,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    28,     0,     0,     0,     0,     0,     0,     0,    29,
      30,     0,     0,     0,    33,     0,     0,    36,    37,     0,
      38,    39,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,   610,     0,     1,     0,
       0,     0,     0,     0,     0,    44,    45,    46,    47,    48,
      49,    50,    51,     0,     0,    52,     0,     0,    53,     0,
       0,   171,     0,     2,   203,   204,   205,   206,   207,   237,
     238,   239,   611,   612,   613,   243,   244,   245,   246,   247,
      19,    20,   248,   249,    23,    24,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   250,     0,     0,     0,     0,     0,     0,     0,
      29,    30,     0,     0,     0,    33,     0,     0,     0,     0,
       0,   251,    39,   252,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   253,  -917,     0,  -917,
       0,     0,     0,     0,     0,     0,    44,    45,   254,   255,
     256,   257,   209,   210,     0,     0,    52,     0,     0,    53,
       0,     0,   614,     0,  -917,  -917,  -917,  -917,  -917,  -917,
    -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,
    -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -917,     0,     0,     0,     0,     0,     0,
       0,  -917,  -917,     0,     0,     0,  -917,     0,     0,     0,
       0,     0,  -917,  -917,  -917,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -917,     0,     1,
       0,     0,     0,     0,     0,     0,     0,  -917,  -917,  -917,
    -917,  -917,  -917,  -917,  -917,     0,     0,  -917,     0,     0,
    -917,     0,     0,  -917,     2,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,     0,     0,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,    28,     0,     0,     0,     0,     0,     0,
       0,    29,    30,    31,    32,     0,    33,    34,    35,    36,
      37,     0,    38,    39,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,    42,     0,
   -1292,   288,    43,     1,     0,     0,     0,    44,    45,    46,
      47,    48,    49,    50,    51,     0,     0,    52,     0,     0,
      53,     0,     0,    54,     0,     0,     0,     0,     2,     3,
       4,   167,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,     0,     0,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,    28,     0,     0,
       0,     0,     0,     0,     0,    29,    30,     0,     0,     0,
      33,    34,    35,    36,    37,     0,    38,    39,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   202,     0,
       1,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    44,    45,    46,    47,    48,    49,    50,    51,     0,
       0,    52,     0,     0,    53,     2,   203,   204,   205,   206,
     207,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   208,    28,     0,     0,     0,     0,     0,
       0,     0,    29,    30,     0,     0,     0,    33,     0,     0,
      36,    37,     0,    38,    39,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   202,    41,     1,
       0,     0,     0,     0,     0,     0,     0,     0,    44,    45,
      46,    47,    48,    49,   209,   210,     0,     0,    52,     0,
       0,  1215,  1681,     0,     2,   203,   204,   205,   206,   207,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   208,    28,     0,     0,     0,     0,     0,     0,
       0,    29,    30,     0,     0,     0,    33,     0,     0,    36,
      37,     0,    38,    39,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   202,    41,     1,     0,
       0,     0,     0,     0,     0,     0,     0,    44,    45,    46,
      47,    48,    49,   209,   210,     0,     0,     0,     0,     0,
       0,   211,     0,     2,   203,   204,   205,   206,   207,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   208,    28,     0,     0,     0,     0,     0,     0,     0,
      29,    30,     0,     0,     0,    33,     0,     0,    36,    37,
       0,    38,    39,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   948,    41,     1,     0,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,   209,   210,     0,     0,     0,     0,     0,     0,
     394,     0,     2,   203,   204,   205,   206,   207,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     208,    28,     0,     0,     0,     0,     0,     0,     0,    29,
      30,     0,     0,     0,    33,     0,     0,    36,    37,     0,
      38,    39,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1475,    41,     1,     0,     0,     0,
       0,     0,     0,     0,     0,    44,    45,    46,    47,    48,
      49,   209,   210,     0,     0,     0,     0,     0,     0,   211,
       0,     2,   203,   204,   205,   206,   207,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   208,
      28,     0,     0,     0,     0,     0,     0,     0,    29,    30,
       0,     0,     0,    33,     0,     0,    36,    37,     0,    38,
      39,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   202,    41,     1,     0,     0,     0,     0,
       0,     0,     0,     0,    44,    45,    46,    47,    48,    49,
     209,   210,     0,     0,     0,     0,     0,     0,   394,     0,
       2,   203,   204,   205,   206,   207,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   208,    28,
       0,     0,     0,     0,     0,     0,     0,    29,    30,     0,
       0,     0,    33,     0,     0,    36,    37,     0,    38,    39,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   202,    41,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    44,    45,    46,    47,    48,    49,   209,
     210,     0,     0,     0,     0,     0,     0,  1567,     0,     2,
     203,   204,   205,   206,   207,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   208,    28,     0,
       0,     0,     0,     0,     0,     0,    29,    30,     0,     0,
       0,    33,     0,     0,    36,    37,     0,    38,    39,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   166,    41,     1,     0,     0,     0,     0,     0,     0,
       0,     0,    44,    45,    46,    47,    48,    49,   209,   210,
       0,     0,     0,     0,     0,     0,  1904,     0,     2,     3,
       4,   167,     6,     7,     8,     9,    10,   570,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,    28,     0,     0,
       0,     0,     0,     0,     0,    29,    30,     0,     0,     0,
      33,     0,     0,    36,    37,     0,    38,    39,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   166,     0,
       1,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    44,    45,    46,    47,    48,    49,    50,    51,     0,
       0,    52,     0,     0,    53,     2,     3,     4,   167,     6,
       7,     8,     9,    10,   570,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    28,     0,     0,     0,     0,     0,
       0,     0,    29,    30,     0,     0,     0,    33,     0,     0,
      36,    37,     0,    38,    39,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   892,     0,     1,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    44,    45,
      46,    47,    48,    49,    50,    51,     0,     0,    52,     0,
       0,    53,     2,   203,   204,   205,   206,   207,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,    19,
      20,   248,   249,    23,    24,    25,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   250,     0,     0,     0,     0,     0,     0,     0,    29,
      30,     0,     0,     0,    33,     0,     0,     0,     0,     0,
     251,    39,   252,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     1,   253,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    44,    45,   254,   255,   256,
     257,   209,   210,     0,     0,     0,     0,     0,   893,     2,
       3,     4,   167,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,    28,     0,
       0,     0,     0,     0,     0,     0,    29,    30,     0,     0,
       0,    33,     0,     0,    36,    37,     0,    38,    39,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     1,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    44,    45,    46,    47,    48,    49,    50,    51,
       0,     0,    52,     0,     0,    53,     2,   203,   204,   205,
     206,   207,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    28,     0,     0,     0,     0,
       0,     0,     0,    29,    30,     0,     0,     0,    33,     0,
       0,    36,    37,     0,    38,    39,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    44,
      45,    46,    47,    48,    49,   209,   210,     0,     0,    52,
       0,     0,    53,     2,   203,   204,   205,   206,   207,     8,
       9,    10,   570,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    28,     0,     0,     0,     0,     0,     0,     0,
      29,    30,     0,     0,     0,    33,     0,     0,    36,    37,
       0,    38,    39,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     1,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,   209,   210,     0,     0,    52,     0,     0,    53,
       2,   203,   204,   205,   206,   207,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    28,
       0,     0,     0,     0,     0,     0,     0,    29,    30,     0,
       0,     0,    33,     0,     0,    36,    37,     0,    38,    39,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     1,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    44,    45,    46,    47,    48,    49,   209,
     210,     0,     0,     0,     0,     0,   727,     2,   203,   204,
     205,   206,   207,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    28,     0,     0,     0,
       0,     0,     0,     0,    29,    30,     0,     0,     0,    33,
       0,     0,    36,    37,     0,    38,    39,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,    45,    46,    47,    48,    49,   209,   210,     0,     0,
       0,     0,     0,  1454,     2,   203,   204,   205,   206,   207,
     237,   238,   239,  1539,   241,   242,   243,   244,   245,   246,
     247,    19,    20,   248,   249,    23,    24,    25,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   250,     0,     0,     0,     0,     0,     0,
       0,    29,    30,     0,     0,     0,    33,     0,     0,     0,
       0,     0,   251,    39,   252,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1078,     0,     1,   253,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    44,    45,   254,
     255,   256,   257,   209,   210,     0,     0,    52,     0,     0,
      53,     2,   203,   204,   205,   206,   207,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,  1079,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   208,
      28,     0,     0,     0,     0,     0,     0,     0,    29,    30,
       0,     0,     0,    33,     0,     0,    36,    37,     0,    38,
      39,    40,     0,     0,     0,  1084,     0,     1,     0,     0,
       0,     0,     0,     0,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,    45,    46,    47,    48,    49,
     209,   210,     2,   203,   204,   205,   206,   207,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,  1085,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     208,    28,     0,     0,     0,     0,     0,     0,     0,    29,
      30,     0,     0,     0,    33,     0,     0,    36,    37,     0,
      38,    39,    40,     0,     0,     0,  1090,     0,     1,     0,
       0,     0,     0,     0,     0,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    44,    45,    46,    47,    48,
      49,   209,   210,     2,   203,   204,   205,   206,   207,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,  1091,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   208,    28,     0,     0,     0,     0,     0,     0,     0,
      29,    30,     0,     0,     0,    33,     0,     0,    36,    37,
       0,    38,    39,    40,     0,     0,     0,   877,     0,     1,
       0,     0,     0,     0,     0,     0,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,   209,   210,     2,   203,   204,   205,   206,   207,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,    19,    20,   248,   249,    23,    24,    25,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   250,     0,     0,     0,     0,     0,     0,
       0,    29,    30,     0,     0,     0,    33,     0,     0,     0,
       0,     0,   251,    39,   252,     0,     0,     0,     0,     0,
       1,     0,     0,     0,     0,     0,     0,   253,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    44,    45,   254,
     255,   256,   257,   209,   210,     2,   203,   204,   205,   206,
     207,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,  1039,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   208,    28,     0,     0,     0,     0,     0,
       0,     0,    29,    30,     0,     0,     0,    33,     0,     0,
      36,    37,     0,    38,    39,    40,     0,     0,     0,     0,
       0,     1,     0,     0,     0,     0,     0,     0,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    44,    45,
      46,    47,    48,    49,   209,   210,     2,   203,   204,   205,
     206,   207,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    1096,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   208,    28,     0,     0,     0,     0,
       0,     0,     0,    29,    30,     0,     0,     0,    33,     0,
       0,    36,    37,     0,    38,    39,    40,     0,     0,     0,
       0,     0,     1,     0,     0,     0,     0,     0,     0,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    44,
      45,    46,    47,    48,    49,   209,   210,     2,   203,   204,
     205,   206,   207,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   508,    28,     0,     0,     0,
       0,     0,     0,     0,    29,    30,     0,     0,     0,    33,
       0,     0,    36,    37,     0,    38,    39,    40,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,    45,    46,    47,    48,    49,   209,   210,     2,   203,
     204,   205,   206,   207,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    28,     0,     0,
       0,     0,     0,     0,     0,    29,    30,     0,     0,     0,
      33,     0,     0,    36,    37,     0,    38,    39,    40,     0,
       0,     0,     0,     0,     1,     0,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,   838,     0,
       0,    44,    45,    46,    47,    48,    49,   209,   210,     2,
     203,   204,   205,   206,   207,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   208,    28,     0,
       0,     0,     0,     0,     0,     0,    29,    30,     0,     0,
       0,    33,     0,     0,    36,    37,     0,    38,    39,    40,
       0,     0,     0,     0,     0,     1,     0,     0,     0,     0,
       0,     0,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    44,    45,    46,    47,    48,    49,   209,   210,
       2,   203,   204,   205,   206,   207,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,    19,    20,   248,
     249,    23,    24,    25,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   250,
       0,     0,     0,     0,     0,     0,     0,    29,    30,     0,
       0,     0,    33,   483,   484,     0,     0,     0,   251,    39,
     252,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,   253,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    44,    45,   254,   255,   256,   257,   209,
     210,     2,   203,   204,   205,   206,   207,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      28,     0,     0,     0,     0,     0,     0,     0,    29,    30,
       0,     0,     0,    33,     0,     0,    36,    37,     0,    38,
      39,    40,     0,     0,     0,     0,     0,     1,     0,     0,
       0,     0,     0,     0,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,    45,    46,    47,    48,    49,
     209,   210,     2,   203,   204,   205,   206,   207,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,    19,
      20,   248,   249,    23,    24,    25,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   250,     0,     0,     0,     0,     0,     0,     0,    29,
      30,     0,     0,     0,    33,     0,     0,     0,     0,     0,
     251,    39,   252,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   253,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    44,    45,   254,   255,   256,
     257,   209,   210,     2,   203,   204,   205,   206,   207,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
      19,    20,   248,   249,    23,    24,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   250,     0,     0,     0,     0,     0,     0,     0,
      29,    30,     0,     0,     0,    33,     0,     0,     0,     0,
       0,   251,    39,   252,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   253,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    44,    45,   254,   255,
     256,   257,   209,   210,     0,     0,    52,     0,     0,   868,
    1678,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     572,     2,   203,   204,   205,   206,   207,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,    19,    20,
     248,   249,    23,    24,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     250,     0,     0,     0,     0,     0,     0,     0,    29,    30,
       0,     0,     0,    33,     0,     0,     0,     0,     0,   251,
      39,   252,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   253,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,    45,   254,   255,   256,   257,
     209,   210,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   258,     2,   203,   204,   205,   206,
     207,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,    19,    20,   248,   249,    23,    24,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   250,     0,     0,     0,     0,     0,
       0,     0,    29,    30,     0,     0,     0,    33,     0,     0,
       0,     0,     0,   251,    39,   252,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   253,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    44,    45,
     254,   255,   256,   257,   209,   210,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1528,     2,   203,
     204,   205,   206,   207,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,    19,    20,   248,   249,    23,
      24,    25,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   250,     0,     0,
       0,     0,     0,     0,     0,    29,    30,     0,     0,     0,
      33,     0,     0,     0,     0,     0,   251,    39,   252,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   253,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    44,    45,   254,   255,   256,   257,   209,   210
};

static const yytype_int16 yycheck[] =
{
       0,    87,    93,   648,   541,    87,   726,   867,  1006,   133,
    1225,   475,   274,    84,   157,   475,   934,   728,   143,   750,
     934,   349,   867,   145,   133,   154,   757,   101,   476,   760,
     155,    31,    32,  1023,   159,  1005,   158,  1007,   160,   129,
     162,   867,    42,   129,    84,   292,    94,   129,   101,  1108,
      31,    94,   129,    53,    94,    17,   750,    65,  1616,   843,
      60,   185,    43,   757,    84,    65,   760,    67,   834,  2102,
    1628,    85,   479,     5,   349,    84,   185,   188,   189,   834,
    1005,     1,  1007,    83,    84,    85,     1,    87,   944,   966,
     843,   801,    92,    94,    94,     1,     1,   188,   189,    84,
     101,   101,   102,     1,  1005,   105,  1007,   124,     1,    94,
     332,     5,   124,     3,   114,     1,   101,   117,   135,   829,
     131,     1,   133,   135,    60,  2158,   766,   108,   109,   129,
       1,   112,   132,   133,     1,     1,     3,   137,    28,   122,
     985,   141,   142,   143,   269,   145,     3,    37,     5,   149,
       1,   151,     3,    17,   154,   155,   145,   157,   158,   159,
     160,   561,   162,   274,     5,   165,     1,     3,   176,   158,
       3,   160,   812,   162,   348,    17,   176,     3,   114,     5,
     586,   272,   293,   145,     1,   185,     3,   312,   362,     3,
       1,   591,   366,   318,   594,     3,   596,     5,   598,     1,
       1,   201,   124,   135,   124,     7,     8,     9,  1005,     3,
    1007,   282,   127,   213,     3,   215,     1,     1,   292,     3,
     294,   292,   423,   223,   224,   130,     3,   133,   475,   127,
       1,   129,   130,   233,   124,     1,   236,   130,     1,   292,
     134,   294,   887,     1,   130,   135,   294,   127,   274,   129,
     130,   294,   292,    53,   294,   269,  1005,  1006,  1007,   130,
    1258,     3,   282,   130,   130,   201,     1,  1265,   125,   269,
       3,  1269,   292,   282,   274,   399,   133,     1,   278,   130,
       3,   145,   282,   426,   292,     3,     1,   884,   124,  1259,
     399,   132,   292,   294,   294,   130,  1266,   278,   131,   125,
    1270,  1859,     3,   145,   429,   124,     1,   133,     3,   294,
      28,   125,   312,   130,   515,   440,   135,   125,   318,   130,
       0,    17,   124,   124,   125,   133,   128,     3,   129,   329,
     132,   125,   132,   135,  1259,   129,   125,  1214,     3,   133,
     129,  1266,   127,   343,   133,  1270,   130,     3,   125,   802,
     331,    74,    28,   803,   445,   446,   447,   448,  1259,   130,
       5,   124,   125,    28,   130,  1266,   129,   492,   124,  1270,
     571,     5,   130,    74,     7,     8,     9,   830,   672,   673,
       5,   831,  1113,   125,   124,   385,   386,     5,   121,   122,
     476,   391,     3,   393,   476,   130,    91,    78,   131,   399,
     735,     5,     1,   738,    84,   405,   130,   130,   670,   671,
     672,   673,   536,   131,    94,   130,  1013,    28,   418,  1113,
     884,   101,   102,   423,   224,   425,   426,   536,   552,   429,
     430,   891,     3,   562,  1200,   435,  1202,     1,   438,   439,
     440,   441,   442,   552,   566,  1200,   568,  1202,   124,   145,
       1,   542,   133,     3,   545,   391,   703,   393,   786,   787,
     788,     3,  1259,   131,   870,   133,   131,     3,     5,  1266,
     470,   471,   472,  1270,  1689,   475,   476,   586,    28,   479,
     944,   571,   482,   657,   129,   541,   660,   487,   816,   817,
     818,   491,   492,   941,   571,   129,   496,   497,   127,   132,
     125,   965,   135,    74,  1215,   965,     1,   125,   508,  1258,
    1259,   786,   787,   788,   514,   515,  1265,  1266,   518,   519,
    1269,  1270,  1233,   523,   524,  1584,   125,   527,   528,  1240,
     129,   531,   532,   533,   534,     3,   536,     5,   130,   539,
       1,   816,   817,   818,   224,   952,   747,   954,   130,  1013,
     550,   551,   552,  1013,  1431,  1545,   556,     3,   780,   130,
      28,   561,   562,     1,     3,   129,   566,  1427,   568,   569,
       3,   571,   572,   573,     1,   131,   576,   566,   129,   568,
       3,   131,  1427,  1439,     3,   807,   586,   698,   699,   131,
     127,   591,  1590,   815,   594,   131,   596,     3,   598,   724,
     725,  1427,   282,   728,   729,   605,     7,     8,     9,   129,
       3,     5,   292,   835,   294,   135,     1,  1494,     3,   130,
    1538,  1591,     3,  1479,  1538,     1,  1482,  1411,  1412,   703,
     125,     1,   703,   891,   129,   726,   572,   884,   638,   121,
     640,   441,     3,    66,   670,   671,   672,   673,   648,   329,
     703,   124,  1512,     5,  1060,   391,     1,   393,  1411,  1412,
       7,     8,     9,   131,   125,  1071,  1591,   868,   129,   605,
     670,   671,   672,   673,   875,   121,   122,  1077,     0,  1505,
    1895,  1507,   883,   703,   804,   131,   124,   125,   688,   689,
    1591,   129,   131,   894,   127,  1095,   129,   697,   121,   122,
     127,     5,   129,   703,   685,   686,   125,   965,   131,   709,
     766,   137,   832,  1703,   129,   121,   122,   717,   965,   128,
     805,   136,   128,   124,   724,   725,   726,   727,   728,   729,
     124,   132,   125,     3,   135,   735,   121,   122,   738,     3,
       3,   122,  1473,   423,   129,   135,   127,   747,   833,   125,
     731,   732,   733,   129,   801,   125,   812,   124,   883,   129,
     121,   122,   127,   763,    28,    28,  1013,   767,   135,   894,
     131,   571,   124,   573,    37,  1773,   129,   124,   868,  1473,
     125,   304,   829,   129,   129,   132,   799,   800,   135,   804,
     313,   868,    12,    13,  1591,   475,   319,   129,    84,    85,
     129,     7,     8,     9,  1774,     3,     7,     8,     9,   809,
    1800,  1688,   129,   813,   827,   828,  1693,   832,     7,     8,
       9,  1811,  1116,   138,   139,  1119,   917,   918,     3,   920,
     973,   974,   923,   924,   802,   515,   572,   803,   838,   839,
     840,  1590,  1591,   843,   844,   845,   132,   130,   805,  1774,
     979,   941,   122,   123,  1116,   941,   978,  1119,  1059,   941,
     124,   124,   830,  1157,   941,   831,   866,   867,   868,     7,
       8,     9,   872,  1774,   874,   875,   833,  1171,  1172,  1173,
    1174,  1758,   882,   883,   884,   131,    11,   887,  1013,     3,
       3,   891,     5,   893,   894,  1157,   896,   633,   898,    70,
      71,   142,   122,   123,   145,   996,  1762,  1763,   130,  1171,
    1172,  1173,  1174,     3,    28,  1044,  1045,   158,    31,   160,
     122,   162,   128,   121,   122,   127,   132,  1255,   354,   130,
     128,   132,  1054,     3,   124,   935,  1060,   937,   128,  1799,
     125,   941,    93,   132,   944,   135,   121,   122,   121,   949,
     129,  1060,   952,   125,   954,   955,   135,     3,    28,   130,
    1069,   122,  1071,   130,   964,   965,   966,  1023,   141,   142,
     131,  1682,   133,   973,   974,  1439,   976,  1774,   978,   979,
    1255,   124,  1072,   269,   984,   985,   986,   987,     3,   978,
       5,  1711,   799,   800,   132,  1072,   282,   124,   123,   425,
     124,  1991,   122,  1648,   129,    75,    76,    78,  1545,  1210,
      80,   131,  1213,  1013,  1474,  1479,    31,    87,  1482,  1425,
     827,   828,   123,   703,  1773,  1774,    84,   122,   129,   709,
     128,   121,   122,   124,   124,  1912,   131,   188,   189,   124,
    1262,   111,   112,   121,  1044,  1045,   726,   127,  1048,  1049,
       3,   131,  1052,  1053,  1054,   735,  1056,  1975,   738,  1059,
    1060,   131,   125,   141,   142,  1054,   129,   747,  1190,  1069,
     133,  1071,  1072,  1073,   122,   121,   122,  1077,   124,  2069,
    1080,   129,     0,  1083,   124,   123,  1086,   135,  1213,  1089,
    1116,   129,  1092,  1119,   127,  1095,   896,  1097,   131,   561,
    1873,   125,     3,  1159,     5,   129,   124,  1163,  1233,   133,
    1166,  1111,  1168,    66,   124,  1240,  1116,   124,   123,  1119,
    2110,   272,    80,   274,   129,  1215,   124,   185,  1128,   591,
    1130,  1157,   594,   124,   596,   935,   598,  1073,  1215,  1139,
       3,   131,   293,   133,   123,  1171,  1172,  1173,  1174,   949,
     129,  1557,  1152,   111,   112,   955,   123,  1157,  1158,   124,
     840,  1987,   129,  1989,   123,    28,    84,  1148,   121,   122,
     129,  1171,  1172,  1173,  1174,   133,    94,   131,    12,    13,
     123,   704,    45,   101,   102,     1,   129,     3,   125,  1189,
    1190,  1191,   129,  1193,  1914,   875,   133,   131,   125,   133,
     936,  1190,   129,  1203,   884,  1205,   133,     3,    10,    11,
    1210,   891,    75,    76,  1214,  1215,   896,   131,   898,   133,
     121,   122,   304,  1424,   282,     6,   131,     8,     9,   470,
     471,   313,  1877,  1233,   292,    14,    15,   319,   123,   975,
    1240,   789,   790,   137,   129,   531,   532,   533,   534,  1249,
     138,   139,  2025,   128,  2027,   496,   497,     1,   133,  1059,
      10,    11,   125,   128,   550,   551,   129,  1203,   133,   949,
     123,   819,   820,   143,  1811,  1256,   129,   518,   519,    75,
      76,    16,   523,   524,    80,   965,   527,   528,   122,   123,
     127,    87,   129,    74,   445,    70,    71,   448,  1762,  1763,
     123,   123,  1596,  1597,    85,     3,   129,   129,     3,    89,
      90,    91,   144,   123,  1608,   111,   112,    92,  2091,   129,
    2093,    96,  2095,    98,   127,   566,   129,   568,   124,   110,
      28,    75,    76,    28,  1596,  1597,    80,  1073,   125,   120,
       3,   122,   129,    87,     3,   123,  1608,    45,    11,  1755,
      45,   129,    11,   125,   135,   130,   144,   138,   139,   140,
    2133,  2134,   125,  2136,   282,    16,   129,   111,   112,   795,
     796,     1,   798,     3,   292,  1576,   294,    75,    76,  2152,
      75,    76,   125,   127,   128,   129,   129,    80,  1124,   125,
     127,   542,   129,   129,   545,   137,  2169,   823,   824,   825,
     826,   125,  1402,  1403,   125,   129,  1406,  1407,   129,   143,
     125,  1411,  1412,  1819,   129,   915,   916,   475,   111,   112,
       3,   125,   125,  1423,     1,   129,  1407,  1427,  1428,   131,
     125,  1431,   155,  1557,   127,   131,   159,  1437,   131,  1439,
     866,   867,  1442,   125,   125,    28,  1446,   129,  1557,    14,
      15,  1451,  1452,  1453,  1991,   131,  1565,   133,   121,   122,
     123,  2106,   121,   122,   123,   128,   129,   125,   131,   128,
     129,   129,   131,   125,  1474,   131,  1476,   133,   536,  1479,
    1216,   539,  1482,   791,   792,  1485,     1,   124,     3,  1545,
     915,   916,    75,    76,  1494,   131,     3,    80,    75,    76,
    1500,  1501,  1238,    80,    87,  1505,  1506,  1507,  1508,     1,
      87,     3,   430,   821,   822,   127,     1,   137,     3,   670,
     671,   672,   673,     1,   129,     3,     3,   127,   111,   112,
    1210,   127,  2069,   129,   111,   112,   789,   790,   122,   131,
     966,   133,   122,   142,   791,   792,   145,   698,   699,   700,
     127,    28,   129,  1847,  1554,  1555,   127,  1557,   129,   158,
      37,   160,   131,   162,   133,  1565,   819,   820,    75,    76,
    1596,  1597,   122,    80,   821,   822,  1576,   550,   551,     3,
      87,  1519,  1608,  1521,  1519,  1847,  1521,    11,   128,   670,
     671,   670,   671,   129,  1795,   136,  1596,  1597,    75,    76,
    1690,   101,   102,    80,   111,   112,  1606,   131,  1608,  1609,
      87,   136,  1612,  1690,   136,  1077,  1616,   844,   845,   131,
    1620,  1083,   704,  1623,   131,   131,   135,  1089,   129,   131,
     129,   129,   129,  1095,   111,   112,   130,   127,  1619,   697,
     133,     1,   124,   124,   121,   703,   125,   124,  1648,   124,
     124,   127,   124,  1453,  1635,  1655,   127,   127,   135,  1881,
    1882,  1883,  1884,  1885,  1886,  1887,  1888,   127,  1790,   127,
    1792,   127,  1728,  1764,   915,   916,  1476,  1733,   535,   131,
    1736,   531,   532,   533,   534,   122,   130,   136,  1688,   136,
    1690,   136,   135,  1693,  1816,  1819,  1818,   121,   122,   123,
     550,   551,   136,   136,   136,   129,   131,   131,   122,   131,
    1819,  1711,   127,  1713,  1714,    75,    76,  1717,   130,   129,
      80,   122,  2016,   130,  2018,     3,   130,    87,   125,   125,
     125,   136,   125,   136,   354,   124,   136,   978,   125,   125,
     124,   133,   133,   133,  1800,   124,   124,  1483,    57,  1749,
      28,   111,   112,  1975,  2016,  1811,  2018,   127,  1758,    37,
     127,   127,  1762,  1763,   127,  1765,   124,   127,   128,   129,
     122,   122,   125,  1059,   122,   125,  1576,  1777,   124,   124,
     135,   122,  2110,   125,   133,   703,   125,   125,  1214,   129,
    1790,  2085,  1792,   129,   125,  1795,  1476,    75,    76,     1,
     135,  1790,    80,  1792,   129,   425,   130,  1048,  1049,    87,
     125,  1052,  1053,  1054,   133,   133,  1816,   133,  1818,  1819,
     125,  1847,   125,  2085,   125,   127,   884,  1816,   128,  1818,
     125,   130,   125,   111,   112,  2110,   125,   125,   136,   136,
     136,  1841,  1842,  1843,  1844,   996,   124,  1847,   133,   133,
      57,  1851,  1852,   124,  1854,   125,  1856,   135,   124,   124,
     717,   133,  1984,   125,   133,   133,   133,   125,  1868,   125,
       3,   470,   471,    75,    76,   125,   125,  1877,    80,   125,
    1880,   136,   136,   482,   122,    87,   944,   135,   127,   136,
    1871,   136,  1873,   750,   135,    28,  1576,   496,   497,    11,
     757,    75,    76,   760,    37,   131,    80,   965,   128,   111,
     112,   133,  1912,    87,  1914,   131,   133,   127,   124,   518,
     519,   125,   124,   125,   523,   524,   127,   129,   527,   528,
     128,   128,   131,   125,   125,  1991,   136,   111,   112,    65,
      75,    76,    75,    76,   125,    80,   136,    80,  1189,  1190,
     136,   136,    87,   136,    87,  1013,  1692,   131,  1694,   136,
     136,   136,   125,   125,   125,  1116,   125,   566,  1119,   568,
      65,   127,  1708,  1709,   125,   125,   111,   112,   111,   112,
     127,   136,  1982,  1983,  1984,  1985,  1986,  1987,   121,  1989,
    2016,   124,  2018,   128,   136,  1984,  1996,  1997,  1998,  1999,
     133,  1427,   136,   127,   136,  1431,  1157,  2007,  2099,  2100,
     127,   136,   127,  2069,   125,   131,  2016,     3,  2018,  2019,
    1171,  1172,  1173,  1174,    37,   127,   127,   127,  2028,  2029,
     127,  1711,    45,    46,   127,   127,   127,     0,   125,   127,
     482,   127,    28,  1194,  2025,  1196,  2027,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,   127,  2141,  2085,
    1508,   482,    75,    76,   482,  2065,  2066,    80,  1494,   482,
     921,   482,  2072,  2073,    87,   984,  2076,   866,  2078,    42,
     292,  2081,   812,    75,    76,  2085,  1512,   292,    80,    75,
      76,    75,    76,   976,    80,    87,    80,    60,   111,   112,
    2100,    87,  2102,    87,    67,  1474,  2106,   440,   121,  2090,
    2091,   729,  2093,   430,  2095,  1795,  1800,   269,  2118,   111,
     112,    84,   318,  2090,    87,   111,   112,   111,   112,   121,
      93,    94,   124,  1191,   101,  1193,    94,   274,   101,   102,
      94,  2141,  2142,  2124,    94,   131,  2146,   102,  1005,  1006,
    1007,   114,  2133,  2134,   117,  2136,  1749,   128,  2158,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   129,  1453,    -1,    -1,
      -1,  2152,    -1,    -1,   137,   795,   796,  1913,   798,   142,
     143,    -1,   145,    -1,    -1,    -1,  1922,    -1,  2169,    -1,
      -1,    -1,   155,    -1,   157,   158,   159,   160,    -1,   162,
      -1,    -1,    -1,   823,   824,   825,   826,    -1,    -1,    -1,
      -1,  1734,  1735,    -1,  1737,  1738,    -1,    -1,    -1,  1742,
    1743,  1744,  1745,    -1,   313,   188,   189,    -1,    -1,    -1,
     319,    -1,    -1,    -1,  1914,    -1,    -1,    -1,   201,    -1,
      -1,    -1,    -1,  1979,  1980,    -1,   866,   867,    -1,    -1,
      -1,    -1,   215,    -1,    45,    46,  1113,    45,    46,  1500,
    1501,   224,  1688,    -1,    -1,    -1,    -1,  1693,    -1,     7,
      -1,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
      -1,    -1,    -1,    -1,    75,    76,    -1,    75,    76,    80,
     470,   471,    80,    -1,    -1,    -1,    87,    -1,    -1,    87,
     272,   273,   391,    -1,   393,    -1,   269,    -1,    -1,   272,
     273,   274,    -1,  1554,  1555,    -1,   496,   497,    -1,   282,
     111,   112,    -1,   111,   112,    -1,    -1,    -1,    -1,   292,
     293,   294,  1758,   124,    -1,    -1,   124,    -1,   518,   519,
      75,    76,    -1,   523,   524,    80,   966,   527,   528,   312,
      -1,    -1,    87,    -1,    -1,   318,    -1,    -1,  1881,  1882,
    1883,  1884,  1885,  1886,  1887,  1888,   329,    -1,    -1,    -1,
      -1,    -1,    -1,  1799,    -1,    -1,   111,   112,  1529,   978,
      -1,  1439,    -1,    -1,   122,   123,   121,    -1,    -1,   124,
      -1,    -1,    -1,    -1,   132,    -1,     0,    -1,    -1,    -1,
     135,  1258,  1259,   141,   142,   143,   144,   145,  1265,  1266,
      -1,    -1,  1269,  1270,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1479,    -1,   386,  1482,    -1,    -1,    -1,   391,    -1,
     393,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    87,  1596,  1597,    -1,    -1,  1048,
    1049,    -1,  1975,  1052,  1053,  1054,    -1,  1608,    -1,    -1,
     423,    -1,   425,   426,    -1,    -1,   429,   430,   111,   112,
      -1,    -1,   435,   470,   471,    -1,   439,   440,    -1,   442,
      84,    -1,   125,   572,    -1,    -1,  1912,    -1,    -1,    -1,
      94,    -1,    -1,    -1,    -1,    -1,    -1,   101,   102,   496,
     497,    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,
      -1,    -1,   475,   476,    -1,    -1,     3,    -1,    -1,   482,
      -1,   518,   519,    -1,   487,    -1,   523,   524,    -1,   492,
     527,   528,    -1,   496,   497,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    -1,    -1,   633,    -1,    -1,    -1,    -1,  1790,
      37,  1792,   515,    -1,    -1,   518,   519,    -1,    -1,    -1,
     523,   524,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,
     542,    -1,   535,   545,    -1,  1816,    -1,  1818,    -1,   542,
      -1,    -1,   545,    -1,    -1,    -1,    -1,    -1,    75,    76,
    1189,  1190,    -1,    80,  1214,    -1,    -1,    -1,   561,    -1,
      87,    -1,    -1,   566,    -1,   568,    -1,    -1,   571,   572,
      -1,    -1,    -1,    -1,    75,    76,  1473,    -1,    -1,    80,
     224,    -1,    -1,    -1,   111,   112,    87,    -1,   591,    -1,
      -1,   594,    -1,   596,   121,   598,    -1,   124,   125,    -1,
      -1,    -1,   605,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,  1734,  1735,    -1,  1737,  1738,    -1,    -1,    -1,
    1742,  1743,  1744,  1745,   125,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,   282,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    87,   292,    -1,
     294,    -1,    -1,    -1,    -1,    -1,  1847,    -1,   670,   671,
     672,   673,    -1,    -1,  1762,  1763,    -1,   670,   671,   672,
     673,   111,   112,    -1,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,   125,    -1,    -1,   700,    -1,
      -1,    -1,    -1,  1590,  1591,   698,   699,   700,    -1,    -1,
     703,  1982,  1983,  1984,  1985,  1986,   709,    45,    46,     3,
      -1,    -1,    -1,    -1,   717,  1996,  1997,  1998,  1999,    75,
      76,   724,   725,   726,    80,   728,   729,    -1,    -1,    -1,
      -1,    87,   735,    -1,    28,   738,    -1,    75,    76,    -1,
      -1,    -1,    80,    37,   747,    -1,    -1,   750,    -1,    87,
      -1,    -1,    -1,    -1,   757,   111,   112,   760,    -1,  1881,
    1882,  1883,  1884,  1885,  1886,  1887,  1888,  1427,    -1,   125,
      -1,  1431,    -1,   111,   112,    -1,    -1,    -1,    -1,   423,
      -1,    75,    76,   121,  2065,  2066,    80,    -1,    -1,   122,
     123,    -1,    -1,    87,    -1,    -1,    -1,    -1,    -1,   132,
      -1,    -1,    -1,    -1,   137,   138,   139,   936,   141,   142,
     143,   144,   145,     3,    -1,    -1,    -1,   111,   112,    -1,
      -1,    -1,    -1,    -1,    -1,  2016,    -1,  2018,  1048,  1049,
     124,   475,  1052,  1053,  1494,    -1,    -1,   840,    28,    -1,
     843,   844,   845,    -1,    -1,    -1,   975,    37,    38,    39,
      -1,    -1,  1512,  1975,    -1,    -1,    -1,    -1,    -1,   272,
     273,  1500,  1501,   866,   867,   868,    -1,    -1,    -1,    -1,
      -1,   515,   875,    -1,    -1,     3,  1773,  1774,    -1,    -1,
     883,   884,    -1,    -1,    -1,    75,    76,    -1,   891,    -1,
      80,   894,    -1,   896,  2085,   898,    -1,    87,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    -1,  1554,  1555,    -1,    -1,    -1,
      -1,   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   121,    -1,    -1,   124,    -1,    -1,    -1,   941,    -1,
       0,    -1,    -1,    -1,  1073,    -1,   949,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    87,
      -1,    -1,   965,   966,    -1,    -1,    -1,    -1,    -1,    -1,
     973,   974,    -1,    -1,    -1,   978,    -1,    -1,    -1,    -1,
      -1,   984,    -1,   111,   112,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   121,    -1,  1124,   124,    -1,    -1,    -1,
      -1,    -1,  1005,  1006,  1007,    -1,    -1,    -1,    -1,    -1,
    1013,  1048,  1049,    -1,    -1,  1052,  1053,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,  1688,    -1,
      -1,    -1,    -1,  1693,    94,    -1,    -1,    -1,    -1,    -1,
      -1,   101,   102,    -1,    -1,  1048,  1049,    -1,    -1,  1052,
    1053,  1054,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,
      -1,    -1,    -1,    -1,    -1,   709,    -1,    -1,    -1,  1072,
    1073,    -1,    -1,    -1,  1077,    -1,    -1,    -1,    -1,    -1,
    1083,    -1,    -1,   143,    -1,    -1,  1089,  1216,    -1,    -1,
      -1,   735,  1095,    -1,   738,   155,    -1,    -1,  1758,   159,
      -1,    -1,    -1,    -1,  1116,    -1,    -1,  1119,    -1,  1238,
    1113,    -1,    -1,  1116,    -1,    -1,  1119,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   542,
      -1,    -1,   545,    -1,    -1,    -1,    -1,    -1,    -1,  1799,
      -1,     0,    -1,    -1,    -1,  1157,    -1,    -1,    -1,    -1,
      -1,  1790,    -1,  1792,  1157,    -1,    -1,    -1,    -1,  1171,
    1172,  1173,  1174,    -1,    -1,    -1,    -1,    -1,  1171,  1172,
    1173,  1174,   142,    -1,    -1,   145,    -1,  1816,    -1,  1818,
     113,    -1,  1194,    -1,  1196,    -1,  1189,  1190,   158,    -1,
     160,  1194,   162,  1196,    53,    -1,   840,    -1,    -1,    -1,
    1203,    -1,    -1,    -1,    -1,    -1,    -1,  1210,    -1,    -1,
    1213,  1214,  1215,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   282,    -1,    83,    84,    85,    -1,    -1,    -1,
    1233,   875,   292,    92,   294,    94,    -1,  1240,    -1,    -1,
     884,    -1,   101,   102,    -1,    -1,    -1,   891,    -1,    -1,
      -1,    -1,  1912,    -1,   898,  1258,  1259,   670,   671,   672,
     673,    -1,  1265,  1266,    -1,    -1,  1269,  1270,   201,    -1,
      -1,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
    1500,  1501,    -1,   142,    -1,    -1,   145,   700,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,   158,
      -1,   160,    -1,   162,    -1,   949,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,   965,    -1,    -1,    -1,    -1,   185,   186,   187,    37,
      38,    39,    -1,    -1,  1554,  1555,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1982,  1983,  1984,  1985,  1986,    -1,    -1,
      -1,    -1,    -1,     0,  1483,    -1,    -1,  1996,  1997,  1998,
    1999,    -1,    -1,    -1,   223,   224,    -1,    75,    76,   429,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    87,
     440,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   332,
      -1,    -1,    -1,   111,   112,    -1,    53,    -1,  1411,  1412,
     269,    -1,    -1,   121,    -1,    -1,   124,    -1,    -1,   127,
      -1,   129,   130,   282,  1427,    -1,  2065,  2066,  1431,    -1,
      -1,    -1,   492,   292,    -1,   294,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    92,    -1,    94,    -1,    -1,
      -1,    -1,    -1,    -1,   101,   102,    -1,    -1,   391,    -1,
     393,    -1,    -1,  1500,  1501,    -1,    -1,    -1,    -1,    -1,
    1473,    -1,    -1,  1476,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   132,   133,    -1,    -1,    -1,
      -1,  1494,    -1,    -1,    -1,    -1,    -1,  1500,  1501,    -1,
     470,   471,  1505,  1506,  1507,  1508,    -1,    -1,    -1,    -1,
      -1,    -1,   482,    -1,    -1,    -1,    -1,  1554,  1555,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   496,   497,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,    -1,
     399,   400,   401,    -1,    -1,    -1,    -1,    -1,   518,   519,
      -1,  1554,  1555,   523,   524,    -1,    -1,   527,   528,  1203,
      -1,    -1,    -1,  1692,   423,  1694,  1210,    -1,    -1,    -1,
      -1,   430,    -1,  1576,   274,    -1,    -1,    -1,    -1,  1708,
    1709,    -1,   441,    -1,  1596,  1597,   233,  1590,  1591,   236,
      -1,    -1,    -1,  1596,  1597,    -1,   566,  1609,   568,    -1,
    1612,    -1,   535,    -1,    -1,    -1,  1609,    -1,  1620,  1612,
      -1,   470,   471,    -1,    -1,    -1,   475,  1620,    -1,    -1,
     479,    -1,   269,   482,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     0,   491,    -1,    -1,   282,    -1,   496,   497,   572,
      -1,    -1,    -1,   703,    -1,   292,    -1,   294,    -1,    -1,
      -1,    -1,  1655,    -1,    -1,    -1,   515,    -1,    -1,   518,
     519,    -1,    -1,    -1,   523,   524,    -1,    -1,   527,   528,
      -1,   604,   531,   532,   533,   534,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1688,    -1,  1690,    -1,    -1,
    1693,   550,   551,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     633,    -1,    -1,  1116,    -1,    -1,  1119,   566,  1711,   568,
      -1,    -1,   571,    -1,   573,    84,    -1,    -1,     0,    -1,
      -1,    -1,    -1,    -1,    -1,    94,    -1,    -1,    -1,   588,
      -1,    -1,   101,   102,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1157,   445,    -1,    -1,    -1,    -1,
      -1,    -1,   399,    -1,    -1,  1758,    -1,    -1,  1171,  1172,
    1173,  1174,  1982,  1983,    -1,  1985,  1986,    -1,    -1,    -1,
    1773,  1774,    -1,    -1,   143,    -1,  1996,  1997,  1998,  1999,
      -1,  1194,    -1,  1196,  1913,    -1,   155,  1790,    -1,  1792,
     159,    -1,  1795,  1922,   441,    -1,    -1,   730,    -1,    -1,
      -1,   734,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    94,  1816,    -1,  1818,    -1,   750,    -1,   101,
     102,    -1,    -1,   883,   757,    -1,    -1,   760,    -1,    -1,
      -1,    -1,  1476,    -1,   894,    -1,    -1,    -1,   697,  1851,
    1852,    -1,    -1,    -1,   703,  2065,  2066,   780,  1851,  1852,
    1979,  1980,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   143,    -1,    -1,    -1,   724,    -1,    -1,    -1,   728,
      -1,    -1,    -1,   155,   807,    -1,    -1,   159,    -1,    -1,
      -1,    -1,   815,    -1,   531,   532,   533,   534,   747,   536,
      -1,    -1,   539,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   835,   550,   551,   552,    -1,    -1,    -1,  1912,
      -1,  1914,    -1,   282,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   292,   571,   294,    -1,    -1,    -1,    -1,
      -1,    -1,  1576,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,    -1,    -1,    -1,    -1,  1982,  1983,    -1,  1985,  1986,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1996,
    1997,  1998,  1999,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     670,   671,   672,   673,    -1,    -1,    -1,    -1,    -1,  1982,
    1983,  1984,  1985,  1986,  1987,    -1,  1989,    -1,    -1,    -1,
      -1,    -1,    -1,  1996,  1997,  1998,  1999,    -1,    -1,    -1,
     282,   934,    -1,   936,    -1,    -1,    -1,    -1,   978,   868,
     292,    -1,   294,    -1,    -1,    -1,   875,    -1,    -1,    -1,
      -1,    -1,    -1,   882,   883,   884,    -1,    -1,  2065,  2066,
      -1,    -1,   891,   113,    -1,   894,    -1,   896,    -1,    -1,
      -1,    -1,   975,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     697,    -1,    -1,    -1,    -1,    -1,   703,   137,    -1,    -1,
     429,    -1,  2065,  2066,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   440,  1005,    -1,  1007,    -1,   935,    -1,  1048,  1049,
      -1,    -1,  1052,  1053,  1054,   944,    -1,    -1,    -1,    -1,
     949,    -1,    -1,    -1,    -1,    -1,   955,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   965,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   978,
      -1,   201,    -1,   492,    -1,    -1,    -1,    -1,    -1,   988,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1073,    -1,    -1,    -1,    -1,    -1,    -1,   429,    -1,    -1,
      -1,  1795,    -1,    -1,  1013,    -1,    -1,    28,   440,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    39,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1113,    -1,    -1,  1596,  1597,    -1,    -1,    -1,    -1,  1048,
    1049,  1124,    -1,  1052,  1053,  1054,  1609,    -1,    -1,  1612,
    1059,  1060,    -1,    -1,    75,    76,    -1,  1620,    -1,    80,
     492,  1070,    -1,    -1,    -1,    -1,    87,  1150,  1151,  1189,
    1190,    -1,    -1,    -1,   304,    -1,    -1,    -1,   308,   309,
     310,    -1,    -1,   313,    -1,    -1,    -1,    -1,    -1,   319,
     111,   112,    -1,    -1,    -1,   325,    -1,   947,    -1,   896,
     121,    -1,   332,   124,    -1,    -1,   127,    -1,   129,   130,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   349,
      -1,    -1,    -1,    -1,   354,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1216,    -1,    -1,    -1,    -1,   935,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1238,    -1,    -1,   955,    -1,
      -1,   391,    -1,   393,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1259,    -1,    -1,  1262,
    1189,  1190,    -1,  1266,   703,    -1,    -1,  1270,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,
      -1,  1210,    -1,    -1,  1213,    -1,  1215,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,  1233,    -1,    -1,    -1,    -1,    -1,
      -1,  1240,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1059,  1060,    -1,    -1,  1116,    -1,    -1,  1119,
      -1,   703,    -1,    -1,    -1,    66,    -1,    -1,  1128,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,  1851,  1852,
      -1,    -1,    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   535,    -1,  1157,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,  1171,  1172,  1173,  1174,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,   125,   126,    -1,    -1,   129,    -1,
      -1,    -1,   572,   134,   135,   136,   137,   138,   139,   140,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   883,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   604,   894,    -1,    -1,    -1,    -1,
    1500,  1501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1473,    -1,    -1,    -1,  1191,    -1,  1193,    -1,    -1,    -1,
    1483,    -1,    -1,   633,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1424,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1439,  1514,    -1,    -1,  1554,  1555,  1519,  1446,  1521,    -1,
      -1,    -1,    -1,    -1,  1453,    -1,    -1,    -1,    -1,    -1,
      -1,   883,    -1,    -1,    -1,  1538,    -1,    -1,    -1,    -1,
      -1,    -1,   894,    -1,    -1,  1474,    -1,  1476,    -1,    -1,
      -1,    -1,    -1,    -1,   704,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1500,  1501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     730,    -1,    -1,    -1,   734,    -1,    -1,    -1,  1591,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     750,    -1,    -1,    -1,    -1,    -1,    -1,   757,    -1,    -1,
     760,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1554,  1555,    -1,  1557,    -1,
     780,    -1,    -1,    -1,    -1,    -1,   786,   787,   788,   789,
     790,   791,   792,    -1,    -1,   795,   796,  1576,   798,   799,
     800,   801,   802,   803,   804,   805,    -1,   807,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   815,   816,   817,   818,   819,
     820,   821,   822,   823,   824,   825,   826,   827,   828,   829,
     830,   831,   832,   833,    -1,   835,    -1,    -1,    -1,  1692,
      -1,  1694,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1703,    -1,    -1,    -1,    -1,  1708,  1709,    -1,    -1,    -1,
      -1,    -1,  1715,    -1,    -1,    -1,   866,   867,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    53,    -1,    -1,  1453,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1790,    -1,  1792,  1682,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,  1774,    92,    -1,    -1,    -1,  1816,    -1,  1818,    -1,
      -1,    -1,    -1,    -1,   934,    -1,   936,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   132,   133,    -1,    -1,   966,    -1,    -1,    -1,
      -1,    -1,   137,    -1,    -1,   975,  1596,  1597,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1606,    -1,  1608,  1609,
    1557,    -1,  1612,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1620,    -1,    -1,  1623,    -1,  1005,    -1,  1007,    -1,    -1,
      -1,  1790,    -1,  1792,    -1,   185,  1795,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1878,  1879,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   201,  1816,    -1,  1818,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1828,
      -1,    -1,   349,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1913,    -1,    -1,   233,    -1,    -1,   236,    -1,    -1,  1922,
      -1,    -1,    -1,  1073,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1982,  1983,  1984,  1985,  1986,    -1,    -1,   269,
      -1,    -1,    -1,    -1,    -1,    -1,  1996,  1997,  1998,  1999,
      -1,    -1,   282,  1113,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1124,    -1,  1979,  1980,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   304,
      -1,    -1,    -1,   308,   309,   310,    -1,    -1,   313,    -1,
    1150,  1151,    -1,    -1,   319,    -1,    -1,    -1,    -1,    -1,
     325,    -1,    -1,    -1,    -1,    -1,    -1,   332,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2065,  2066,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   349,    -1,    -1,    -1,    -1,   354,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1982,  1983,  1984,  1985,  1986,     1,    -1,
       3,     4,     5,    -1,  1214,    -1,  1216,  1996,  1997,  1998,
    1999,  1841,  1842,  1843,  1844,    -1,   391,  1847,   393,   399,
      -1,  1851,  1852,    -1,  1854,    28,  1856,    -1,  1238,  2092,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1868,    -1,
      -1,    -1,  1819,    -1,    -1,  1255,    -1,  2110,    -1,  1259,
     425,    -1,  1262,    -1,    -1,    -1,  1266,    -1,    -1,    -1,
    1270,   441,    -1,    66,    -1,    -1,    -1,    -1,    -1,    72,
      73,    -1,    -1,    -1,    -1,    -1,  2065,  2066,    -1,    -1,
      -1,    -1,    -1,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,  2161,   479,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,
      -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     113,   134,   135,    -1,    -1,    -1,   643,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   332,    -1,
      -1,   531,   532,   533,   534,    -1,   536,    -1,    -1,   539,
     535,    -1,    -1,    -1,    -1,   349,    -1,    -1,    -1,    -1,
     550,   551,   552,    -1,    -1,    -1,    -1,  2007,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2016,    -1,  2018,    -1,
      -1,   571,    -1,    -1,    -1,    -1,    -1,   572,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1427,    -1,    -1,
      -1,  1431,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   604,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2072,  2073,    -1,    -1,  2076,    -1,  2078,    -1,
      -1,  2081,    -1,    -1,    -1,  2085,    -1,    -1,   633,   766,
      -1,    -1,    -1,  1473,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1483,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1494,    -1,    -1,    -1,  2118,    -1,
      -1,   274,   799,   800,   801,   802,   803,    -1,    -1,   806,
      -1,    -1,  1512,    -1,  1514,   812,    -1,    -1,    -1,  1519,
      -1,  1521,    -1,    -1,    -1,    -1,  2146,   697,    -1,    -1,
     827,   828,   829,   830,   831,    -1,    -1,   834,  1538,   704,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   332,
      -1,    -1,    -1,    -1,    -1,   730,    -1,    -1,    -1,   734,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   750,    -1,    -1,    -1,    -1,
      -1,  1591,   757,    -1,    -1,   760,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   780,    -1,    -1,    -1,    -1,
      -1,   786,   787,   788,   789,   790,   791,   792,    -1,    -1,
     795,   796,    -1,   798,   799,   800,   801,   802,   803,   804,
     805,    -1,   807,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   643,
     835,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1688,    -1,
      -1,    -1,  1692,  1693,  1694,    -1,    -1,    -1,    -1,    -1,
      -1,   866,   867,  1703,    -1,    -1,    -1,    -1,  1708,  1709,
      -1,    -1,    -1,    -1,    -1,  1715,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   896,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1734,  1735,    -1,  1737,  1738,    -1,
      -1,    -1,  1742,  1743,  1744,  1745,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1758,    -1,
      -1,    -1,    -1,    -1,    -1,   935,    -1,    -1,   541,   934,
      -1,   936,    -1,    -1,  1774,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   952,    -1,   954,   955,    -1,    -1,    -1,    -1,
      -1,    -1,   766,    -1,    -1,    -1,    -1,    -1,    -1,  1799,
      -1,   966,    -1,    -1,    -1,    -1,   780,    -1,    -1,    -1,
     975,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   799,   800,   801,   802,   803,
      -1,   604,   806,   807,  1131,    -1,    -1,    -1,   812,    -1,
    1005,   815,  1007,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   827,   828,   829,   830,   831,    -1,    -1,
     834,   835,  1159,    -1,    -1,   638,    -1,    -1,    -1,  1166,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1878,  1879,
      -1,  1881,  1882,  1883,  1884,  1885,  1886,  1887,  1888,  1059,
    1060,    -1,    -1,    -1,    -1,    -1,    -1,   670,   671,   672,
     673,    -1,    -1,  1200,    -1,  1202,    -1,    -1,  1073,    -1,
      -1,    -1,  1912,  1913,    -1,    -1,    -1,    -1,   133,    -1,
      -1,    -1,  1922,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1113,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   730,    -1,  1124,
      -1,   734,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     185,    -1,    -1,    -1,    -1,  1975,    -1,    -1,    -1,  1979,
    1980,    -1,    -1,    -1,    -1,  1150,  1151,    -1,    -1,    -1,
      -1,    -1,    -1,   766,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   780,    -1,   224,
      -1,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,  1191,    -1,  1193,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   807,    -1,    -1,    -1,    28,   812,
      -1,    -1,   815,    -1,    -1,    -1,    -1,    -1,    -1,  1214,
      -1,  1216,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   835,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1238,    -1,    -1,    66,   292,    -1,    -1,
      -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,
    1255,    -1,  2092,    -1,  1259,    85,    86,  1262,    -1,    -1,
      -1,  1266,    -1,    -1,    -1,  1270,    -1,    -1,    -1,    99,
    2110,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,   142,    -1,    -1,   145,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,   125,   126,    -1,   158,   129,
     160,    -1,   162,   133,   134,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,    -1,    -1,    -1,  1131,    -1,    -1,
      -1,  2161,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   399,  1159,    -1,    -1,    -1,    -1,
     405,    -1,  1166,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1200,    -1,  1202,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
    1023,    85,    86,    87,   274,    -1,    -1,    -1,    -1,    -1,
     475,    -1,  1427,    -1,    -1,    99,  1431,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,    -1,    -1,  1453,    -1,   119,   120,   121,  1262,    -1,
     124,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    -1,  1473,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1483,    -1,
      -1,   536,    -1,    -1,   539,    -1,    -1,    -1,    -1,  1494,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   552,    -1,    -1,
      -1,    -1,    -1,  1116,    -1,    -1,  1119,  1512,    -1,  1514,
      -1,    -1,    -1,    -1,  1519,  1128,  1521,    -1,   573,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   586,    -1,  1538,    -1,    -1,    -1,  1150,  1151,    -1,
      -1,    -1,    -1,    -1,  1157,    -1,  1159,  1557,    -1,    -1,
    1163,    -1,    -1,  1166,    -1,  1168,    -1,    -1,  1171,  1172,
    1173,  1174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1591,    -1,    -1,    -1,
      -1,  1728,    -1,    -1,    -1,    -1,  1733,  1734,  1735,  1736,
    1737,  1738,    -1,    -1,    -1,  1742,  1743,  1744,  1745,    -1,
     470,   471,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   496,   497,    -1,    -1,
      -1,    -1,   697,    -1,    -1,    -1,    -1,    -1,   703,  1262,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   518,   519,
      -1,    -1,    -1,   523,   524,    -1,    -1,   527,   528,    -1,
      -1,    -1,    -1,    -1,    -1,   535,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1688,    -1,    -1,    -1,  1692,  1693,  1694,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1703,    -1,
      -1,    -1,    -1,  1708,  1709,    -1,   566,    -1,   568,    -1,
    1715,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,  1734,
    1735,    -1,  1737,  1738,    -1,    -1,    -1,  1742,  1743,  1744,
    1745,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    -1,  1758,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1774,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      72,    73,    74,    -1,  1799,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,  1819,
     670,   671,   672,   673,    -1,    -1,    -1,    99,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   884,
      -1,    -1,    -1,    -1,    -1,    -1,   891,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,    -1,   129,    -1,    -1,
      -1,    -1,   134,   135,   136,   137,   138,   139,   140,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1878,  1879,    -1,  1881,  1882,  1883,  1884,
    1885,  1886,  1887,  1888,    -1,    -1,    -1,    -1,    -1,   944,
     750,    -1,    -1,    -1,   949,    -1,    -1,   757,    -1,    -1,
     760,  1514,    -1,    -1,    -1,    -1,    -1,  1912,  1913,    -1,
     965,    -1,    -1,    -1,  1728,    -1,    -1,  1922,    -1,  1733,
    1734,  1735,  1736,  1737,  1738,    -1,    -1,    -1,  1742,  1743,
    1744,  1745,  1545,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1013,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1975,    -1,    -1,    -1,  1979,  1980,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1596,  1597,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1606,    -1,  1608,  1609,    -1,    -1,  1612,
      -1,    -1,    -1,    -1,    -1,  1060,    -1,  1620,    -1,    -1,
    1623,    -1,    -1,    -1,  1069,    -1,  1071,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   915,   916,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1881,  1882,  1883,
    1884,  1885,  1886,  1887,  1888,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,  2092,    -1,    -1,
    1703,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1715,    -1,    28,  2110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1728,    -1,    -1,   978,    -1,
    1733,    -1,    -1,  1736,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1191,    -1,  1193,    -1,
      -1,    -1,    66,    -1,    -1,  1005,    -1,  1007,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,  2161,    -1,    -1,    -1,
      -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,  1800,  1048,  1049,
      -1,    -1,  1052,  1053,  1054,   119,   120,   121,  1811,    -1,
     124,   125,   126,    -1,    -1,   129,    -1,    -1,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,  1841,  1842,
    1843,  1844,    -1,    -1,  1847,    -1,    -1,    -1,  1851,  1852,
      -1,  1854,    -1,  1856,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1113,    -1,  1868,  1116,    -1,    -1,  1119,
      -1,    -1,    -1,    -1,    -1,  1878,  1879,    -1,  1128,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    80,  1157,    -1,    -1,
      -1,    85,    86,    87,    -1,    89,    90,    91,    -1,    -1,
      -1,  1171,  1172,  1173,  1174,    99,    -1,    87,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,  1189,
    1190,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,   125,   126,   127,    -1,   129,    -1,   131,    -1,   133,
     134,   135,     0,   137,   138,   139,   140,    -1,    -1,   129,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1991,    -1,
      -1,    -1,    -1,    -1,  1439,    -1,    -1,   157,    -1,    -1,
      -1,  1446,    -1,    -1,  2007,    -1,    -1,    -1,    -1,  1259,
      -1,    -1,    -1,  2016,    52,  2018,  1266,    -1,    -1,    -1,
    1270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1474,
      -1,  1476,    -1,    -1,  1479,    -1,    -1,  1482,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    93,    94,    -1,    -1,    -1,
      -1,    -1,    -1,   101,   102,    -1,  2069,    -1,    -1,  2072,
    2073,    -1,    -1,  2076,    -1,  2078,    -1,    -1,  2081,    -1,
      -1,   119,  2085,    -1,    -1,    -1,    -1,    -1,    -1,  2092,
      -1,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,   143,    -1,  2110,    -1,    -1,
      -1,    -1,  1557,    -1,    -1,  2118,    -1,   155,    28,    -1,
    1565,   159,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1576,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2146,    -1,    -1,    -1,    -1,    -1,    -1,
     188,   189,    -1,    -1,    -1,    -1,    66,    -1,  2161,    -1,
      -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    99,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,   125,   126,   127,    -1,   129,
      -1,    -1,    -1,  1473,   134,   135,   386,   137,   138,   139,
     140,   269,    -1,    -1,   272,   273,   274,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   282,    -1,    -1,    -1,    -1,    -1,
    1500,  1501,    -1,    -1,   292,   293,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   425,   426,    -1,    -1,  1519,
     430,  1521,    -1,    -1,   312,    -1,    -1,    -1,    -1,   439,
     318,    -1,   442,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   329,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1554,  1555,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   476,  1762,  1763,    -1,
    1765,    -1,   482,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1591,    -1,    -1,    -1,    -1,  1596,  1597,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1606,    -1,  1608,  1609,
      -1,    -1,  1612,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1620,    -1,    -1,  1623,  1819,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,
      -1,   429,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   561,   440,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   571,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
      -1,   591,    -1,    -1,   594,    -1,   596,   475,   598,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   492,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,
      -1,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   535,    -1,    -1,
      -1,    -1,    -1,    -1,   542,    -1,    -1,   545,    -1,    -1,
      -1,    -1,    -1,    84,    85,    -1,    -1,    -1,    89,    -1,
      -1,    -1,    -1,    94,  1774,    -1,    -1,    -1,    -1,    -1,
     101,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1790,    -1,  1792,    -1,    -1,    -1,    -1,    -1,   119,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,    -1,    -1,
      -1,   132,    -1,    -1,    -1,    -1,  1816,    -1,  1818,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1841,  1842,  1843,  1844,    -1,    -1,  1847,    -1,    -1,
      -1,  1851,  1852,    -1,  1854,    -1,  1856,   645,    -1,    -1,
      -1,    -1,   329,   184,    -1,    -1,    -1,    -1,  1868,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,
      -1,    -1,   670,   671,   672,   673,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,
     698,   699,   700,    -1,    -1,   703,    -1,    -1,    -1,    -1,
      -1,   709,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   717,
      -1,    -1,    -1,   843,   844,   845,   724,   725,   726,    -1,
     728,   729,    -1,    -1,    -1,    -1,    -1,   735,   269,    -1,
     738,    -1,    -1,    -1,    -1,    -1,   866,   867,   868,   747,
      -1,   282,   750,    -1,    -1,    -1,    -1,    -1,    -1,   757,
      -1,   292,   760,   294,   441,    -1,   638,    -1,    -1,    -1,
      -1,    -1,  1982,  1983,  1984,  1985,  1986,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1996,  1997,  1998,  1999,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2007,    -1,    -1,
     672,   673,    -1,    -1,    -1,    -1,  2016,    -1,  2018,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   941,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   840,    -1,    -1,    -1,   966,    -1,    -1,    -1,
      -1,    -1,    -1,   973,   974,  2065,  2066,    -1,    -1,    -1,
      -1,    -1,  2072,  2073,   984,    -1,  2076,    -1,  2078,    -1,
      -1,  2081,    -1,    -1,    -1,  2085,    -1,   875,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   883,   884,    -1,    -1,    -1,
      -1,    -1,   423,   891,    -1,    -1,   894,   895,   896,    -1,
     898,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2118,    -1,
     441,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2146,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   475,    -1,    -1,   478,    -1,    -1,
      -1,   949,  1072,    -1,    -1,    -1,    -1,  1077,    -1,    -1,
      -1,    -1,    -1,  1083,    -1,    -1,   643,   965,    -1,  1089,
      -1,    -1,    -1,    -1,    -1,  1095,    -1,    -1,    -1,    -1,
      -1,    -1,   659,    -1,   515,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   670,   671,   672,   673,    -1,    -1,    -1,
     531,   532,   533,   534,    -1,    -1,    -1,  1005,  1006,  1007,
      -1,    -1,    -1,    -1,    -1,  1013,    -1,    -1,    -1,   550,
     551,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   709,    -1,    -1,   712,    -1,    -1,     1,    -1,
     571,    -1,   573,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   584,    -1,    -1,    -1,    -1,   735,    -1,
      -1,    -1,    -1,    -1,   741,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
     621,   768,    -1,    -1,  1214,  1215,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,  1113,    -1,    80,  1116,    -1,
      -1,  1119,    -1,    86,    87,    88,    -1,    -1,    -1,   806,
      -1,    -1,    -1,    -1,  1132,    -1,    -1,   814,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   834,    -1,  1157,
      -1,    -1,    -1,    -1,    -1,   696,    -1,    -1,   131,    -1,
      -1,    -1,   703,  1171,  1172,  1173,  1174,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   724,    -1,    -1,  1194,   728,  1196,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1210,    -1,    -1,  1213,   747,    -1,    -1,   896,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1233,    -1,    -1,    -1,    -1,
      -1,    -1,  1240,    -1,  1116,    -1,    -1,  1119,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1128,    -1,    -1,    -1,
    1258,  1259,    -1,    -1,    -1,    -1,    -1,  1265,  1266,    -1,
      -1,  1269,  1270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1157,    -1,    -1,    -1,    -1,
      -1,  1411,  1412,    -1,    -1,    -1,    -1,    -1,    -1,  1171,
    1172,  1173,  1174,    -1,    -1,    -1,    -1,  1427,    -1,    -1,
      -1,  1431,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   868,   869,    -1,
      -1,    -1,    -1,    -1,   875,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   883,   884,    -1,    -1,    -1,    -1,    -1,    -1,
     891,    -1,    -1,   894,   895,   896,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1494,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1505,  1506,  1507,  1508,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   935,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   943,    -1,    -1,    -1,    -1,    -1,   949,    -1,
      -1,    -1,    -1,    -1,   955,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   965,    -1,    -1,    -1,    -1,  1116,
      -1,    -1,  1119,  1120,  1121,    -1,  1123,    -1,    -1,    -1,
      -1,    -1,    93,    -1,  1131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1139,    -1,    -1,    -1,    -1,    -1,    -1,  1146,
      -1,    -1,    -1,    -1,    -1,  1473,    -1,    -1,  1476,    -1,
    1157,    -1,  1013,    -1,    -1,    -1,    -1,  1164,    -1,    -1,
      -1,    -1,  1169,    -1,  1171,  1172,  1173,  1174,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1200,    -1,  1202,    -1,    -1,  1059,    -1,
      -1,    -1,    -1,    -1,    -1,  1655,    -1,  1068,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1234,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1688,    -1,
    1690,    -1,    -1,  1693,    -1,    -1,    -1,    -1,  1576,    -1,
      -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1590,  1591,    -1,    -1,    -1,    -1,  1596,  1597,
      -1,    -1,    -1,  1280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1609,    -1,    -1,  1612,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1620,    -1,    -1,    -1,    -1,    -1,   269,    -1,
      -1,   272,   273,   274,    -1,    -1,    -1,    -1,  1758,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   293,    -1,    -1,  1332,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1345,    -1,
      -1,   312,    -1,    -1,    -1,    -1,    -1,   318,    -1,  1210,
      -1,    -1,  1213,    -1,  1215,    -1,    -1,    -1,   329,    -1,
      -1,    -1,  1223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1233,    -1,    -1,    -1,    -1,    -1,    -1,  1240,
      -1,    -1,    -1,  1711,    -1,    -1,    -1,    -1,    -1,  1396,
      -1,   201,    -1,    -1,  1596,  1597,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1606,    -1,  1608,  1609,    -1,    -1,
    1612,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1620,    -1,
      -1,  1623,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,  1773,  1774,    -1,    -1,    -1,
      -1,    -1,   423,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1912,    -1,    -1,    -1,    -1,  1795,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,   304,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   313,   475,    -1,    -1,    -1,    67,   319,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,  1851,  1852,    -1,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1987,    -1,  1989,
      -1,    -1,   101,    -1,   515,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,   121,  1424,   535,   124,    -1,    -1,    -1,    -1,
      -1,   542,   131,    -1,   545,    -1,   135,  1438,    -1,    -1,
      -1,   391,    -1,   393,  1445,    -1,  1914,    -1,    -1,  1596,
    1597,    -1,  1453,    -1,    -1,  1602,    -1,  1604,    -1,    -1,
    1607,  1608,    -1,    -1,    -1,    -1,  1613,  1614,    -1,  1616,
      -1,    -1,    -1,  1474,    -1,  1476,    -1,    -1,    -1,  1626,
      -1,  1628,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1841,
    1842,  1843,  1844,    -1,    -1,  1847,    -1,    -1,    -1,  1851,
    1852,    -1,  1854,  1660,  1856,    -1,    -1,  1664,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1868,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   329,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1556,    -1,    -1,    -1,   670,
     671,   672,   673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1576,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   535,    -1,   698,   699,   700,
      93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   709,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   717,    -1,    -1,    -1,
      -1,    -1,    -1,   724,   725,   726,    -1,   728,   729,    -1,
      -1,    -1,   572,    -1,   735,    -1,    -1,   738,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   747,    -1,    -1,   750,
      -1,    -1,    -1,    -1,    -1,    -1,   757,    -1,    -1,   760,
     441,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2007,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2016,    -1,  2018,    -1,    -1,    -1,
      -1,  1682,  1829,   633,    -1,   188,   189,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1847,  1848,    -1,    -1,    -1,    -1,    -1,    -1,  1855,    -1,
      -1,    -1,  1859,    -1,  1861,    -1,    -1,    -1,    -1,    -1,
      -1,   224,    -1,  1870,    -1,    -1,    -1,    -1,    -1,   840,
    2072,  2073,    -1,    -1,  2076,    -1,  2078,    -1,    -1,  2081,
      -1,    -1,    -1,  2085,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1754,   704,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   875,    -1,   269,  1914,    -1,   272,
     273,   274,    -1,   884,    -1,  1776,  2118,    -1,    -1,    -1,
     891,    -1,    -1,    -1,    -1,   896,    -1,   898,    -1,    -1,
     293,    -1,    -1,    -1,  1795,    -1,    -1,    -1,    -1,    -1,
     750,    -1,    -1,    -1,  2146,    -1,    -1,   757,    -1,   312,
     760,    -1,    -1,    -1,    -1,   318,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   329,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   949,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   643,    -1,   965,    -1,    -1,    -1,    -1,    -1,
      -1,  2008,  2009,    -1,  2011,    -1,  2013,    -1,   659,  2016,
    2017,  2018,   663,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1894,  1005,  1006,  1007,    -1,    -1,    -1,
      -1,    -1,  1013,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   709,    -1,
     423,   712,    -1,    -1,    -1,    -1,    -1,  2074,    -1,    -1,
    2077,    -1,    -1,    -1,    -1,   726,    -1,    -1,  2085,    -1,
      -1,    -1,    -1,    -1,   735,    -1,    -1,    -1,    -1,    -1,
     741,   742,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   475,    -1,  2121,    -1,    -1,   768,    -1,    -1,
      -1,    -1,    -1,    -1,   934,    -1,   936,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1113,    -1,    -1,  1116,     1,    -1,  1119,     4,
       5,     6,   515,     8,     9,   806,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   814,    -1,   975,    -1,    -1,    -1,    -1,
      -1,    -1,   535,    -1,    -1,    -1,    -1,    -1,    -1,   542,
      -1,    -1,   545,   834,    -1,    -1,  1157,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1005,    -1,  1007,    -1,    -1,
    1171,  1172,  1173,  1174,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,  1194,    -1,  1196,    -1,    -1,    -1,    -1,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1210,
      -1,    -1,  1213,    -1,    99,   896,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,  1233,  1073,   119,   120,    -1,    -1,    -1,  1240,
      -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    -1,  1258,  1259,    -1,
      -1,    -1,    -1,    -1,  1265,  1266,    -1,    -1,  1269,  1270,
      -1,    -1,    -1,  1113,    -1,    -1,    -1,   670,   671,   672,
     673,    -1,    -1,    -1,  1124,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   698,   699,   700,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   709,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   717,    -1,    -1,    -1,    -1,    -1,
      -1,   724,   725,   726,    -1,   728,   729,    -1,    -1,    -1,
      -1,    -1,   735,    -1,    -1,   738,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   747,    -1,    -1,   750,    -1,    -1,
      -1,    -1,    -1,    -1,   757,    -1,    -1,   760,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1216,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1238,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,  1259,
      -1,    -1,    -1,    -1,    -1,    -1,  1266,    -1,    -1,    -1,
    1270,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,  1120,
    1121,    -1,  1123,    -1,    -1,    -1,    -1,   840,    -1,    -1,
    1131,    -1,    -1,  1134,    -1,    -1,    -1,    -1,  1139,    -1,
      -1,    -1,    -1,    -1,    -1,  1146,  1147,    -1,    -1,    -1,
      53,    -1,  1473,    66,    -1,  1476,    -1,    60,    -1,    72,
      73,    74,   875,  1164,  1165,    -1,    -1,    -1,  1169,    -1,
      -1,   884,    85,    86,    -1,    -1,    -1,    -1,   891,    -1,
      83,    84,    85,   896,    -1,   898,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,  1200,
      -1,  1202,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,   127,    -1,   129,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    -1,   132,
     133,    -1,    -1,  1234,    -1,    -1,   949,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,    -1,    -1,
      -1,    -1,   965,    -1,    -1,  1576,    -1,    -1,    -1,    -1,
      -1,    -1,   165,    -1,    -1,    -1,    -1,    -1,    -1,  1590,
    1591,    -1,    -1,    -1,    -1,  1596,  1597,    -1,    -1,  1280,
    1281,    -1,   185,    -1,    -1,    -1,    -1,    -1,  1609,    -1,
      -1,  1612,  1005,  1006,  1007,    -1,    -1,    -1,    -1,  1620,
    1013,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1473,    -1,    -1,    -1,    -1,    -1,    -1,
     223,   224,    -1,  1483,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1332,    -1,  1334,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1345,  1346,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1519,
      -1,  1521,    -1,    -1,    -1,    -1,   269,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1538,   282,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,
    1711,    -1,    -1,    -1,    -1,  1396,    -1,  1398,    -1,    -1,
    1113,    -1,    -1,  1116,    -1,    -1,  1119,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1591,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1157,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1773,  1774,    -1,    -1,    -1,    -1,  1171,  1172,
    1173,  1174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1795,    -1,    -1,    -1,    -1,    -1,
      -1,  1194,    -1,  1196,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   399,  1210,    -1,    -1,
    1213,    -1,   405,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1233,    -1,    -1,    -1,    -1,    -1,    -1,  1240,    -1,    -1,
    1851,  1852,  1692,    -1,  1694,    -1,    -1,    -1,   441,    -1,
      -1,    -1,    -1,    -1,    -1,  1258,  1259,    -1,  1708,  1709,
      -1,    -1,  1265,  1266,    -1,    -1,  1269,  1270,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   475,    -1,  1734,  1735,    -1,  1737,  1738,    -1,
      -1,  1582,  1742,  1743,  1744,  1745,    -1,    -1,   491,    -1,
      -1,    -1,    -1,  1914,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1602,  1603,  1604,  1605,    -1,  1607,  1608,    -1,    53,
      -1,    -1,  1613,  1614,  1774,  1616,    -1,  1618,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1626,  1627,  1628,   531,   532,
     533,   534,    -1,   536,    -1,    -1,   539,    -1,    -1,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1660,
      -1,  1662,    -1,  1664,    -1,  1666,   569,    -1,   571,    -1,
     573,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   586,    -1,    -1,    -1,    -1,   132,   133,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1881,  1882,  1883,  1884,  1885,  1886,  1887,  1888,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1913,    -1,    -1,    -1,    -1,    -1,    -1,
    1473,    -1,  1922,  1476,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     224,    -1,    -1,    -1,    -1,    -1,   689,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   697,    -1,    -1,    -1,    -1,    -1,
     703,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1975,    -1,    -1,    -1,  1979,
    1980,    -1,    -1,    -1,    -1,   269,    -1,    -1,  1829,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1848,   292,    -1,
      -1,    -1,  1853,    -1,  1855,  1856,    -1,  1858,  1859,    -1,
    1861,    -1,  1863,  1576,    -1,    -1,    -1,    -1,  1869,  1870,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1590,  1591,    -1,
      -1,    -1,    -1,  1596,  1597,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,    -1,  1609,    -1,    -1,  1612,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1620,    -1,    -1,
      -1,    -1,    -1,  1914,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   399,    67,    -1,    -1,    -1,
      -1,   405,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,   882,
      -1,   884,    -1,    -1,    -1,    -1,    -1,    -1,   891,    -1,
     101,    -1,    -1,   896,    -1,    -1,    -1,   441,  1711,    -1,
     111,   112,   113,   114,   115,   116,    -1,  2008,  2009,    -1,
    2011,  2012,  2013,    -1,    -1,    -1,  2017,  2018,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   475,   935,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   944,    -1,    -1,    -1,    -1,   949,    -1,    -1,    -1,
      -1,    -1,   955,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1773,  1774,   965,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2074,  2075,    -1,  2077,  2078,    -1,    -1,
      -1,  2082,  1795,    -1,    -1,    -1,    93,   531,   532,   533,
     534,    -1,   536,    -1,    -1,   539,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,    -1,
    1013,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2121,    -1,    -1,    -1,    -1,    -1,    -1,   571,    -1,   573,
      -1,    -1,    -1,    -1,    -1,    -1,   143,    -1,  1851,  1852,
      -1,    -1,   586,    -1,    -1,    -1,    -1,    -1,   155,    -1,
      -1,    -1,   159,    -1,    -1,    -1,  1059,  1060,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1069,    -1,  1071,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   188,   189,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1914,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   697,    -1,    -1,    -1,    -1,    -1,   703,
      -1,    -1,   269,    -1,    -1,   272,   273,   274,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   293,    -1,  1191,    -1,
    1193,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,
      -1,   318,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    89,    90,    91,    -1,
      -1,    93,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,   127,    -1,   129,    -1,   131,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   143,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,
      -1,    -1,   429,   155,    -1,    -1,    -1,   159,    -1,    -1,
      -1,    -1,    -1,   440,    -1,    -1,    -1,    -1,    -1,    -1,
     884,    -1,    -1,    -1,    -1,    -1,    -1,   891,    -1,    -1,
      -1,    -1,   896,    -1,    -1,    -1,   188,   189,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   475,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   492,    -1,    -1,    -1,    -1,
      -1,   935,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     944,    -1,    -1,    -1,    -1,   949,    -1,    -1,   515,    -1,
      -1,   955,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   965,    -1,    -1,    -1,    -1,    -1,    -1,   535,    -1,
      -1,    -1,    -1,    -1,    -1,   542,  1439,   269,   545,    -1,
     272,   273,   274,  1446,    -1,    -1,    -1,    -1,    -1,    -1,
    1453,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   293,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1013,
      -1,  1474,    -1,  1476,    -1,    -1,  1479,    -1,    -1,  1482,
     312,    -1,    -1,    -1,    -1,    -1,   318,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1059,  1060,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1069,    -1,  1071,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1557,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1565,   670,   671,   672,   673,    -1,    -1,    -1,
      -1,    -1,    -1,  1576,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   698,   699,   700,    -1,    -1,    -1,   429,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   440,    -1,
     717,    -1,    -1,    -1,    -1,    -1,    -1,   724,   725,    -1,
      -1,   728,   729,    -1,    -1,    -1,    -1,    -1,    93,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   750,    -1,    -1,    -1,  1191,    -1,  1193,
     757,    -1,    -1,   760,    -1,    -1,    -1,    -1,    -1,    -1,
     492,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   143,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     155,    -1,    -1,    -1,   159,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   535,    -1,    -1,    -1,    -1,    -1,    -1,
     542,    -1,    -1,   545,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   188,   189,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   840,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1762,
    1763,    -1,  1765,    -1,    -1,    -1,    -1,    -1,   875,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   883,   884,    -1,    -1,
      -1,    -1,    -1,    -1,   891,    -1,    -1,   894,    -1,    -1,
      -1,   898,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   269,    -1,    -1,   272,   273,   274,
      -1,    -1,    -1,    -1,    -1,    -1,  1819,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   293,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   670,   671,
     672,   673,   949,    -1,    -1,    -1,    -1,   312,    -1,    -1,
      -1,    -1,    -1,   318,    -1,    -1,    -1,    -1,   965,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   698,   699,   700,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   717,    -1,    -1,    -1,    -1,
      -1,    -1,   724,   725,    -1,  1439,   728,   729,  1005,  1006,
    1007,    -1,  1446,    -1,    -1,    -1,  1013,    -1,    -1,  1453,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   750,    -1,
      -1,    -1,    -1,    -1,    -1,   757,    -1,    -1,   760,    -1,
    1474,    -1,  1476,    -1,    -1,  1479,    -1,    -1,  1482,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   429,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   440,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1113,    -1,    -1,  1116,
      -1,    -1,  1119,  1557,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1565,    -1,    -1,    -1,    -1,    -1,   492,    -1,    -1,
      -1,    -1,  1576,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1157,   883,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   894,    -1,  1171,  1172,  1173,  1174,    -1,    -1,
     535,    -1,    -1,    -1,    -1,    -1,    -1,   542,    -1,    -1,
     545,    -1,    -1,    -1,    -1,    -1,    -1,  1194,    -1,  1196,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1213,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1233,    -1,    -1,    -1,
      -1,    -1,    -1,  1240,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1258,  1259,    -1,    -1,    -1,    -1,    -1,  1265,  1266,
      -1,    -1,  1269,  1270,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1005,  1006,  1007,    -1,    -1,    -1,    -1,
      -1,  1013,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   670,   671,   672,   673,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1762,  1763,
      -1,  1765,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   698,   699,   700,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   717,    -1,    -1,    -1,    -1,    -1,    -1,   724,
     725,    -1,    -1,   728,   729,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1819,    -1,    -1,    -1,    -1,
      -1,  1113,    -1,    -1,  1116,   750,     1,  1119,     3,     4,
       5,     6,   757,     8,     9,   760,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1157,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1171,
    1172,  1173,  1174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,  1194,    -1,  1196,    -1,  1473,    -1,    -1,  1476,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1213,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,  1233,    -1,    -1,   119,   120,   121,    -1,  1240,   124,
     125,   126,   127,    -1,   129,    -1,    -1,    -1,   883,   134,
     135,    -1,   137,   138,   139,   140,  1258,  1259,    -1,   894,
      -1,    -1,    -1,  1265,  1266,    -1,    -1,  1269,  1270,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1576,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1590,  1591,    -1,    -1,    -1,    -1,  1596,
    1597,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1609,    -1,    -1,  1612,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1620,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1005,  1006,  1007,    -1,    -1,    -1,    28,    -1,  1013,    -1,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,    -1,   119,   120,   121,
      -1,  1473,   124,   125,   126,    -1,    -1,    -1,  1113,    -1,
      -1,  1116,   134,   135,  1119,   137,   138,   139,   140,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1773,  1774,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1795,    -1,
      -1,    -1,  1157,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1171,  1172,  1173,  1174,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1194,
      -1,  1196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1851,  1852,    -1,    -1,  1213,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1590,  1591,
      -1,    -1,    -1,    -1,  1596,  1597,    -1,    -1,  1233,    -1,
      -1,    -1,    -1,    -1,    -1,  1240,    -1,  1609,    -1,    -1,
    1612,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1620,    -1,
      -1,    -1,    -1,  1258,  1259,    -1,    -1,    -1,    -1,    -1,
    1265,  1266,    -1,    -1,  1269,  1270,    -1,    -1,    -1,     1,
      -1,    -1,    -1,    -1,    -1,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
     122,   123,   124,    -1,    -1,   127,   128,   129,   130,    -1,
     132,  1773,  1774,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1473,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1851,
    1852,    66,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,    -1,    -1,   132,    -1,   134,
     135,    -1,   137,   138,   139,   140,   141,   142,   143,   144,
     145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1590,  1591,    -1,    -1,    -1,
      -1,  1596,  1597,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1609,    -1,    -1,  1612,    -1,    -1,
      -1,    -1,    -1,     0,     1,  1620,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    -1,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1773,  1774,
      -1,    -1,    -1,    -1,    -1,    -1,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    -1,    69,  1851,  1852,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      -1,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    -1,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    -1,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      -1,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    -1,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    -1,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      -1,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    -1,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    -1,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      -1,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    -1,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    -1,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      -1,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,    -1,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,   122,
     123,   124,   125,   126,    -1,   128,   129,    -1,    -1,   132,
      -1,   134,   135,    -1,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    -1,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,   125,   126,
     127,    -1,   129,   130,   131,   132,   133,   134,   135,    -1,
     137,   138,   139,   140,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    -1,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,   125,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,   140,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
     125,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,   125,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
      -1,   124,   125,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,   125,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    -1,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,   125,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    -1,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,   125,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    -1,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,   125,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      -1,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    -1,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    -1,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,   140,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    -1,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    -1,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    -1,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      -1,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    -1,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    -1,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,   140,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    -1,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    -1,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    -1,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
      -1,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
      67,    -1,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    -1,    -1,
      66,    67,    -1,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,   140,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    -1,
      -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    -1,    -1,    66,    67,    -1,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    -1,    -1,    66,    67,    -1,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,   125,   126,   127,    -1,
     129,   130,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,
      89,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
      -1,    -1,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,
      89,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
      -1,    -1,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,     1,   126,     3,     4,
       5,     6,    -1,     8,     9,   134,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
       1,   126,     3,     4,     5,     6,    -1,     8,     9,   134,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,     1,   126,     3,     4,     5,     6,
     131,     8,     9,   134,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    99,    -1,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      28,    -1,   119,   120,   121,    -1,    -1,   124,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,    -1,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    89,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,    -1,    -1,   131,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    89,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,    -1,    -1,   131,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    89,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,    -1,    -1,   131,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
      -1,   129,    -1,    -1,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,    -1,   129,    -1,    -1,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,
      86,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,
     126,   127,    -1,   129,    -1,    -1,    -1,    -1,   134,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,   129,
     130,   131,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    85,    86,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,   125,   126,   127,    -1,   129,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,   127,
      -1,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    -1,    -1,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    66,    -1,    -1,    -1,    -1,    -1,
      72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      66,    -1,   124,    -1,   126,    -1,    72,    73,    74,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,   140,    85,
      86,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,    -1,   134,   135,
      -1,   137,   138,   139,   140,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    66,    -1,    -1,    -1,
      -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,   121,    66,    -1,   124,   125,   126,    -1,    72,    73,
      74,   131,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,    85,    86,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,   125,   126,    -1,    -1,    -1,    -1,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    66,    -1,
      -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    66,    -1,   124,    -1,   126,   127,
      72,    73,    74,   131,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    85,    86,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,    -1,   129,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,    -1,
      -1,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      66,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,   120,   121,    66,    -1,   124,   125,
     126,   127,    72,    73,    74,    -1,    -1,    -1,   134,   135,
      -1,   137,   138,   139,   140,    85,    86,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
      -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    85,    86,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,   125,   126,    -1,    -1,   129,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    66,     8,
       9,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,    66,   126,    -1,
      -1,   129,    -1,    72,    73,    74,   134,   135,   136,   137,
     138,   139,   140,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,
     129,    -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    66,     8,     9,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,    66,   126,    -1,    -1,   129,    -1,    72,    73,
      74,   134,   135,   136,   137,   138,   139,   140,    -1,    -1,
      -1,    85,    86,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,    -1,   126,    -1,    -1,   129,    -1,    -1,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
      -1,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,    -1,   129,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,
      86,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,
     126,    -1,    -1,   129,    -1,    -1,    -1,    -1,   134,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,   125,   126,    -1,    -1,   129,
      -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    66,    -1,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    66,    -1,
     124,   125,   126,   127,    72,    73,    74,    -1,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    85,    86,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    -1,    -1,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    66,    -1,    -1,    -1,    -1,    -1,
      72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      66,    -1,   124,   125,   126,   127,    72,    73,    74,    -1,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,    85,
      86,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,
     126,    -1,    -1,   129,    -1,    -1,    -1,   133,   134,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,   129,
      -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    85,    86,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,   125,   126,    -1,    -1,   129,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
      -1,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,    -1,   129,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,    -1,
      -1,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      66,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,   120,   121,    66,    -1,   124,   125,
     126,   127,    72,    73,    74,    -1,    -1,    -1,   134,   135,
      -1,   137,   138,   139,   140,    85,    86,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,   125,   126,    -1,    -1,   129,
      -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    85,    86,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,    -1,   126,    -1,    -1,    -1,   130,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
      -1,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,    -1,   129,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,
      86,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,
     126,    -1,    -1,   129,    -1,    -1,    -1,    -1,   134,   135,
      -1,   137,   138,   139,   140,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    66,    -1,    -1,    -1,
      -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,   121,    66,    -1,   124,    -1,   126,    -1,    72,    73,
      74,    -1,    -1,    -1,   134,   135,   136,   137,   138,   139,
     140,    85,    86,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,    -1,   126,    -1,    -1,    -1,    -1,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    66,    -1,
      -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    66,    -1,   124,    -1,   126,    -1,
      72,    73,    74,    -1,    -1,    -1,   134,   135,   136,   137,
     138,   139,   140,    85,    86,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,   135,   136,   137,   138,   139,   140,    -1,
      -1,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      66,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,   120,   121,    66,    -1,   124,    -1,
     126,    -1,    72,    73,    74,   131,    -1,    -1,   134,   135,
      -1,   137,   138,   139,   140,    85,    86,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   134,   135,   136,   137,   138,   139,
     140,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    66,    -1,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    66,    -1,
     124,    -1,   126,    -1,    72,    73,    74,    -1,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,    85,    86,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    -1,    -1,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    66,    -1,    -1,    -1,    -1,    -1,
      72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      66,    -1,   124,    -1,   126,    -1,    72,    73,    74,   131,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,    85,
      86,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,
     136,   137,   138,   139,   140,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    66,    -1,    -1,    -1,
      -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,   121,    66,    -1,   124,   125,   126,    -1,    72,    73,
      74,    -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,    85,    86,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    66,    -1,
      -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    66,    -1,   124,    -1,   126,    -1,
      72,    73,    74,   131,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    85,    86,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1,   131,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,    -1,
      -1,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      66,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,   120,   121,    66,    -1,   124,    -1,
     126,    -1,    72,    73,    74,   131,    -1,    -1,   134,   135,
      -1,   137,   138,   139,   140,    85,    86,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1,
      -1,   131,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    66,    -1,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    66,    -1,
     124,   125,   126,    -1,    72,    73,    74,    -1,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    85,    86,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,    -1,
      -1,    -1,    -1,   131,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    -1,    -1,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    66,    -1,    -1,    -1,    -1,    -1,
      72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      66,    -1,   124,   125,   126,    -1,    72,    73,    74,    -1,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,    85,
      86,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,
      -1,   137,   138,   139,   140,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    66,    -1,    -1,    -1,
      -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,   121,    66,    -1,   124,    -1,   126,    -1,    72,    73,
      74,    -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,    85,    86,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    66,    -1,
      -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    66,    -1,   124,    -1,   126,    -1,
      72,    73,    74,    -1,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,     0,     1,    -1,     3,     4,     5,   119,   120,   121,
      -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,   125,   126,   127,    -1,
     129,   130,    -1,    -1,    -1,   134,   135,     0,     1,    -1,
       3,     4,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,   129,   130,    -1,    -1,
      -1,   134,   135,     0,     1,    -1,     3,     4,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      67,    -1,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,
     127,     0,     1,   130,     3,     4,     5,   134,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,     0,
       1,   130,     3,     4,     5,   134,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    67,    -1,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,    -1,    -1,   124,    -1,   126,   127,     0,     1,   130,
       3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,     1,   130,     3,     4,
       5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,     1,   130,     3,     4,     5,   134,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      67,    -1,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,     1,   130,     3,     4,     5,   134,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
       1,   130,     3,     4,     5,   134,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    67,    -1,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,
       3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,     1,   130,     3,     4,
       5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,     1,   130,     3,     4,     5,   134,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      67,    -1,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,     1,   130,     3,     4,     5,   134,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
       1,   130,     3,     4,     5,   134,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    67,    -1,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,
       3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,     1,   130,     3,     4,
       5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,     1,   130,     3,     4,     5,   134,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      67,    -1,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,     1,   130,     3,     4,     5,   134,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
       1,   130,     3,     4,     5,   134,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    67,    -1,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,
       3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,     1,   130,     3,     4,
       5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,     1,   130,     3,     4,     5,   134,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      67,    -1,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,     1,   130,     3,     4,     5,   134,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
       1,   130,     3,     4,     5,   134,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    67,    -1,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,
       3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,     1,   130,     3,     4,
       5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,     1,   130,     3,     4,     5,   134,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      67,    -1,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,     1,   130,     3,     4,     5,   134,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
       1,   130,     3,     4,     5,   134,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    67,    -1,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,
       3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,     1,   130,     3,     4,
       5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,     1,   130,     3,     4,     5,   134,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      67,    -1,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,     1,   130,     3,     4,     5,   134,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
       1,   130,     3,     4,     5,   134,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    67,    -1,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,
       3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,     1,   130,     3,     4,
       5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,     1,   130,     3,     4,     5,   134,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      67,    -1,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,     1,   130,     3,     4,     5,   134,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
       1,   130,     3,     4,     5,   134,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    67,    -1,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,
       3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,     1,   130,     3,     4,
       5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,     1,   130,     3,     4,     5,   134,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      67,    -1,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,     1,   130,     3,     4,     5,   134,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
       1,   130,     3,     4,     5,   134,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    67,    -1,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,    -1,    -1,   124,    -1,   126,   127,     1,    -1,     3,
       4,     5,    -1,   134,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    67,    -1,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,     1,   121,     3,    -1,
     124,    -1,   126,   127,    -1,    -1,    -1,    -1,    -1,    -1,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,     1,   121,     3,    -1,   124,
     125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,     3,    -1,   121,    -1,    -1,   124,   125,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,     3,
      -1,   121,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   135,    -1,   137,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,     3,    -1,   121,    -1,    -1,
     124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,     3,    -1,   121,    -1,    -1,   124,    -1,    -1,    -1,
      -1,    -1,    -1,   131,    -1,    -1,    -1,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,     3,    -1,   121,
      -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,     3,    -1,   121,    -1,    -1,   124,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,     3,
      -1,   121,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,
     124,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   135,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,     3,    -1,    -1,    -1,   121,
      -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
      78,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,   106,    -1,
      -1,     3,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,    -1,   124,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   133,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    -1,    69,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    79,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1,    -1,
      -1,   133,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   133,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
       1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   127,    -1,   129,   130,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     101,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,     1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   130,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,     1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   130,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,     0,     1,    -1,     3,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   130,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    -1,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    77,    78,    -1,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,   102,     3,    -1,    -1,
     106,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,
      -1,   127,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
       3,    -1,   108,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,     3,    -1,   108,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,     1,    -1,     3,    -1,   108,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     130,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,    -1,
     127,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,
      -1,   127,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,
      -1,    -1,   127,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,
     124,    -1,    -1,   127,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    77,    78,    -1,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,   102,    -1,
       0,     1,   106,     3,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,
     124,    -1,    -1,   127,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,    -1,   124,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,   101,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    -1,
      -1,   124,   125,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,   101,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,
      -1,   125,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,   101,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,
     125,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,   101,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,   125,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,   101,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,   101,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,   101,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,    -1,   124,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    -1,
      -1,   124,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,    -1,   124,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,   121,    -1,    -1,   124,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,    -1,   124,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,    -1,   124,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
      -1,    -1,    -1,   124,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,
     124,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    67,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    67,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    81,    82,    -1,    -1,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,
     125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     135,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   131,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    54,    66,    67,    75,
      76,    77,    78,    80,    81,    82,    83,    84,    86,    87,
      88,   101,   102,   106,   111,   112,   113,   114,   115,   116,
     117,   118,   121,   124,   127,   147,   148,   149,   151,   176,
     213,   214,   215,   216,   217,   218,   270,   273,   274,   277,
     278,   279,   280,   281,   282,   283,   285,   289,   292,   293,
     294,   295,   296,   297,   302,   303,   312,   313,   314,   321,
     322,   326,   329,   334,   363,   366,   367,   385,   386,   388,
     389,   390,   391,   392,   393,    78,   133,     5,    31,   218,
     387,   218,   124,   124,   124,   151,   218,   387,   283,   284,
     321,   329,    37,   149,   218,   311,   312,   314,   316,   317,
     318,   320,   321,   329,   332,   333,   338,   122,   127,   148,
     149,   218,   131,   133,   127,   131,   130,   121,   122,   213,
     218,   131,   151,   218,   131,   133,   130,   122,   131,   133,
     131,   130,   131,   149,   218,   321,     1,    31,    37,    38,
      39,   127,   147,   149,   215,   217,   218,   270,   280,   281,
     283,   285,   314,   318,   321,   329,   332,   333,   334,   336,
     344,   345,   346,   347,    37,    38,    39,   149,   321,   346,
     124,   135,     1,    29,    30,    31,    32,    33,    66,   117,
     118,   125,   147,   218,   269,   273,   275,   276,   283,   285,
     289,   290,   291,   297,   301,   309,   310,   350,   351,   352,
     353,   354,   355,   329,   124,   314,   321,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    47,    48,
      67,    86,    88,   101,   113,   114,   115,   116,   131,   151,
     172,   173,   269,   274,   275,   283,   286,   290,   292,   300,
     365,   368,   369,   370,   375,   376,   377,    31,    77,   133,
     215,   217,   302,   366,   367,   385,   386,   393,     1,   215,
     279,   296,   302,   334,   363,   389,     1,   388,   389,     0,
     218,   387,   387,     5,   128,   387,     1,     4,     6,     8,
       9,    66,    72,    73,    74,    85,    86,    99,   103,   104,
     105,   106,   107,   108,   109,   110,   119,   120,   121,   124,
     126,   134,   135,   137,   138,   139,   140,   151,   177,   178,
     218,   219,   220,   221,   222,   225,   226,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   387,
     399,   400,   401,   402,   148,   218,   131,   151,   218,   283,
     329,   135,   124,   135,   125,   309,   310,   354,   355,   329,
     332,   333,   311,   316,   320,   321,   125,   321,   125,   321,
     321,    86,   151,   203,   205,   207,   211,   212,   218,   230,
     235,   251,   255,   301,   127,   122,   122,   127,     1,    69,
      79,    81,    82,    89,    92,    93,    94,    95,    97,    99,
     100,   124,   126,   127,   130,   152,   153,   154,   155,   156,
     157,   158,   159,   174,   175,   177,   178,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   194,   198,   199,
     200,   201,   218,   226,   249,   301,   313,   315,   321,   329,
     334,   335,   364,    81,    82,   218,   269,   273,   283,   286,
     289,   297,   304,   305,     1,   130,   200,   201,   149,   218,
       1,   218,   271,   272,     1,   130,   272,   305,    66,   204,
     206,   208,   209,   210,   218,   301,     1,   130,   200,   201,
     305,     1,   130,   200,   201,     1,   130,   200,   201,   149,
     218,   129,   129,   129,   129,   131,   329,   314,   318,   321,
       1,   128,   369,   376,   377,   369,   376,   377,     1,   127,
     129,   129,   329,   127,   136,   148,   218,   244,   263,   267,
     268,   129,   131,   151,   218,   130,   131,   130,   131,   321,
      37,   124,   135,   137,   147,   149,   218,   269,   275,   283,
     285,   290,   311,   312,   321,   327,   329,   330,   333,     1,
     125,   129,     1,   125,   129,     1,   129,     1,   129,   125,
     125,   314,   124,   314,   124,   124,     1,   127,     1,   130,
       1,    37,    38,    39,   127,   218,   269,   275,   283,   286,
     290,   321,   346,   347,     1,   127,     1,   365,   368,   376,
     377,   365,   368,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    86,    87,    89,    90,    91,   127,
     133,   151,   195,   196,   197,   218,   226,   230,   245,   247,
     251,   263,   264,   265,   326,   356,   357,   360,   361,   362,
     369,   370,   371,   372,   373,   374,   376,   377,   379,   380,
     381,   382,   383,   384,   130,    31,   218,   387,   218,   213,
     214,   216,   217,   311,   312,   318,   321,   329,   334,   336,
     369,   377,   215,   302,   128,   243,   244,   262,   125,   124,
     230,   251,   124,   230,   251,   230,   251,   124,   218,   269,
     275,   283,   286,   290,   308,   267,   124,   124,   308,   267,
     124,   124,   124,   124,   124,   124,   230,   251,   124,   125,
     245,   247,   265,   275,   283,   285,   290,   298,   348,   387,
     131,   136,   179,   180,   223,   227,   245,   131,     1,   130,
     131,   218,     1,     7,     8,     9,   124,   132,   135,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,   128,
     246,   180,   223,   224,   232,   252,   121,   141,   142,   138,
     139,    10,    11,   235,   255,    12,    13,   122,   123,    14,
      15,   137,   143,   144,    16,    17,   145,   246,   125,     7,
       8,     9,   124,   132,   135,   246,   121,   141,   142,   138,
     139,    10,    11,    12,    13,   122,   123,    14,    15,   137,
     143,   144,    16,    17,   145,   246,   125,   125,   108,   218,
     301,   394,   397,   398,   131,   131,   136,   148,   267,   268,
     136,   148,   267,   268,   125,   125,   125,   125,   311,   316,
     320,   125,   125,   311,    11,   123,   129,   128,   124,   321,
     329,   330,    66,   210,   218,   301,   210,     1,   218,   269,
     283,   286,   297,   306,   301,   334,   335,   124,   151,   218,
     218,   301,     1,   124,   306,   121,   124,   218,   301,   127,
     326,   376,   377,   376,   377,   376,   127,   376,   377,   127,
       1,   130,     1,     1,   127,   129,   129,    70,    71,    92,
      96,    98,   130,    70,    71,   130,   127,     1,   198,   199,
       1,   198,   199,     1,   128,   124,   133,   218,   287,   288,
     311,   317,   319,   321,   329,   336,   337,   338,     1,   301,
     309,   352,   329,   315,   321,   124,   133,   158,   159,   174,
     175,   177,   178,   187,   218,   301,   122,   151,   218,   218,
     269,   283,   286,   122,   122,   128,   129,     1,   127,   131,
      28,   150,   218,   123,   129,   128,   218,   330,   332,   344,
     344,   344,   344,   127,   129,   130,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   223,   224,
     226,   244,   263,   300,   341,   342,   311,   314,   316,   318,
     320,   311,   318,   131,   245,   264,   339,   340,   376,   377,
     376,   377,   344,   345,   344,   345,   136,   136,   136,    52,
     350,   351,     1,   272,   131,   131,     1,   130,   200,   201,
       1,   130,   200,   201,   131,   125,   218,   309,   310,   321,
     329,   330,   354,   355,   136,   148,   267,   268,   321,   329,
     333,   329,   124,   135,   327,     1,     1,   129,     1,    52,
     218,   350,   351,   129,     1,    52,   218,   350,   351,   129,
       1,    52,   218,   350,   351,   129,    52,   218,   350,   351,
       3,    28,    45,    75,    76,   125,   323,   324,   325,   245,
     148,   218,   130,   131,   127,   127,   133,   267,   268,   133,
     124,   124,     1,   124,    53,    54,    55,    57,    58,    59,
      60,    63,    87,   218,   265,   326,   356,   379,   383,   124,
     218,   127,   127,   127,   223,   224,   247,   265,   124,   283,
     124,   124,   191,   218,   127,   127,   127,   133,   132,   246,
       1,   132,   127,   129,   247,   265,   246,   125,   129,   247,
       1,   371,   372,   371,   372,   356,   357,   365,   368,   356,
     357,   365,   368,     1,     1,   387,   387,   149,   218,   131,
     131,   329,   318,   321,   369,   377,   369,   377,   377,   244,
     145,   127,   145,    66,   147,   218,   275,   283,   285,   290,
     299,   349,   218,   300,   122,   124,   135,   218,   269,   275,
     283,   286,   290,   321,   328,   329,   331,   218,   269,   275,
     283,   286,   290,   307,   247,   348,   376,   218,   135,   331,
     307,   245,   387,   387,   387,   245,   349,   349,   125,   218,
     275,   283,   285,   290,   330,   125,   132,     1,   170,   171,
       1,   130,   129,   136,     1,   170,   171,   130,     1,   170,
     171,     1,   218,   125,   224,   227,   228,   264,     1,   218,
     247,   265,   223,   245,     1,   232,   252,   232,   252,   232,
     252,   233,   253,   233,   253,   234,   254,   234,   254,   235,
     255,   235,   255,   235,   255,   223,   224,   237,   256,   223,
     224,   237,   256,   223,   224,   238,   257,   223,   224,   239,
     258,   223,   224,   240,   259,   241,   260,   242,   261,   133,
     223,   224,   247,   248,   265,   266,   223,   245,     1,   218,
     125,   227,   228,     1,   218,   247,   265,   223,   245,   232,
     252,   232,   252,   232,   252,   233,   253,   233,   253,   234,
     254,   234,   254,   235,   255,   235,   255,   235,   255,   235,
     255,   223,   224,   237,   256,   223,   224,   237,   256,   223,
     224,   238,   257,   223,   224,   239,   258,   223,   224,   240,
     259,   241,   260,   242,   261,   133,   247,   248,   265,   266,
     223,   245,   122,   123,   218,   395,   396,   218,   130,   394,
     397,   398,   398,   136,   136,   136,   136,   136,   136,   211,
     203,   205,   207,   218,   321,   329,   123,   128,   330,   123,
     131,   122,   131,   218,   269,   283,   286,   330,   321,   329,
     336,   337,   191,   288,   311,   321,   329,   131,   218,   131,
     218,   330,   218,   321,   124,   127,   130,   181,   182,   181,
     182,   376,   376,   376,   220,   376,   376,     1,   341,   342,
     125,   267,   268,   131,   129,     1,   301,   309,   352,   329,
     311,   319,   321,   133,   326,   218,   124,   315,   315,   218,
       1,     1,   288,   212,   122,   210,   210,   267,   268,   271,
     200,   201,     1,   130,   272,   128,   133,   128,   133,   209,
     205,   218,   128,   218,   128,   376,   377,     1,   127,   129,
     127,   129,   127,   162,   163,   166,   167,   168,   130,   160,
     163,   127,   130,   162,   163,   166,   167,   168,   128,    37,
     336,   337,   338,   339,   340,   343,     1,   130,   272,     1,
     130,   272,     1,   130,   200,   201,   321,   329,   330,   125,
     125,   125,   136,   136,   136,   329,   327,   125,   354,   355,
     136,   148,   267,   268,   350,   351,   301,   350,   350,   350,
     351,   125,   124,   125,   129,   324,   125,   125,   125,     1,
     170,   171,   356,   357,   365,   368,   133,   133,   356,   357,
     365,   368,   247,   265,   247,   265,   125,   247,   265,   133,
     267,   268,   133,   124,   124,   356,   124,   224,   265,   124,
     133,    57,     1,   125,   127,   218,   247,   265,   378,   127,
     127,   127,   127,   127,   387,   124,   245,   245,   218,   356,
     357,   365,   368,    91,   224,   264,    89,    90,    91,   245,
     264,   224,   264,   245,   264,   122,   318,   377,   377,   127,
     247,   248,   265,   266,   247,   248,   265,   266,   147,   148,
     147,   275,   283,   285,   290,   330,   125,   125,   125,   330,
     212,   125,   321,   331,   354,   355,   267,   268,   122,   329,
     124,   328,   135,   122,   135,   218,   269,   275,   283,   286,
     290,   331,   125,   125,   125,   125,   267,   268,   135,   135,
     331,   129,   125,   129,   129,   129,   125,   129,   232,   252,
     387,     1,   130,   223,   245,     1,     1,   125,   129,   125,
     136,   136,     1,   129,   133,   133,   129,   133,   133,   125,
     136,   136,   133,   133,   133,   133,   218,   218,   127,   129,
     218,   387,   130,   130,   321,   329,   205,   212,   122,   131,
     131,   218,   329,   321,   125,   329,   311,   125,   131,   131,
     218,   125,     1,   170,   171,   287,   321,   218,   124,   311,
     319,   319,   267,   268,   124,   125,   123,   212,   123,   123,
     127,     1,   127,   203,   202,   301,   203,   202,   207,   128,
     131,     1,   164,   165,     1,   164,   165,   377,     1,   341,
     342,   129,   130,   339,   340,     1,   127,     1,   127,   329,
     327,   125,   125,   125,   136,   136,   136,   330,   333,   247,
     125,   324,     1,   356,   357,   365,   368,   356,   357,   365,
     368,   125,   125,   125,   125,     1,   356,   125,   247,   356,
     357,   133,   133,   265,   125,   247,   265,    57,   265,   378,
     387,   124,   356,   133,   127,     1,   127,     1,   125,   265,
     378,     3,   125,   133,   387,   125,   125,   129,   124,   124,
     191,   133,   133,   133,   133,   133,   133,   133,   133,   125,
     125,     1,   125,   123,   321,   329,   331,   125,   125,   125,
     136,   136,   212,   328,   125,   354,   355,   267,   268,   212,
     267,   268,   122,   135,   124,   339,   136,   136,   267,   268,
     267,   268,   135,   348,   218,   218,   245,     1,   218,   224,
     264,   223,   224,   223,   224,   244,   262,   223,   224,   244,
     262,   223,   224,   223,   224,   244,   262,   223,   224,   244,
     262,   223,   224,   244,   262,   223,   224,   244,   262,   223,
     224,   244,   262,   223,   224,   244,   262,   395,   127,   127,
     123,   212,   131,   376,   311,   128,   131,     1,   124,   133,
     133,   123,   200,   201,   127,   200,   201,   128,   330,   128,
     207,   343,   130,   339,   340,     1,   200,   201,   200,   201,
     125,   356,   356,   356,   356,   356,   357,   125,   124,   378,
     125,   247,   265,   247,   356,     1,   125,   247,   265,   135,
     358,   359,   387,   127,   359,     3,   125,   133,   131,   191,
     245,   245,     1,     1,   328,   125,   123,   125,   125,   136,
     136,   123,   136,   136,   212,   267,   268,   348,   136,   136,
     136,   136,   267,   268,   125,   125,   125,   125,   125,   123,
     341,   267,   268,   267,   268,   200,   201,   203,   203,   129,
     130,     1,    65,    65,   247,   265,   125,   247,   265,   125,
     127,   125,   127,   356,   357,   125,   356,   357,   218,   125,
     129,   133,   124,     3,   125,   133,   359,   127,   359,    74,
     191,   192,   193,   125,   125,   125,   129,   123,   136,   136,
     125,   136,   136,   127,   130,   356,   356,   125,   125,   127,
     356,   247,   356,   357,   136,   127,   358,   359,   245,   359,
     127,   359,   125,   133,     3,   125,   133,   376,   376,   130,
     192,   131,   191,   232,   252,   339,   125,   387,   125,   125,
     125,   125,   133,   127,   359,   359,   127,   359,   193,   125,
     356,   124,   127,   127,   127,   359,   125,   125,   125,   133,
     130,   245,   125,   127,   127,   127,   359,   125,   127,   125,
     127
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 147: /* "guess_type" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11508 "grammar.ec"
	break;
      case 148: /* "type" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11517 "grammar.ec"
	break;
      case 149: /* "base_strict_type" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11526 "grammar.ec"
	break;
      case 150: /* "base_strict_type_name" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 11535 "grammar.ec"
	break;
      case 151: /* "strict_type" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11544 "grammar.ec"
	break;
      case 152: /* "class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11553 "grammar.ec"
	break;
      case 153: /* "constructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11562 "grammar.ec"
	break;
      case 154: /* "destructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11571 "grammar.ec"
	break;
      case 155: /* "virtual_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11580 "grammar.ec"
	break;
      case 156: /* "class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11589 "grammar.ec"
	break;
      case 157: /* "virtual_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11598 "grammar.ec"
	break;
      case 158: /* "class_function_definition" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11607 "grammar.ec"
	break;
      case 159: /* "class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11616 "grammar.ec"
	break;
      case 160: /* "instance_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11625 "grammar.ec"
	break;
      case 161: /* "instance_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11634 "grammar.ec"
	break;
      case 162: /* "instance_class_function_definition" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11643 "grammar.ec"
	break;
      case 163: /* "instance_class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11652 "grammar.ec"
	break;
      case 164: /* "data_member_initialization" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11661 "grammar.ec"
	break;
      case 165: /* "data_member_initialization_error" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11670 "grammar.ec"
	break;
      case 166: /* "data_member_initialization_list" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11679 "grammar.ec"
	break;
      case 167: /* "data_member_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11688 "grammar.ec"
	break;
      case 168: /* "data_member_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11697 "grammar.ec"
	break;
      case 169: /* "members_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11706 "grammar.ec"
	break;
      case 170: /* "members_initialization_list" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11715 "grammar.ec"
	break;
      case 171: /* "members_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11724 "grammar.ec"
	break;
      case 172: /* "instantiation_named" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11733 "grammar.ec"
	break;
      case 173: /* "instantiation_named_error" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11742 "grammar.ec"
	break;
      case 177: /* "instantiation_unnamed" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11751 "grammar.ec"
	break;
      case 178: /* "instantiation_unnamed_error" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11760 "grammar.ec"
	break;
      case 181: /* "default_property" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11769 "grammar.ec"
	break;
      case 182: /* "default_property_error" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11778 "grammar.ec"
	break;
      case 183: /* "default_property_list" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11787 "grammar.ec"
	break;
      case 184: /* "default_property_list_error" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11796 "grammar.ec"
	break;
      case 187: /* "property" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeProperty((yyvaluep->prop)); };

/* Line 1009 of yacc.c  */
#line 11805 "grammar.ec"
	break;
      case 198: /* "struct_declaration" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11814 "grammar.ec"
	break;
      case 199: /* "struct_declaration_error" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11823 "grammar.ec"
	break;
      case 200: /* "struct_declaration_list" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11832 "grammar.ec"
	break;
      case 201: /* "struct_declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11841 "grammar.ec"
	break;
      case 202: /* "template_datatype" */

/* Line 1009 of yacc.c  */
#line 270 "grammar.y"
	{ FreeTemplateDataType((yyvaluep->templateDatatype)); };

/* Line 1009 of yacc.c  */
#line 11850 "grammar.ec"
	break;
      case 203: /* "template_type_argument" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11859 "grammar.ec"
	break;
      case 204: /* "template_type_parameter" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11868 "grammar.ec"
	break;
      case 205: /* "template_identifier_argument" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11877 "grammar.ec"
	break;
      case 206: /* "template_identifier_parameter" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11886 "grammar.ec"
	break;
      case 207: /* "template_expression_argument" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11895 "grammar.ec"
	break;
      case 208: /* "template_expression_parameter" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11904 "grammar.ec"
	break;
      case 209: /* "template_parameter" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11913 "grammar.ec"
	break;
      case 210: /* "template_parameters_list" */

/* Line 1009 of yacc.c  */
#line 271 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateParameter); };

/* Line 1009 of yacc.c  */
#line 11922 "grammar.ec"
	break;
      case 211: /* "template_argument" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11931 "grammar.ec"
	break;
      case 212: /* "template_arguments_list" */

/* Line 1009 of yacc.c  */
#line 272 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateArgument); };

/* Line 1009 of yacc.c  */
#line 11940 "grammar.ec"
	break;
      case 213: /* "class_entry" */

/* Line 1009 of yacc.c  */
#line 246 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11949 "grammar.ec"
	break;
      case 214: /* "class_decl" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11958 "grammar.ec"
	break;
      case 215: /* "class" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11967 "grammar.ec"
	break;
      case 216: /* "class_head" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11976 "grammar.ec"
	break;
      case 217: /* "class_error" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11985 "grammar.ec"
	break;
      case 218: /* "identifier" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeIdentifier((yyvaluep->id)); };

/* Line 1009 of yacc.c  */
#line 11994 "grammar.ec"
	break;
      case 219: /* "primary_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12003 "grammar.ec"
	break;
      case 220: /* "i18n_string" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12012 "grammar.ec"
	break;
      case 225: /* "primary_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12021 "grammar.ec"
	break;
      case 226: /* "postfix_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12030 "grammar.ec"
	break;
      case 227: /* "argument_expression_list" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 12039 "grammar.ec"
	break;
      case 228: /* "argument_expression_list_error" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 12048 "grammar.ec"
	break;
      case 230: /* "unary_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12057 "grammar.ec"
	break;
      case 232: /* "cast_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12066 "grammar.ec"
	break;
      case 233: /* "multiplicative_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12075 "grammar.ec"
	break;
      case 234: /* "additive_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12084 "grammar.ec"
	break;
      case 235: /* "shift_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12093 "grammar.ec"
	break;
      case 237: /* "relational_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12102 "grammar.ec"
	break;
      case 238: /* "equality_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12111 "grammar.ec"
	break;
      case 239: /* "and_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12120 "grammar.ec"
	break;
      case 240: /* "exclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12129 "grammar.ec"
	break;
      case 241: /* "inclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12138 "grammar.ec"
	break;
      case 242: /* "logical_and_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12147 "grammar.ec"
	break;
      case 243: /* "logical_or_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12156 "grammar.ec"
	break;
      case 244: /* "conditional_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12165 "grammar.ec"
	break;
      case 245: /* "assignment_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12174 "grammar.ec"
	break;
      case 247: /* "expression" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 12183 "grammar.ec"
	break;
      case 249: /* "postfix_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12192 "grammar.ec"
	break;
      case 251: /* "unary_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12201 "grammar.ec"
	break;
      case 252: /* "cast_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12210 "grammar.ec"
	break;
      case 253: /* "multiplicative_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12219 "grammar.ec"
	break;
      case 254: /* "additive_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12228 "grammar.ec"
	break;
      case 255: /* "shift_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12237 "grammar.ec"
	break;
      case 256: /* "relational_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12246 "grammar.ec"
	break;
      case 257: /* "equality_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12255 "grammar.ec"
	break;
      case 258: /* "and_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12264 "grammar.ec"
	break;
      case 259: /* "exclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12273 "grammar.ec"
	break;
      case 260: /* "inclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12282 "grammar.ec"
	break;
      case 261: /* "logical_and_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12291 "grammar.ec"
	break;
      case 262: /* "logical_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12300 "grammar.ec"
	break;
      case 263: /* "conditional_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12309 "grammar.ec"
	break;
      case 264: /* "assignment_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12318 "grammar.ec"
	break;
      case 265: /* "expression_error" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 12327 "grammar.ec"
	break;
      case 267: /* "constant_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12336 "grammar.ec"
	break;
      case 268: /* "constant_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12345 "grammar.ec"
	break;
      case 269: /* "storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12354 "grammar.ec"
	break;
      case 270: /* "external_storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12363 "grammar.ec"
	break;
      case 271: /* "enumerator" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeEnumerator((yyvaluep->enumerator)); };

/* Line 1009 of yacc.c  */
#line 12372 "grammar.ec"
	break;
      case 272: /* "enumerator_list" */

/* Line 1009 of yacc.c  */
#line 254 "grammar.y"
	{ FreeList((yyvaluep->list), FreeEnumerator); };

/* Line 1009 of yacc.c  */
#line 12381 "grammar.ec"
	break;
      case 274: /* "enum_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12390 "grammar.ec"
	break;
      case 275: /* "enum_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12399 "grammar.ec"
	break;
      case 276: /* "enum_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12408 "grammar.ec"
	break;
      case 278: /* "enum_class" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12417 "grammar.ec"
	break;
      case 279: /* "enum_class_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12426 "grammar.ec"
	break;
      case 280: /* "class_specifier" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12435 "grammar.ec"
	break;
      case 281: /* "class_specifier_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12444 "grammar.ec"
	break;
      case 282: /* "ext_storage" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12453 "grammar.ec"
	break;
      case 283: /* "type_qualifier" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12462 "grammar.ec"
	break;
      case 284: /* "type_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12471 "grammar.ec"
	break;
      case 285: /* "type_specifier" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12480 "grammar.ec"
	break;
      case 286: /* "strict_type_specifier" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12489 "grammar.ec"
	break;
      case 287: /* "struct_declarator" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12498 "grammar.ec"
	break;
      case 288: /* "struct_declarator_list" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclarator); };

/* Line 1009 of yacc.c  */
#line 12507 "grammar.ec"
	break;
      case 289: /* "struct_entry" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12516 "grammar.ec"
	break;
      case 290: /* "struct_or_union_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12525 "grammar.ec"
	break;
      case 291: /* "struct_or_union_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12534 "grammar.ec"
	break;
      case 292: /* "struct_or_union_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12543 "grammar.ec"
	break;
      case 293: /* "struct_decl" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12552 "grammar.ec"
	break;
      case 294: /* "struct_head" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12561 "grammar.ec"
	break;
      case 295: /* "struct_class" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12570 "grammar.ec"
	break;
      case 296: /* "struct_class_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12579 "grammar.ec"
	break;
      case 298: /* "specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12588 "grammar.ec"
	break;
      case 299: /* "guess_specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12597 "grammar.ec"
	break;
      case 300: /* "declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12606 "grammar.ec"
	break;
      case 301: /* "guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12615 "grammar.ec"
	break;
      case 302: /* "external_guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12624 "grammar.ec"
	break;
      case 303: /* "external_guess_declaration_specifiers_error" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12633 "grammar.ec"
	break;
      case 304: /* "_inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12642 "grammar.ec"
	break;
      case 305: /* "inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12651 "grammar.ec"
	break;
      case 309: /* "identifier_list_error" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12660 "grammar.ec"
	break;
      case 310: /* "identifier_list" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12669 "grammar.ec"
	break;
      case 311: /* "direct_declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12678 "grammar.ec"
	break;
      case 312: /* "direct_declarator_nofunction" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12687 "grammar.ec"
	break;
      case 313: /* "direct_declarator_function_start" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12696 "grammar.ec"
	break;
      case 314: /* "direct_declarator_function" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12705 "grammar.ec"
	break;
      case 315: /* "direct_declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12714 "grammar.ec"
	break;
      case 316: /* "direct_declarator" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12723 "grammar.ec"
	break;
      case 317: /* "direct_declarator_function_start_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12732 "grammar.ec"
	break;
      case 318: /* "direct_declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12741 "grammar.ec"
	break;
      case 319: /* "direct_declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12750 "grammar.ec"
	break;
      case 320: /* "direct_declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12759 "grammar.ec"
	break;
      case 321: /* "ext_decl" */

/* Line 1009 of yacc.c  */
#line 275 "grammar.y"
	{ FreeExtDecl((yyvaluep->extDecl)); };

/* Line 1009 of yacc.c  */
#line 12768 "grammar.ec"
	break;
      case 323: /* "attribute_word" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 12777 "grammar.ec"
	break;
      case 324: /* "attribute" */

/* Line 1009 of yacc.c  */
#line 276 "grammar.y"
	{ FreeAttribute((yyvaluep->attribute)); };

/* Line 1009 of yacc.c  */
#line 12786 "grammar.ec"
	break;
      case 325: /* "attribs_list" */

/* Line 1009 of yacc.c  */
#line 277 "grammar.y"
	{ FreeList((yyvaluep->list), FreeAttribute); };

/* Line 1009 of yacc.c  */
#line 12795 "grammar.ec"
	break;
      case 326: /* "attrib" */

/* Line 1009 of yacc.c  */
#line 274 "grammar.y"
	{ FreeAttrib((yyvaluep->attrib)); };

/* Line 1009 of yacc.c  */
#line 12804 "grammar.ec"
	break;
      case 327: /* "direct_abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12813 "grammar.ec"
	break;
      case 328: /* "direct_abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12822 "grammar.ec"
	break;
      case 329: /* "pointer" */

/* Line 1009 of yacc.c  */
#line 203 "grammar.y"
	{ FreePointer((yyvaluep->pointer)); };

/* Line 1009 of yacc.c  */
#line 12831 "grammar.ec"
	break;
      case 330: /* "abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12840 "grammar.ec"
	break;
      case 331: /* "abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12849 "grammar.ec"
	break;
      case 332: /* "declarator" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12858 "grammar.ec"
	break;
      case 333: /* "declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12867 "grammar.ec"
	break;
      case 334: /* "declarator_function" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12876 "grammar.ec"
	break;
      case 335: /* "declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12885 "grammar.ec"
	break;
      case 336: /* "declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12894 "grammar.ec"
	break;
      case 337: /* "declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12903 "grammar.ec"
	break;
      case 338: /* "declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12912 "grammar.ec"
	break;
      case 339: /* "initializer" */

/* Line 1009 of yacc.c  */
#line 227 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12921 "grammar.ec"
	break;
      case 340: /* "initializer_error" */

/* Line 1009 of yacc.c  */
#line 227 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12930 "grammar.ec"
	break;
      case 341: /* "initializer_condition" */

/* Line 1009 of yacc.c  */
#line 227 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12939 "grammar.ec"
	break;
      case 342: /* "initializer_condition_error" */

/* Line 1009 of yacc.c  */
#line 227 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12948 "grammar.ec"
	break;
      case 343: /* "initializer_list" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitializer); };

/* Line 1009 of yacc.c  */
#line 12957 "grammar.ec"
	break;
      case 344: /* "init_declarator" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12966 "grammar.ec"
	break;
      case 345: /* "init_declarator_error" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12975 "grammar.ec"
	break;
      case 346: /* "init_declarator_list" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12984 "grammar.ec"
	break;
      case 347: /* "init_declarator_list_error" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12993 "grammar.ec"
	break;
      case 348: /* "type_name" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 13002 "grammar.ec"
	break;
      case 349: /* "guess_type_name" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 13011 "grammar.ec"
	break;
      case 350: /* "parameter_declaration" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 13020 "grammar.ec"
	break;
      case 351: /* "parameter_declaration_error" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 13029 "grammar.ec"
	break;
      case 352: /* "parameter_list" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 13038 "grammar.ec"
	break;
      case 353: /* "parameter_list_error" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 13047 "grammar.ec"
	break;
      case 354: /* "parameter_type_list" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 13056 "grammar.ec"
	break;
      case 355: /* "parameter_type_list_error" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 13065 "grammar.ec"
	break;
      case 356: /* "statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13074 "grammar.ec"
	break;
      case 357: /* "statement_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13083 "grammar.ec"
	break;
      case 361: /* "labeled_statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13092 "grammar.ec"
	break;
      case 362: /* "labeled_statement_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13101 "grammar.ec"
	break;
      case 363: /* "declaration_mode" */

/* Line 1009 of yacc.c  */
#line 273 "grammar.y"
	{ };

/* Line 1009 of yacc.c  */
#line 13110 "grammar.ec"
	break;
      case 365: /* "declaration" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeDeclaration((yyvaluep->declaration)); };

/* Line 1009 of yacc.c  */
#line 13119 "grammar.ec"
	break;
      case 369: /* "declaration_list" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 13128 "grammar.ec"
	break;
      case 370: /* "declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 13137 "grammar.ec"
	break;
      case 371: /* "statement_list" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 13146 "grammar.ec"
	break;
      case 372: /* "statement_list_error" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 13155 "grammar.ec"
	break;
      case 373: /* "compound_inside" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13164 "grammar.ec"
	break;
      case 374: /* "compound_inside_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13173 "grammar.ec"
	break;
      case 375: /* "compound_start" */

/* Line 1009 of yacc.c  */
#line 267 "grammar.y"
	{ PopContext((yyvaluep->context)); FreeContext((yyvaluep->context)); delete (yyvaluep->context); };

/* Line 1009 of yacc.c  */
#line 13182 "grammar.ec"
	break;
      case 376: /* "compound_statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13191 "grammar.ec"
	break;
      case 377: /* "compound_statement_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13200 "grammar.ec"
	break;
      case 378: /* "expression_statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13209 "grammar.ec"
	break;
      case 379: /* "selection_statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13218 "grammar.ec"
	break;
      case 380: /* "selection_statement_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13227 "grammar.ec"
	break;
      case 381: /* "iteration_statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13236 "grammar.ec"
	break;
      case 382: /* "iteration_statement_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13245 "grammar.ec"
	break;
      case 383: /* "jump_statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13254 "grammar.ec"
	break;
      case 384: /* "jump_statement_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13263 "grammar.ec"
	break;
      case 385: /* "function_definition" */

/* Line 1009 of yacc.c  */
#line 235 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 13272 "grammar.ec"
	break;
      case 386: /* "function_definition_error" */

/* Line 1009 of yacc.c  */
#line 235 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 13281 "grammar.ec"
	break;
      case 387: /* "string_literal" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 13290 "grammar.ec"
	break;
      case 388: /* "external_declaration" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 13299 "grammar.ec"
	break;
      case 389: /* "external_declaration_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 13308 "grammar.ec"
	break;
      case 390: /* "translation_unit_error" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 13317 "grammar.ec"
	break;
      case 391: /* "translation_unit" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 13326 "grammar.ec"
	break;

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc;

/* Number of syntax errors so far.  */
int yynerrs;



/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{


    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[2];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1464 of yacc.c  */
#line 285 "grammar.y"
    {
      (yyval.specifier) = null;
      _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   ;}
    break;

  case 3:

/* Line 1464 of yacc.c  */
#line 304 "grammar.y"
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   ;}
    break;

  case 4:

/* Line 1464 of yacc.c  */
#line 342 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 5:

/* Line 1464 of yacc.c  */
#line 344 "grammar.y"
    {
   #ifdef PRECOMPILER
      if(!(yyvsp[(1) - (2)].id).string[0])
      {
         (yyval.specifier) = MkSpecifierName((yyvsp[(1) - (2)].id).string);
         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));
      }
      else
      {
         _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         goto yysetstate;
   #else
         Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[(2) - (2)].id); yylloc = (yylsp[(1) - (2)]);
         Compiler_Error($"Not a type: %s\n", (yyvsp[(1) - (2)].id).string);
         yylloc = tmpLoc; (yyvsp[(2) - (2)].id).badID = (yyvsp[(1) - (2)].id);
   #endif
      }
   ;}
    break;

  case 6:

/* Line 1464 of yacc.c  */
#line 423 "grammar.y"
    { (yyval.specifier) = MkSpecifierName(yytext); ;}
    break;

  case 7:

/* Line 1464 of yacc.c  */
#line 427 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 9:

/* Line 1464 of yacc.c  */
#line 431 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (4)].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 10:

/* Line 1464 of yacc.c  */
#line 433 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[(4) - (4)]).end.pos--;
      fileInput.Seek((yylsp[(4) - (4)]).end.pos, start);
      resetScannerPos(&(yylsp[(4) - (4)]).end);
      yyclearin;
    ;}
    break;

  case 11:

/* Line 1464 of yacc.c  */
#line 472 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 12:

/* Line 1464 of yacc.c  */
#line 474 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 13:

/* Line 1464 of yacc.c  */
#line 479 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (3)].list), null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 14:

/* Line 1464 of yacc.c  */
#line 484 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (4)].list), null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 15:

/* Line 1464 of yacc.c  */
#line 489 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 16:

/* Line 1464 of yacc.c  */
#line 491 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 17:

/* Line 1464 of yacc.c  */
#line 496 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 18:

/* Line 1464 of yacc.c  */
#line 498 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 19:

/* Line 1464 of yacc.c  */
#line 503 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 20:

/* Line 1464 of yacc.c  */
#line 505 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 21:

/* Line 1464 of yacc.c  */
#line 510 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 22:

/* Line 1464 of yacc.c  */
#line 512 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 23:

/* Line 1464 of yacc.c  */
#line 514 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 24:

/* Line 1464 of yacc.c  */
#line 516 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 25:

/* Line 1464 of yacc.c  */
#line 518 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 26:

/* Line 1464 of yacc.c  */
#line 522 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 27:

/* Line 1464 of yacc.c  */
#line 526 "grammar.y"
    {
         if((yyvsp[(1) - (3)].classFunction).declarator)
         {
            (yyvsp[(1) - (3)].classFunction).declarator = MkStructDeclarator((yyvsp[(1) - (3)].classFunction).declarator, null);
            (yyvsp[(1) - (3)].classFunction).declarator.structDecl.attrib = (yyvsp[(2) - (3)].attrib);
         }
         ProcessClassFunctionBody((yyvsp[(1) - (3)].classFunction), null);
         (yyval.classFunction).loc = (yyloc);
      ;}
    break;

  case 28:

/* Line 1464 of yacc.c  */
#line 539 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 29:

/* Line 1464 of yacc.c  */
#line 541 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 30:

/* Line 1464 of yacc.c  */
#line 543 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 31:

/* Line 1464 of yacc.c  */
#line 545 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 32:

/* Line 1464 of yacc.c  */
#line 547 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 33:

/* Line 1464 of yacc.c  */
#line 553 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 34:

/* Line 1464 of yacc.c  */
#line 555 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, MkDeclaratorFunction((yyvsp[(2) - (2)].declarator), null), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 35:

/* Line 1464 of yacc.c  */
#line 560 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 36:

/* Line 1464 of yacc.c  */
#line 565 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 37:

/* Line 1464 of yacc.c  */
#line 570 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 38:

/* Line 1464 of yacc.c  */
#line 572 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 39:

/* Line 1464 of yacc.c  */
#line 574 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 40:

/* Line 1464 of yacc.c  */
#line 578 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 41:

/* Line 1464 of yacc.c  */
#line 579 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 42:

/* Line 1464 of yacc.c  */
#line 583 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 43:

/* Line 1464 of yacc.c  */
#line 585 "grammar.y"
    {
         (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end;

         fileInput.Seek((yylsp[(2) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(2) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(2) - (3)]).end;
      ;}
    break;

  case 44:

/* Line 1464 of yacc.c  */
#line 595 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 45:

/* Line 1464 of yacc.c  */
#line 599 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 46:

/* Line 1464 of yacc.c  */
#line 601 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 47:

/* Line 1464 of yacc.c  */
#line 603 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 48:

/* Line 1464 of yacc.c  */
#line 607 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 49:

/* Line 1464 of yacc.c  */
#line 609 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 50:

/* Line 1464 of yacc.c  */
#line 611 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 51:

/* Line 1464 of yacc.c  */
#line 614 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 52:

/* Line 1464 of yacc.c  */
#line 626 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 53:

/* Line 1464 of yacc.c  */
#line 637 "grammar.y"
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).start;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).start;

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit);

         dummy = MkInitializerAssignment(MkExpDummy());
         memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).end;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).end;
         ListAdd((yyval.list), memberInit);
      ;}
    break;

  case 54:

/* Line 1464 of yacc.c  */
#line 656 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 55:

/* Line 1464 of yacc.c  */
#line 658 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 56:

/* Line 1464 of yacc.c  */
#line 662 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(1) - (1)].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]); ;}
    break;

  case 57:

/* Line 1464 of yacc.c  */
#line 663 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 58:

/* Line 1464 of yacc.c  */
#line 664 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 59:

/* Line 1464 of yacc.c  */
#line 665 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 60:

/* Line 1464 of yacc.c  */
#line 666 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 61:

/* Line 1464 of yacc.c  */
#line 667 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 63:

/* Line 1464 of yacc.c  */
#line 670 "grammar.y"
    {
      MembersInit members = (MembersInit)(yyval.list)->last;
      if(members.type == dataMembersInit)
         members.loc.end = (yyloc).end;
      else
      {
         MembersInit members = MkMembersInitList(MkList());
         ListAdd((yyval.list), members);
         members.loc = (yylsp[(2) - (2)]);
      }
      (yyval.list) = (yyvsp[(1) - (2)].list);
   ;}
    break;

  case 64:

/* Line 1464 of yacc.c  */
#line 682 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]);  ;}
    break;

  case 66:

/* Line 1464 of yacc.c  */
#line 687 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 67:

/* Line 1464 of yacc.c  */
#line 688 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 68:

/* Line 1464 of yacc.c  */
#line 689 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 69:

/* Line 1464 of yacc.c  */
#line 693 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 70:

/* Line 1464 of yacc.c  */
#line 694 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 71:

/* Line 1464 of yacc.c  */
#line 695 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 72:

/* Line 1464 of yacc.c  */
#line 696 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 73:

/* Line 1464 of yacc.c  */
#line 697 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[(2) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 74:

/* Line 1464 of yacc.c  */
#line 698 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 75:

/* Line 1464 of yacc.c  */
#line 699 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 76:

/* Line 1464 of yacc.c  */
#line 704 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 77:

/* Line 1464 of yacc.c  */
#line 706 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 78:

/* Line 1464 of yacc.c  */
#line 711 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 79:

/* Line 1464 of yacc.c  */
#line 713 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 80:

/* Line 1464 of yacc.c  */
#line 715 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 81:

/* Line 1464 of yacc.c  */
#line 717 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null); (yyval.instance).exp.loc = (yylsp[(2) - (3)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 82:

/* Line 1464 of yacc.c  */
#line 719 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 83:

/* Line 1464 of yacc.c  */
#line 749 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 84:

/* Line 1464 of yacc.c  */
#line 751 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 85:

/* Line 1464 of yacc.c  */
#line 756 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 86:

/* Line 1464 of yacc.c  */
#line 758 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 87:

/* Line 1464 of yacc.c  */
#line 760 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 88:

/* Line 1464 of yacc.c  */
#line 762 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (3)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 89:

/* Line 1464 of yacc.c  */
#line 764 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 90:

/* Line 1464 of yacc.c  */
#line 793 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 91:

/* Line 1464 of yacc.c  */
#line 795 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 92:

/* Line 1464 of yacc.c  */
#line 797 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), MkList());  (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).start;;}
    break;

  case 93:

/* Line 1464 of yacc.c  */
#line 802 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 94:

/* Line 1464 of yacc.c  */
#line 804 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 95:

/* Line 1464 of yacc.c  */
#line 809 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 96:

/* Line 1464 of yacc.c  */
#line 811 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 97:

/* Line 1464 of yacc.c  */
#line 815 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 98:

/* Line 1464 of yacc.c  */
#line 817 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (2)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 99:

/* Line 1464 of yacc.c  */
#line 819 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (4)].specifier), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 100:

/* Line 1464 of yacc.c  */
#line 821 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 101:

/* Line 1464 of yacc.c  */
#line 826 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 102:

/* Line 1464 of yacc.c  */
#line 829 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (2)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (2)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (2)].id)); ;}
    break;

  case 103:

/* Line 1464 of yacc.c  */
#line 832 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (4)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (4)].id).string), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (4)].id)); ;}
    break;

  case 104:

/* Line 1464 of yacc.c  */
#line 835 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 105:

/* Line 1464 of yacc.c  */
#line 900 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 106:

/* Line 1464 of yacc.c  */
#line 902 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 107:

/* Line 1464 of yacc.c  */
#line 907 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 108:

/* Line 1464 of yacc.c  */
#line 909 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 109:

/* Line 1464 of yacc.c  */
#line 911 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 110:

/* Line 1464 of yacc.c  */
#line 913 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (1)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (1)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 111:

/* Line 1464 of yacc.c  */
#line 915 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 112:

/* Line 1464 of yacc.c  */
#line 945 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 113:

/* Line 1464 of yacc.c  */
#line 949 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 114:

/* Line 1464 of yacc.c  */
#line 950 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; ;}
    break;

  case 115:

/* Line 1464 of yacc.c  */
#line 951 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (2)].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 116:

/* Line 1464 of yacc.c  */
#line 955 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 117:

/* Line 1464 of yacc.c  */
#line 956 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 118:

/* Line 1464 of yacc.c  */
#line 957 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 119:

/* Line 1464 of yacc.c  */
#line 961 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 120:

/* Line 1464 of yacc.c  */
#line 962 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 121:

/* Line 1464 of yacc.c  */
#line 963 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 123:

/* Line 1464 of yacc.c  */
#line 969 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 124:

/* Line 1464 of yacc.c  */
#line 972 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 125:

/* Line 1464 of yacc.c  */
#line 975 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 126:

/* Line 1464 of yacc.c  */
#line 978 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 127:

/* Line 1464 of yacc.c  */
#line 981 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 129:

/* Line 1464 of yacc.c  */
#line 987 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 130:

/* Line 1464 of yacc.c  */
#line 989 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 131:

/* Line 1464 of yacc.c  */
#line 991 "grammar.y"
    { (yyvsp[(1) - (3)].prop).issetStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 132:

/* Line 1464 of yacc.c  */
#line 993 "grammar.y"
    { (yyvsp[(1) - (2)].prop).isWatchable = true; ;}
    break;

  case 133:

/* Line 1464 of yacc.c  */
#line 995 "grammar.y"
    { (yyvsp[(1) - (3)].prop).category = (yyvsp[(3) - (3)].exp); ;}
    break;

  case 134:

/* Line 1464 of yacc.c  */
#line 999 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; (yyval.prop) = (yyvsp[(1) - (2)].prop); ;}
    break;

  case 135:

/* Line 1464 of yacc.c  */
#line 1004 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 136:

/* Line 1464 of yacc.c  */
#line 1007 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 137:

/* Line 1464 of yacc.c  */
#line 1010 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 138:

/* Line 1464 of yacc.c  */
#line 1013 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 139:

/* Line 1464 of yacc.c  */
#line 1016 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 141:

/* Line 1464 of yacc.c  */
#line 1022 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 142:

/* Line 1464 of yacc.c  */
#line 1024 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 143:

/* Line 1464 of yacc.c  */
#line 1028 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; ;}
    break;

  case 144:

/* Line 1464 of yacc.c  */
#line 1033 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].id)); ;}
    break;

  case 145:

/* Line 1464 of yacc.c  */
#line 1035 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].id)); ;}
    break;

  case 146:

/* Line 1464 of yacc.c  */
#line 1040 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 147:

/* Line 1464 of yacc.c  */
#line 1042 "grammar.y"
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 148:

/* Line 1464 of yacc.c  */
#line 1047 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].propertyWatch)); ;}
    break;

  case 149:

/* Line 1464 of yacc.c  */
#line 1049 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].propertyWatch)); ;}
    break;

  case 150:

/* Line 1464 of yacc.c  */
#line 1054 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); ;}
    break;

  case 151:

/* Line 1464 of yacc.c  */
#line 1059 "grammar.y"
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[(3) - (7)].exp), (yyvsp[(6) - (7)].list)); ;}
    break;

  case 152:

/* Line 1464 of yacc.c  */
#line 1061 "grammar.y"
    { (yyval.stmt) = MkWatchStmt((yyvsp[(1) - (9)].exp), (yyvsp[(5) - (9)].exp), (yyvsp[(8) - (9)].list)); ;}
    break;

  case 153:

/* Line 1464 of yacc.c  */
#line 1066 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].list)); ;}
    break;

  case 154:

/* Line 1464 of yacc.c  */
#line 1068 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (8)].exp), (yyvsp[(5) - (8)].exp), (yyvsp[(7) - (8)].list)); ;}
    break;

  case 155:

/* Line 1464 of yacc.c  */
#line 1070 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (4)].exp), null); ;}
    break;

  case 156:

/* Line 1464 of yacc.c  */
#line 1072 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (6)].exp), (yyvsp[(5) - (6)].exp), null); ;}
    break;

  case 157:

/* Line 1464 of yacc.c  */
#line 1077 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, null); ;}
    break;

  case 158:

/* Line 1464 of yacc.c  */
#line 1079 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[(2) - (2)].list)); ;}
    break;

  case 159:

/* Line 1464 of yacc.c  */
#line 1081 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (3)].exp), null); ;}
    break;

  case 160:

/* Line 1464 of yacc.c  */
#line 1083 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (4)].exp), (yyvsp[(4) - (4)].list)); ;}
    break;

  case 161:

/* Line 1464 of yacc.c  */
#line 1087 "grammar.y"
    { (yyval.classDef) = (yyvsp[(1) - (2)].classDef); (yyval.classDef).loc.end = (yylsp[(2) - (2)]).end; ;}
    break;

  case 162:

/* Line 1464 of yacc.c  */
#line 1088 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (2)].list)); if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).start; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 163:

/* Line 1464 of yacc.c  */
#line 1089 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 164:

/* Line 1464 of yacc.c  */
#line 1090 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 165:

/* Line 1464 of yacc.c  */
#line 1091 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 166:

/* Line 1464 of yacc.c  */
#line 1092 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(2) - (2)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 167:

/* Line 1464 of yacc.c  */
#line 1093 "grammar.y"
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 168:

/* Line 1464 of yacc.c  */
#line 1094 "grammar.y"
    { (yyval.classDef) = null; deleteWatchable = true; ;}
    break;

  case 169:

/* Line 1464 of yacc.c  */
#line 1095 "grammar.y"
    { (yyval.classDef) = MkClassDefNoExpansion(); ;}
    break;

  case 170:

/* Line 1464 of yacc.c  */
#line 1096 "grammar.y"
    { (yyval.classDef) = MkClassDefFixed(); ;}
    break;

  case 171:

/* Line 1464 of yacc.c  */
#line 1097 "grammar.y"
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[(3) - (7)].id), (yyvsp[(6) - (7)].initializer)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 172:

/* Line 1464 of yacc.c  */
#line 1099 "grammar.y"
    { (yyval.classDef) = null; ;}
    break;

  case 173:

/* Line 1464 of yacc.c  */
#line 1100 "grammar.y"
    { memberAccessStack[defaultMemberAccess] = (yyvsp[(1) - (2)].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; ;}
    break;

  case 174:

/* Line 1464 of yacc.c  */
#line 1102 "grammar.y"
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[(1) - (4)].declMode), (yyvsp[(3) - (4)].id)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 175:

/* Line 1464 of yacc.c  */
#line 1106 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyvsp[(1) - (1)].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 176:

/* Line 1464 of yacc.c  */
#line 1109 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (1)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 177:

/* Line 1464 of yacc.c  */
#line 1110 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 178:

/* Line 1464 of yacc.c  */
#line 1111 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 179:

/* Line 1464 of yacc.c  */
#line 1112 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (2)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 180:

/* Line 1464 of yacc.c  */
#line 1113 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 181:

/* Line 1464 of yacc.c  */
#line 1114 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 182:

/* Line 1464 of yacc.c  */
#line 1115 "grammar.y"
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 183:

/* Line 1464 of yacc.c  */
#line 1116 "grammar.y"
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[(1) - (1)].propertyWatch)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 184:

/* Line 1464 of yacc.c  */
#line 1117 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 185:

/* Line 1464 of yacc.c  */
#line 1118 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 186:

/* Line 1464 of yacc.c  */
#line 1119 "grammar.y"
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[(2) - (2)].id)); ;}
    break;

  case 187:

/* Line 1464 of yacc.c  */
#line 1120 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 188:

/* Line 1464 of yacc.c  */
#line 1121 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 189:

/* Line 1464 of yacc.c  */
#line 1122 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); if((yyvsp[(1) - (1)].list)->last) ((MemberInit)(yyvsp[(1) - (1)].list)->last).loc.end = (yylsp[(1) - (1)]).end; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 190:

/* Line 1464 of yacc.c  */
#line 1124 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 191:

/* Line 1464 of yacc.c  */
#line 1125 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 192:

/* Line 1464 of yacc.c  */
#line 1129 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 193:

/* Line 1464 of yacc.c  */
#line 1130 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 194:

/* Line 1464 of yacc.c  */
#line 1131 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 195:

/* Line 1464 of yacc.c  */
#line 1135 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; ;}
    break;

  case 196:

/* Line 1464 of yacc.c  */
#line 1139 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 197:

/* Line 1464 of yacc.c  */
#line 1140 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 198:

/* Line 1464 of yacc.c  */
#line 1141 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 199:

/* Line 1464 of yacc.c  */
#line 1145 "grammar.y"
    { yyerror(); (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 202:

/* Line 1464 of yacc.c  */
#line 1148 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 203:

/* Line 1464 of yacc.c  */
#line 1149 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 204:

/* Line 1464 of yacc.c  */
#line 1153 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 205:

/* Line 1464 of yacc.c  */
#line 1154 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 206:

/* Line 1464 of yacc.c  */
#line 1166 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (1)].list), null)); ;}
    break;

  case 207:

/* Line 1464 of yacc.c  */
#line 1167 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator))); ;}
    break;

  case 208:

/* Line 1464 of yacc.c  */
#line 1171 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (2)].id), null, null); ;}
    break;

  case 209:

/* Line 1464 of yacc.c  */
#line 1172 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 210:

/* Line 1464 of yacc.c  */
#line 1173 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 211:

/* Line 1464 of yacc.c  */
#line 1174 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 212:

/* Line 1464 of yacc.c  */
#line 1175 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (2)].string)), null, null); delete (yyvsp[(2) - (2)].string); ;}
    break;

  case 213:

/* Line 1464 of yacc.c  */
#line 1176 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 214:

/* Line 1464 of yacc.c  */
#line 1177 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 215:

/* Line 1464 of yacc.c  */
#line 1178 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (6)].string)), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 216:

/* Line 1464 of yacc.c  */
#line 1182 "grammar.y"
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[(1) - (1)].id)); ;}
    break;

  case 217:

/* Line 1464 of yacc.c  */
#line 1186 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (1)].id), dataMember, null); ;}
    break;

  case 218:

/* Line 1464 of yacc.c  */
#line 1187 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (3)].id), dataMember, (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 219:

/* Line 1464 of yacc.c  */
#line 1191 "grammar.y"
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[(1) - (1)].exp)); ;}
    break;

  case 220:

/* Line 1464 of yacc.c  */
#line 1199 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (4)].id), MkTemplateDatatype((yyvsp[(1) - (4)].list), null), (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 221:

/* Line 1464 of yacc.c  */
#line 1200 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(3) - (5)].id), MkTemplateDatatype((yyvsp[(1) - (5)].list), (yyvsp[(2) - (5)].declarator)), (yyvsp[(5) - (5)].templateArgument)); ;}
    break;

  case 225:

/* Line 1464 of yacc.c  */
#line 1210 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateParameter)); ;}
    break;

  case 226:

/* Line 1464 of yacc.c  */
#line 1211 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateParameter)); ;}
    break;

  case 230:

/* Line 1464 of yacc.c  */
#line 1218 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 231:

/* Line 1464 of yacc.c  */
#line 1219 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 232:

/* Line 1464 of yacc.c  */
#line 1220 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 233:

/* Line 1464 of yacc.c  */
#line 1260 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateArgument)); ;}
    break;

  case 234:

/* Line 1464 of yacc.c  */
#line 1261 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 235:

/* Line 1464 of yacc.c  */
#line 1266 "grammar.y"
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   ;}
    break;

  case 236:

/* Line 1464 of yacc.c  */
#line 1273 "grammar.y"
    { (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 237:

/* Line 1464 of yacc.c  */
#line 1275 "grammar.y"
    {
      (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (2)].specifier).nsSpec, (yyvsp[(2) - (2)].specifier).name);
      (yyval.symbol).nameLoc = (yylsp[(2) - (2)]);
      FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 238:

/* Line 1464 of yacc.c  */
#line 1282 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (3)].id)._class, (yyvsp[(3) - (3)].id).string); FreeIdentifier((yyvsp[(1) - (3)].id)); FreeIdentifier((yyvsp[(3) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 239:

/* Line 1464 of yacc.c  */
#line 1283 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (3)].specifier).nsSpec, (yyvsp[(3) - (3)].specifier).name); FreeIdentifier((yyvsp[(1) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (3)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 240:

/* Line 1464 of yacc.c  */
#line 1285 "grammar.y"
    { (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string); (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); FreeIdentifier((yyvsp[(2) - (5)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 241:

/* Line 1464 of yacc.c  */
#line 1287 "grammar.y"
    {
      (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (5)].specifier).nsSpec, (yyvsp[(2) - (5)].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list);
      (yyval.symbol).nameLoc = (yylsp[(2) - (5)]);
      FreeSpecifier((yyvsp[(2) - (5)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 242:

/* Line 1464 of yacc.c  */
#line 1295 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (6)].id)._class, (yyvsp[(3) - (6)].id).string); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 243:

/* Line 1464 of yacc.c  */
#line 1296 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (6)].specifier).nsSpec, (yyvsp[(3) - (6)].specifier).name); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (6)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 244:

/* Line 1464 of yacc.c  */
#line 1301 "grammar.y"
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[(1) - (2)]._class);
      ;}
    break;

  case 245:

/* Line 1464 of yacc.c  */
#line 1308 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (2)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (2)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 246:

/* Line 1464 of yacc.c  */
#line 1315 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 247:

/* Line 1464 of yacc.c  */
#line 1321 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 248:

/* Line 1464 of yacc.c  */
#line 1328 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClassAddNameSpace((yyvsp[(2) - (3)].id)._class, (yyvsp[(2) - (3)].id).string), null, null); FreeIdentifier((yyvsp[(2) - (3)].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 249:

/* Line 1464 of yacc.c  */
#line 1334 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClass((yyvsp[(2) - (3)].specifier).nsSpec, (yyvsp[(2) - (3)].specifier).name), null, null); FreeSpecifier((yyvsp[(2) - (3)].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 250:

/* Line 1464 of yacc.c  */
#line 1343 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].list), null);
      ;}
    break;

  case 251:

/* Line 1464 of yacc.c  */
#line 1350 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 252:

/* Line 1464 of yacc.c  */
#line 1356 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 253:

/* Line 1464 of yacc.c  */
#line 1362 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 254:

/* Line 1464 of yacc.c  */
#line 1368 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 255:

/* Line 1464 of yacc.c  */
#line 1374 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 256:

/* Line 1464 of yacc.c  */
#line 1380 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 257:

/* Line 1464 of yacc.c  */
#line 1391 "grammar.y"
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 259:

/* Line 1464 of yacc.c  */
#line 1397 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 260:

/* Line 1464 of yacc.c  */
#line 1401 "grammar.y"
    { (yyval.exp) = MkExpString((yyvsp[(1) - (1)].string)); delete (yyvsp[(1) - (1)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 261:

/* Line 1464 of yacc.c  */
#line 1402 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(2) - (2)].string), null); delete (yyvsp[(2) - (2)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 262:

/* Line 1464 of yacc.c  */
#line 1403 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(4) - (4)].string), (yyvsp[(2) - (4)].string)); delete (yyvsp[(2) - (4)].string); delete (yyvsp[(4) - (4)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 263:

/* Line 1464 of yacc.c  */
#line 1407 "grammar.y"
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); ;}
    break;

  case 264:

/* Line 1464 of yacc.c  */
#line 1411 "grammar.y"
    { (yyval.exp) = MkExpIdentifier((yyvsp[(1) - (1)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 265:

/* Line 1464 of yacc.c  */
#line 1412 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 266:

/* Line 1464 of yacc.c  */
#line 1413 "grammar.y"
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[(3) - (4)].stmt)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 267:

/* Line 1464 of yacc.c  */
#line 1414 "grammar.y"
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 268:

/* Line 1464 of yacc.c  */
#line 1415 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (5)].typeName), (yyvsp[(5) - (5)].initializer)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 269:

/* Line 1464 of yacc.c  */
#line 1416 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (8)].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[(6) - (8)].typeName), (yyvsp[(8) - (8)].initializer)))); (yyval.exp).loc = (yyloc); ;}
    break;

  case 270:

/* Line 1464 of yacc.c  */
#line 1418 "grammar.y"
    {
      char * constant = (yyvsp[(1) - (2)].exp).constant;
      int len = strlen(constant);
      if(constant[len-1] == '.')
      {
         constant[len-1] = 0;
         (yyval.exp) = MkExpMember((yyvsp[(1) - (2)].exp), (yyvsp[(2) - (2)].id));
         (yyval.exp).loc = (yyloc);
      }
      else
         yyerror();
   ;}
    break;

  case 271:

/* Line 1464 of yacc.c  */
#line 1430 "grammar.y"
    { (yyval.exp) = (yyvsp[(1) - (1)].exp); ;}
    break;

  case 273:

/* Line 1464 of yacc.c  */
#line 1432 "grammar.y"
    { (yyval.exp) = MkExpWideString(yytext); (yyval.exp).loc = (yyloc); ;}
    break;

  case 274:

/* Line 1464 of yacc.c  */
#line 1433 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(1) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); ;}
    break;

  case 275:

/* Line 1464 of yacc.c  */
#line 1434 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 276:

/* Line 1464 of yacc.c  */
#line 1435 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 277:

/* Line 1464 of yacc.c  */
#line 1436 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 278:

/* Line 1464 of yacc.c  */
#line 1437 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 279:

/* Line 1464 of yacc.c  */
#line 1438 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 280:

/* Line 1464 of yacc.c  */
#line 1439 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 281:

/* Line 1464 of yacc.c  */
#line 1440 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 282:

/* Line 1464 of yacc.c  */
#line 1441 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 283:

/* Line 1464 of yacc.c  */
#line 1442 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 284:

/* Line 1464 of yacc.c  */
#line 1443 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 285:

/* Line 1464 of yacc.c  */
#line 1444 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 286:

/* Line 1464 of yacc.c  */
#line 1445 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 287:

/* Line 1464 of yacc.c  */
#line 1446 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 288:

/* Line 1464 of yacc.c  */
#line 1447 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 289:

/* Line 1464 of yacc.c  */
#line 1448 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 290:

/* Line 1464 of yacc.c  */
#line 1449 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 291:

/* Line 1464 of yacc.c  */
#line 1450 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (4)].list), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 292:

/* Line 1464 of yacc.c  */
#line 1451 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].declarator)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 293:

/* Line 1464 of yacc.c  */
#line 1452 "grammar.y"
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[(3) - (4)].id).string)), null); FreeIdentifier((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 294:

/* Line 1464 of yacc.c  */
#line 1453 "grammar.y"
    { (yyval.exp) = MkExpVaArg((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 295:

/* Line 1464 of yacc.c  */
#line 1455 "grammar.y"
    { (yyval.exp) = MkExpClassData((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 300:

/* Line 1464 of yacc.c  */
#line 1461 "grammar.y"
    { (yyval.exp) = MkExpArray((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 301:

/* Line 1464 of yacc.c  */
#line 1462 "grammar.y"
    { (yyval.exp) = MkExpArray(null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 302:

/* Line 1464 of yacc.c  */
#line 1466 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 303:

/* Line 1464 of yacc.c  */
#line 1470 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 304:

/* Line 1464 of yacc.c  */
#line 1474 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 305:

/* Line 1464 of yacc.c  */
#line 1475 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 307:

/* Line 1464 of yacc.c  */
#line 1481 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 308:

/* Line 1464 of yacc.c  */
#line 1482 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 309:

/* Line 1464 of yacc.c  */
#line 1483 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 310:

/* Line 1464 of yacc.c  */
#line 1484 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 311:

/* Line 1464 of yacc.c  */
#line 1485 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 312:

/* Line 1464 of yacc.c  */
#line 1486 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 313:

/* Line 1464 of yacc.c  */
#line 1487 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 314:

/* Line 1464 of yacc.c  */
#line 1488 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 315:

/* Line 1464 of yacc.c  */
#line 1489 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 316:

/* Line 1464 of yacc.c  */
#line 1491 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 317:

/* Line 1464 of yacc.c  */
#line 1492 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 318:

/* Line 1464 of yacc.c  */
#line 1493 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 319:

/* Line 1464 of yacc.c  */
#line 1494 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 320:

/* Line 1464 of yacc.c  */
#line 1495 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 321:

/* Line 1464 of yacc.c  */
#line 1496 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 322:

/* Line 1464 of yacc.c  */
#line 1497 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 323:

/* Line 1464 of yacc.c  */
#line 1498 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 324:

/* Line 1464 of yacc.c  */
#line 1525 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 325:

/* Line 1464 of yacc.c  */
#line 1526 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 326:

/* Line 1464 of yacc.c  */
#line 1527 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 327:

/* Line 1464 of yacc.c  */
#line 1528 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 328:

/* Line 1464 of yacc.c  */
#line 1532 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 329:

/* Line 1464 of yacc.c  */
#line 1533 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 330:

/* Line 1464 of yacc.c  */
#line 1534 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 331:

/* Line 1464 of yacc.c  */
#line 1535 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 332:

/* Line 1464 of yacc.c  */
#line 1536 "grammar.y"
    { Expression exp = MkExpDummy(); yyerror(); exp.loc.start = (yylsp[(2) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), exp); ;}
    break;

  case 333:

/* Line 1464 of yacc.c  */
#line 1540 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 334:

/* Line 1464 of yacc.c  */
#line 1541 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 335:

/* Line 1464 of yacc.c  */
#line 1542 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 336:

/* Line 1464 of yacc.c  */
#line 1543 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 337:

/* Line 1464 of yacc.c  */
#line 1545 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 338:

/* Line 1464 of yacc.c  */
#line 1546 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 339:

/* Line 1464 of yacc.c  */
#line 1547 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 340:

/* Line 1464 of yacc.c  */
#line 1548 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 341:

/* Line 1464 of yacc.c  */
#line 1551 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 342:

/* Line 1464 of yacc.c  */
#line 1552 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 343:

/* Line 1464 of yacc.c  */
#line 1554 "grammar.y"
    { (yyval.exp) = MkExpOffsetOf((yyvsp[(3) - (6)].typeName), (yyvsp[(5) - (6)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 346:

/* Line 1464 of yacc.c  */
#line 1568 "grammar.y"
    { (yyval.i) = '&'; ;}
    break;

  case 347:

/* Line 1464 of yacc.c  */
#line 1569 "grammar.y"
    { (yyval.i) = '*'; ;}
    break;

  case 348:

/* Line 1464 of yacc.c  */
#line 1570 "grammar.y"
    { (yyval.i) = '+'; ;}
    break;

  case 349:

/* Line 1464 of yacc.c  */
#line 1571 "grammar.y"
    { (yyval.i) = '-'; ;}
    break;

  case 350:

/* Line 1464 of yacc.c  */
#line 1572 "grammar.y"
    { (yyval.i) = '~'; ;}
    break;

  case 351:

/* Line 1464 of yacc.c  */
#line 1573 "grammar.y"
    { (yyval.i) = '!'; ;}
    break;

  case 352:

/* Line 1464 of yacc.c  */
#line 1574 "grammar.y"
    { (yyval.i) = DELETE; ;}
    break;

  case 353:

/* Line 1464 of yacc.c  */
#line 1575 "grammar.y"
    { (yyval.i) = _INCREF; ;}
    break;

  case 355:

/* Line 1464 of yacc.c  */
#line 1580 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 357:

/* Line 1464 of yacc.c  */
#line 1585 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 358:

/* Line 1464 of yacc.c  */
#line 1586 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 359:

/* Line 1464 of yacc.c  */
#line 1587 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 360:

/* Line 1464 of yacc.c  */
#line 1588 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 361:

/* Line 1464 of yacc.c  */
#line 1589 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 362:

/* Line 1464 of yacc.c  */
#line 1590 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 364:

/* Line 1464 of yacc.c  */
#line 1595 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 365:

/* Line 1464 of yacc.c  */
#line 1596 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 366:

/* Line 1464 of yacc.c  */
#line 1597 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 367:

/* Line 1464 of yacc.c  */
#line 1598 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 369:

/* Line 1464 of yacc.c  */
#line 1603 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 370:

/* Line 1464 of yacc.c  */
#line 1604 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 371:

/* Line 1464 of yacc.c  */
#line 1605 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 372:

/* Line 1464 of yacc.c  */
#line 1606 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 373:

/* Line 1464 of yacc.c  */
#line 1611 "grammar.y"
    {
      (yyval.exp) = (yyvsp[(1) - (2)].exp);
      skipErrors = true;
   ;}
    break;

  case 375:

/* Line 1464 of yacc.c  */
#line 1619 "grammar.y"
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp)/*$3*/); (yyval.exp).loc = (yyloc); ;}
    break;

  case 376:

/* Line 1464 of yacc.c  */
#line 1620 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 377:

/* Line 1464 of yacc.c  */
#line 1621 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 378:

/* Line 1464 of yacc.c  */
#line 1622 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 379:

/* Line 1464 of yacc.c  */
#line 1623 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 380:

/* Line 1464 of yacc.c  */
#line 1624 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 381:

/* Line 1464 of yacc.c  */
#line 1625 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 382:

/* Line 1464 of yacc.c  */
#line 1626 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 384:

/* Line 1464 of yacc.c  */
#line 1631 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 385:

/* Line 1464 of yacc.c  */
#line 1632 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 386:

/* Line 1464 of yacc.c  */
#line 1633 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 387:

/* Line 1464 of yacc.c  */
#line 1634 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 388:

/* Line 1464 of yacc.c  */
#line 1636 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 389:

/* Line 1464 of yacc.c  */
#line 1637 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 390:

/* Line 1464 of yacc.c  */
#line 1638 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 391:

/* Line 1464 of yacc.c  */
#line 1639 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 393:

/* Line 1464 of yacc.c  */
#line 1644 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 394:

/* Line 1464 of yacc.c  */
#line 1645 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 395:

/* Line 1464 of yacc.c  */
#line 1647 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 396:

/* Line 1464 of yacc.c  */
#line 1648 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 398:

/* Line 1464 of yacc.c  */
#line 1653 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 399:

/* Line 1464 of yacc.c  */
#line 1654 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 400:

/* Line 1464 of yacc.c  */
#line 1656 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 401:

/* Line 1464 of yacc.c  */
#line 1657 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 403:

/* Line 1464 of yacc.c  */
#line 1662 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 404:

/* Line 1464 of yacc.c  */
#line 1663 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 405:

/* Line 1464 of yacc.c  */
#line 1665 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 406:

/* Line 1464 of yacc.c  */
#line 1666 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 408:

/* Line 1464 of yacc.c  */
#line 1671 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 409:

/* Line 1464 of yacc.c  */
#line 1672 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 411:

/* Line 1464 of yacc.c  */
#line 1677 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 412:

/* Line 1464 of yacc.c  */
#line 1678 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 414:

/* Line 1464 of yacc.c  */
#line 1683 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 415:

/* Line 1464 of yacc.c  */
#line 1684 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 416:

/* Line 1464 of yacc.c  */
#line 1685 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 417:

/* Line 1464 of yacc.c  */
#line 1686 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 418:

/* Line 1464 of yacc.c  */
#line 1688 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 419:

/* Line 1464 of yacc.c  */
#line 1689 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 420:

/* Line 1464 of yacc.c  */
#line 1690 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 421:

/* Line 1464 of yacc.c  */
#line 1691 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 422:

/* Line 1464 of yacc.c  */
#line 1693 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 423:

/* Line 1464 of yacc.c  */
#line 1694 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 424:

/* Line 1464 of yacc.c  */
#line 1695 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 425:

/* Line 1464 of yacc.c  */
#line 1696 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 426:

/* Line 1464 of yacc.c  */
#line 1698 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 427:

/* Line 1464 of yacc.c  */
#line 1699 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 428:

/* Line 1464 of yacc.c  */
#line 1700 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 429:

/* Line 1464 of yacc.c  */
#line 1701 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 431:

/* Line 1464 of yacc.c  */
#line 1706 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 432:

/* Line 1464 of yacc.c  */
#line 1707 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 433:

/* Line 1464 of yacc.c  */
#line 1708 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 434:

/* Line 1464 of yacc.c  */
#line 1709 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 435:

/* Line 1464 of yacc.c  */
#line 1711 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 436:

/* Line 1464 of yacc.c  */
#line 1712 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 437:

/* Line 1464 of yacc.c  */
#line 1713 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 438:

/* Line 1464 of yacc.c  */
#line 1714 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 439:

/* Line 1464 of yacc.c  */
#line 1718 "grammar.y"
    { (yyval.i) = '='; ;}
    break;

  case 440:

/* Line 1464 of yacc.c  */
#line 1719 "grammar.y"
    { (yyval.i) = MUL_ASSIGN; ;}
    break;

  case 441:

/* Line 1464 of yacc.c  */
#line 1720 "grammar.y"
    { (yyval.i) = DIV_ASSIGN; ;}
    break;

  case 442:

/* Line 1464 of yacc.c  */
#line 1721 "grammar.y"
    { (yyval.i) = MOD_ASSIGN; ;}
    break;

  case 443:

/* Line 1464 of yacc.c  */
#line 1722 "grammar.y"
    { (yyval.i) = ADD_ASSIGN; ;}
    break;

  case 444:

/* Line 1464 of yacc.c  */
#line 1723 "grammar.y"
    { (yyval.i) = SUB_ASSIGN; ;}
    break;

  case 445:

/* Line 1464 of yacc.c  */
#line 1724 "grammar.y"
    { (yyval.i) = LEFT_ASSIGN; ;}
    break;

  case 446:

/* Line 1464 of yacc.c  */
#line 1725 "grammar.y"
    { (yyval.i) = RIGHT_ASSIGN; ;}
    break;

  case 447:

/* Line 1464 of yacc.c  */
#line 1726 "grammar.y"
    { (yyval.i) = AND_ASSIGN; ;}
    break;

  case 448:

/* Line 1464 of yacc.c  */
#line 1727 "grammar.y"
    { (yyval.i) = XOR_ASSIGN; ;}
    break;

  case 449:

/* Line 1464 of yacc.c  */
#line 1728 "grammar.y"
    { (yyval.i) = OR_ASSIGN; ;}
    break;

  case 450:

/* Line 1464 of yacc.c  */
#line 1732 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 451:

/* Line 1464 of yacc.c  */
#line 1733 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 452:

/* Line 1464 of yacc.c  */
#line 1734 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 454:

/* Line 1464 of yacc.c  */
#line 1739 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 455:

/* Line 1464 of yacc.c  */
#line 1740 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 456:

/* Line 1464 of yacc.c  */
#line 1741 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 458:

/* Line 1464 of yacc.c  */
#line 1746 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ ;}
    break;

  case 460:

/* Line 1464 of yacc.c  */
#line 1748 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 461:

/* Line 1464 of yacc.c  */
#line 1750 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 462:

/* Line 1464 of yacc.c  */
#line 1751 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 463:

/* Line 1464 of yacc.c  */
#line 1753 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 464:

/* Line 1464 of yacc.c  */
#line 1754 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 465:

/* Line 1464 of yacc.c  */
#line 1759 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 466:

/* Line 1464 of yacc.c  */
#line 1761 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 467:

/* Line 1464 of yacc.c  */
#line 1766 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 468:

/* Line 1464 of yacc.c  */
#line 1794 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 469:

/* Line 1464 of yacc.c  */
#line 1795 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 470:

/* Line 1464 of yacc.c  */
#line 1796 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 471:

/* Line 1464 of yacc.c  */
#line 1797 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 472:

/* Line 1464 of yacc.c  */
#line 1799 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 473:

/* Line 1464 of yacc.c  */
#line 1800 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 474:

/* Line 1464 of yacc.c  */
#line 1801 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 475:

/* Line 1464 of yacc.c  */
#line 1802 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 476:

/* Line 1464 of yacc.c  */
#line 1804 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 477:

/* Line 1464 of yacc.c  */
#line 1805 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 481:

/* Line 1464 of yacc.c  */
#line 1820 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 483:

/* Line 1464 of yacc.c  */
#line 1825 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 484:

/* Line 1464 of yacc.c  */
#line 1826 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 485:

/* Line 1464 of yacc.c  */
#line 1827 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 486:

/* Line 1464 of yacc.c  */
#line 1828 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 487:

/* Line 1464 of yacc.c  */
#line 1829 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 488:

/* Line 1464 of yacc.c  */
#line 1830 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 490:

/* Line 1464 of yacc.c  */
#line 1835 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 491:

/* Line 1464 of yacc.c  */
#line 1839 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 492:

/* Line 1464 of yacc.c  */
#line 1843 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 493:

/* Line 1464 of yacc.c  */
#line 1847 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 495:

/* Line 1464 of yacc.c  */
#line 1855 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 496:

/* Line 1464 of yacc.c  */
#line 1856 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 497:

/* Line 1464 of yacc.c  */
#line 1857 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 498:

/* Line 1464 of yacc.c  */
#line 1858 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 500:

/* Line 1464 of yacc.c  */
#line 1864 "grammar.y"
    {
      if((yyvsp[(1) - (2)].exp).type == identifierExp)
      {
         _DeclClass((yyvsp[(1) - (2)].exp).identifier._class, (yyvsp[(1) - (2)].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[(1) - (2)].exp));
         FreeExpression((yyvsp[(2) - (2)].exp));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp));
         (yyval.exp).loc = (yyloc);
      }
      skipErrors = false;
   ;}
    break;

  case 501:

/* Line 1464 of yacc.c  */
#line 1906 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 502:

/* Line 1464 of yacc.c  */
#line 1907 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 503:

/* Line 1464 of yacc.c  */
#line 1908 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 504:

/* Line 1464 of yacc.c  */
#line 1909 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 505:

/* Line 1464 of yacc.c  */
#line 1910 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 506:

/* Line 1464 of yacc.c  */
#line 1911 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 507:

/* Line 1464 of yacc.c  */
#line 1912 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 509:

/* Line 1464 of yacc.c  */
#line 1917 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 510:

/* Line 1464 of yacc.c  */
#line 1918 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 511:

/* Line 1464 of yacc.c  */
#line 1919 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 512:

/* Line 1464 of yacc.c  */
#line 1920 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 513:

/* Line 1464 of yacc.c  */
#line 1927 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 514:

/* Line 1464 of yacc.c  */
#line 1928 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 515:

/* Line 1464 of yacc.c  */
#line 1929 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 516:

/* Line 1464 of yacc.c  */
#line 1930 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 518:

/* Line 1464 of yacc.c  */
#line 1935 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 519:

/* Line 1464 of yacc.c  */
#line 1936 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 520:

/* Line 1464 of yacc.c  */
#line 1938 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 521:

/* Line 1464 of yacc.c  */
#line 1939 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 523:

/* Line 1464 of yacc.c  */
#line 1944 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 524:

/* Line 1464 of yacc.c  */
#line 1945 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 525:

/* Line 1464 of yacc.c  */
#line 1947 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 526:

/* Line 1464 of yacc.c  */
#line 1948 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 528:

/* Line 1464 of yacc.c  */
#line 1953 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 529:

/* Line 1464 of yacc.c  */
#line 1954 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 530:

/* Line 1464 of yacc.c  */
#line 1956 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 531:

/* Line 1464 of yacc.c  */
#line 1957 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 533:

/* Line 1464 of yacc.c  */
#line 1962 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 534:

/* Line 1464 of yacc.c  */
#line 1963 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 536:

/* Line 1464 of yacc.c  */
#line 1968 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 537:

/* Line 1464 of yacc.c  */
#line 1969 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 539:

/* Line 1464 of yacc.c  */
#line 1974 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 540:

/* Line 1464 of yacc.c  */
#line 1975 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 541:

/* Line 1464 of yacc.c  */
#line 1976 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 542:

/* Line 1464 of yacc.c  */
#line 1977 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 543:

/* Line 1464 of yacc.c  */
#line 1978 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 544:

/* Line 1464 of yacc.c  */
#line 1979 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 545:

/* Line 1464 of yacc.c  */
#line 1980 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 546:

/* Line 1464 of yacc.c  */
#line 1981 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 547:

/* Line 1464 of yacc.c  */
#line 1983 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 548:

/* Line 1464 of yacc.c  */
#line 1984 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 549:

/* Line 1464 of yacc.c  */
#line 1985 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 550:

/* Line 1464 of yacc.c  */
#line 1986 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 551:

/* Line 1464 of yacc.c  */
#line 1987 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 552:

/* Line 1464 of yacc.c  */
#line 1988 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 553:

/* Line 1464 of yacc.c  */
#line 1989 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 554:

/* Line 1464 of yacc.c  */
#line 1990 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 555:

/* Line 1464 of yacc.c  */
#line 1992 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 556:

/* Line 1464 of yacc.c  */
#line 1993 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 557:

/* Line 1464 of yacc.c  */
#line 1994 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 558:

/* Line 1464 of yacc.c  */
#line 1995 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 559:

/* Line 1464 of yacc.c  */
#line 1997 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 560:

/* Line 1464 of yacc.c  */
#line 1998 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 561:

/* Line 1464 of yacc.c  */
#line 1999 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 562:

/* Line 1464 of yacc.c  */
#line 2000 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 563:

/* Line 1464 of yacc.c  */
#line 2003 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy());
         (yyval.exp).loc = (yyloc);
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]);
         (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 564:

/* Line 1464 of yacc.c  */
#line 2011 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 565:

/* Line 1464 of yacc.c  */
#line 2015 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 566:

/* Line 1464 of yacc.c  */
#line 2020 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 568:

/* Line 1464 of yacc.c  */
#line 2027 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 569:

/* Line 1464 of yacc.c  */
#line 2031 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 570:

/* Line 1464 of yacc.c  */
#line 2036 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 571:

/* Line 1464 of yacc.c  */
#line 2037 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 572:

/* Line 1464 of yacc.c  */
#line 2041 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 573:

/* Line 1464 of yacc.c  */
#line 2042 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 574:

/* Line 1464 of yacc.c  */
#line 2043 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 575:

/* Line 1464 of yacc.c  */
#line 2044 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 576:

/* Line 1464 of yacc.c  */
#line 2050 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 577:

/* Line 1464 of yacc.c  */
#line 2051 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 578:

/* Line 1464 of yacc.c  */
#line 2052 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 579:

/* Line 1464 of yacc.c  */
#line 2056 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 580:

/* Line 1464 of yacc.c  */
#line 2057 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 581:

/* Line 1464 of yacc.c  */
#line 2058 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 582:

/* Line 1464 of yacc.c  */
#line 2059 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 585:

/* Line 1464 of yacc.c  */
#line 2069 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); ;}
    break;

  case 586:

/* Line 1464 of yacc.c  */
#line 2070 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 587:

/* Line 1464 of yacc.c  */
#line 2071 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); ;}
    break;

  case 588:

/* Line 1464 of yacc.c  */
#line 2072 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); ;}
    break;

  case 589:

/* Line 1464 of yacc.c  */
#line 2073 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 590:

/* Line 1464 of yacc.c  */
#line 2074 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 591:

/* Line 1464 of yacc.c  */
#line 2075 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); ;}
    break;

  case 592:

/* Line 1464 of yacc.c  */
#line 2079 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); structDeclMode = declMode = defaultAccess; ;}
    break;

  case 593:

/* Line 1464 of yacc.c  */
#line 2080 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 594:

/* Line 1464 of yacc.c  */
#line 2081 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); structDeclMode = declMode = staticAccess; ;}
    break;

  case 595:

/* Line 1464 of yacc.c  */
#line 2082 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); ;}
    break;

  case 596:

/* Line 1464 of yacc.c  */
#line 2083 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 597:

/* Line 1464 of yacc.c  */
#line 2084 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 598:

/* Line 1464 of yacc.c  */
#line 2085 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); ;}
    break;

  case 599:

/* Line 1464 of yacc.c  */
#line 2089 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (1)].id), null); ;}
    break;

  case 600:

/* Line 1464 of yacc.c  */
#line 2090 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 601:

/* Line 1464 of yacc.c  */
#line 2091 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 602:

/* Line 1464 of yacc.c  */
#line 2095 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].enumerator)); ;}
    break;

  case 603:

/* Line 1464 of yacc.c  */
#line 2096 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].enumerator)); ;}
    break;

  case 605:

/* Line 1464 of yacc.c  */
#line 2101 "grammar.y"
    { memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 606:

/* Line 1464 of yacc.c  */
#line 2105 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (2)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 607:

/* Line 1464 of yacc.c  */
#line 2106 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (2)].specifier).name), null); POP_DEFAULT_ACCESS ;}
    break;

  case 608:

/* Line 1464 of yacc.c  */
#line 2110 "grammar.y"
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[(1) - (2)].specifier); ;}
    break;

  case 609:

/* Line 1464 of yacc.c  */
#line 2111 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 610:

/* Line 1464 of yacc.c  */
#line 2112 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); FreeSpecifier((yyvsp[(2) - (4)].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 611:

/* Line 1464 of yacc.c  */
#line 2116 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 612:

/* Line 1464 of yacc.c  */
#line 2117 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 613:

/* Line 1464 of yacc.c  */
#line 2119 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 614:

/* Line 1464 of yacc.c  */
#line 2120 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 615:

/* Line 1464 of yacc.c  */
#line 2121 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 616:

/* Line 1464 of yacc.c  */
#line 2122 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 617:

/* Line 1464 of yacc.c  */
#line 2123 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 618:

/* Line 1464 of yacc.c  */
#line 2125 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 619:

/* Line 1464 of yacc.c  */
#line 2126 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 620:

/* Line 1464 of yacc.c  */
#line 2127 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 621:

/* Line 1464 of yacc.c  */
#line 2128 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 622:

/* Line 1464 of yacc.c  */
#line 2129 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 623:

/* Line 1464 of yacc.c  */
#line 2131 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 624:

/* Line 1464 of yacc.c  */
#line 2132 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 625:

/* Line 1464 of yacc.c  */
#line 2136 "grammar.y"
    { (yyval.id) = (yyvsp[(2) - (2)].id); if(declMode) DeclClassAddNameSpace((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); ;}
    break;

  case 626:

/* Line 1464 of yacc.c  */
#line 2137 "grammar.y"
    { (yyval.id) = MkIdentifier((yyvsp[(2) - (2)].specifier).name); if(declMode) DeclClass((yyvsp[(2) - (2)].specifier).nsSpec, (yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 627:

/* Line 1464 of yacc.c  */
#line 2141 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 628:

/* Line 1464 of yacc.c  */
#line 2142 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 629:

/* Line 1464 of yacc.c  */
#line 2143 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 630:

/* Line 1464 of yacc.c  */
#line 2147 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 631:

/* Line 1464 of yacc.c  */
#line 2148 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 632:

/* Line 1464 of yacc.c  */
#line 2149 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 633:

/* Line 1464 of yacc.c  */
#line 2150 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 634:

/* Line 1464 of yacc.c  */
#line 2151 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 635:

/* Line 1464 of yacc.c  */
#line 2152 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 636:

/* Line 1464 of yacc.c  */
#line 2153 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 637:

/* Line 1464 of yacc.c  */
#line 2154 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 638:

/* Line 1464 of yacc.c  */
#line 2155 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 639:

/* Line 1464 of yacc.c  */
#line 2157 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 640:

/* Line 1464 of yacc.c  */
#line 2158 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 641:

/* Line 1464 of yacc.c  */
#line 2160 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 642:

/* Line 1464 of yacc.c  */
#line 2161 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 643:

/* Line 1464 of yacc.c  */
#line 2162 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 644:

/* Line 1464 of yacc.c  */
#line 2163 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 645:

/* Line 1464 of yacc.c  */
#line 2164 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 646:

/* Line 1464 of yacc.c  */
#line 2166 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 647:

/* Line 1464 of yacc.c  */
#line 2167 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 648:

/* Line 1464 of yacc.c  */
#line 2168 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 649:

/* Line 1464 of yacc.c  */
#line 2169 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 654:

/* Line 1464 of yacc.c  */
#line 2183 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[(1) - (1)].extDecl)); ;}
    break;

  case 655:

/* Line 1464 of yacc.c  */
#line 2187 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CONST); ;}
    break;

  case 656:

/* Line 1464 of yacc.c  */
#line 2188 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOLATILE); ;}
    break;

  case 657:

/* Line 1464 of yacc.c  */
#line 2189 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 658:

/* Line 1464 of yacc.c  */
#line 2194 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 659:

/* Line 1464 of yacc.c  */
#line 2195 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier));  ;}
    break;

  case 660:

/* Line 1464 of yacc.c  */
#line 2199 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 661:

/* Line 1464 of yacc.c  */
#line 2200 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 662:

/* Line 1464 of yacc.c  */
#line 2201 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 663:

/* Line 1464 of yacc.c  */
#line 2202 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 664:

/* Line 1464 of yacc.c  */
#line 2203 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 665:

/* Line 1464 of yacc.c  */
#line 2204 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 666:

/* Line 1464 of yacc.c  */
#line 2205 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT128); ;}
    break;

  case 667:

/* Line 1464 of yacc.c  */
#line 2206 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 668:

/* Line 1464 of yacc.c  */
#line 2207 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 669:

/* Line 1464 of yacc.c  */
#line 2208 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 670:

/* Line 1464 of yacc.c  */
#line 2209 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 671:

/* Line 1464 of yacc.c  */
#line 2210 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 672:

/* Line 1464 of yacc.c  */
#line 2211 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 673:

/* Line 1464 of yacc.c  */
#line 2212 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 677:

/* Line 1464 of yacc.c  */
#line 2216 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 678:

/* Line 1464 of yacc.c  */
#line 2217 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 679:

/* Line 1464 of yacc.c  */
#line 2218 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id)._class, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 680:

/* Line 1464 of yacc.c  */
#line 2219 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 681:

/* Line 1464 of yacc.c  */
#line 2220 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); ;}
    break;

  case 682:

/* Line 1464 of yacc.c  */
#line 2221 "grammar.y"
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); ;}
    break;

  case 683:

/* Line 1464 of yacc.c  */
#line 2222 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); ;}
    break;

  case 684:

/* Line 1464 of yacc.c  */
#line 2223 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); ;}
    break;

  case 685:

/* Line 1464 of yacc.c  */
#line 2224 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); ;}
    break;

  case 686:

/* Line 1464 of yacc.c  */
#line 2225 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); ;}
    break;

  case 687:

/* Line 1464 of yacc.c  */
#line 2229 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 688:

/* Line 1464 of yacc.c  */
#line 2230 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 689:

/* Line 1464 of yacc.c  */
#line 2231 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 690:

/* Line 1464 of yacc.c  */
#line 2232 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 691:

/* Line 1464 of yacc.c  */
#line 2233 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 692:

/* Line 1464 of yacc.c  */
#line 2234 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 693:

/* Line 1464 of yacc.c  */
#line 2235 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT128); ;}
    break;

  case 694:

/* Line 1464 of yacc.c  */
#line 2236 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 695:

/* Line 1464 of yacc.c  */
#line 2237 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 696:

/* Line 1464 of yacc.c  */
#line 2238 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 697:

/* Line 1464 of yacc.c  */
#line 2239 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 698:

/* Line 1464 of yacc.c  */
#line 2240 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 699:

/* Line 1464 of yacc.c  */
#line 2241 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 700:

/* Line 1464 of yacc.c  */
#line 2242 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 704:

/* Line 1464 of yacc.c  */
#line 2246 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); ;}
    break;

  case 705:

/* Line 1464 of yacc.c  */
#line 2247 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); ;}
    break;

  case 706:

/* Line 1464 of yacc.c  */
#line 2248 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); ;}
    break;

  case 707:

/* Line 1464 of yacc.c  */
#line 2249 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); ;}
    break;

  case 708:

/* Line 1464 of yacc.c  */
#line 2250 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 709:

/* Line 1464 of yacc.c  */
#line 2251 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 710:

/* Line 1464 of yacc.c  */
#line 2252 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id)._class, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 711:

/* Line 1464 of yacc.c  */
#line 2253 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 712:

/* Line 1464 of yacc.c  */
#line 2260 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 713:

/* Line 1464 of yacc.c  */
#line 2262 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[(2) - (2)].attrib); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 714:

/* Line 1464 of yacc.c  */
#line 2264 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 715:

/* Line 1464 of yacc.c  */
#line 2266 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 716:

/* Line 1464 of yacc.c  */
#line 2268 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 717:

/* Line 1464 of yacc.c  */
#line 2270 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 718:

/* Line 1464 of yacc.c  */
#line 2272 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 719:

/* Line 1464 of yacc.c  */
#line 2274 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 720:

/* Line 1464 of yacc.c  */
#line 2276 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 721:

/* Line 1464 of yacc.c  */
#line 2278 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 722:

/* Line 1464 of yacc.c  */
#line 2282 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declarator)); ;}
    break;

  case 723:

/* Line 1464 of yacc.c  */
#line 2283 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].declarator)); ;}
    break;

  case 724:

/* Line 1464 of yacc.c  */
#line 2288 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), (yyvsp[(2) - (2)].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 725:

/* Line 1464 of yacc.c  */
#line 2294 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), MkIdentifier((yyvsp[(2) - (2)].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ;}
    break;

  case 726:

/* Line 1464 of yacc.c  */
#line 2300 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), (yyvsp[(3) - (3)].id), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 727:

/* Line 1464 of yacc.c  */
#line 2307 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), MkIdentifier((yyvsp[(3) - (3)].specifier).name), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(3) - (3)].specifier));
      ;}
    break;

  case 728:

/* Line 1464 of yacc.c  */
#line 2316 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 729:

/* Line 1464 of yacc.c  */
#line 2317 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 730:

/* Line 1464 of yacc.c  */
#line 2318 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 731:

/* Line 1464 of yacc.c  */
#line 2319 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 732:

/* Line 1464 of yacc.c  */
#line 2323 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 733:

/* Line 1464 of yacc.c  */
#line 2324 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 734:

/* Line 1464 of yacc.c  */
#line 2325 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 735:

/* Line 1464 of yacc.c  */
#line 2327 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 736:

/* Line 1464 of yacc.c  */
#line 2328 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 737:

/* Line 1464 of yacc.c  */
#line 2329 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 738:

/* Line 1464 of yacc.c  */
#line 2331 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 739:

/* Line 1464 of yacc.c  */
#line 2332 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 740:

/* Line 1464 of yacc.c  */
#line 2333 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 741:

/* Line 1464 of yacc.c  */
#line 2337 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 742:

/* Line 1464 of yacc.c  */
#line 2342 "grammar.y"
    {
        (yyval.specifier) = (yyvsp[(1) - (1)].specifier);
        if(declMode)
        {
           ((yyvsp[(1) - (1)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (1)].specifier).id._class, (yyvsp[(1) - (1)].specifier).id.string);
        }
     ;}
    break;

  case 743:

/* Line 1464 of yacc.c  */
#line 2350 "grammar.y"
    {
      Symbol symbol = ((yyvsp[(1) - (4)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (4)].specifier).id._class, (yyvsp[(1) - (4)].specifier).id.string);
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      symbol.templateParams = (yyvsp[(3) - (4)].list);
   ;}
    break;

  case 744:

/* Line 1464 of yacc.c  */
#line 2359 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[(3) - (3)].list);
      SetupBaseSpecs(null, (yyvsp[(3) - (3)].list));
   ;}
    break;

  case 745:

/* Line 1464 of yacc.c  */
#line 2367 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 746:

/* Line 1464 of yacc.c  */
#line 2369 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 747:

/* Line 1464 of yacc.c  */
#line 2370 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 748:

/* Line 1464 of yacc.c  */
#line 2371 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 749:

/* Line 1464 of yacc.c  */
#line 2376 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 750:

/* Line 1464 of yacc.c  */
#line 2383 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 751:

/* Line 1464 of yacc.c  */
#line 2390 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext);;}
    break;

  case 752:

/* Line 1464 of yacc.c  */
#line 2393 "grammar.y"
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 753:

/* Line 1464 of yacc.c  */
#line 2406 "grammar.y"
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 754:

/* Line 1464 of yacc.c  */
#line 2420 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 755:

/* Line 1464 of yacc.c  */
#line 2423 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS  ;}
    break;

  case 756:

/* Line 1464 of yacc.c  */
#line 2425 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 757:

/* Line 1464 of yacc.c  */
#line 2427 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 758:

/* Line 1464 of yacc.c  */
#line 2431 "grammar.y"
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 759:

/* Line 1464 of yacc.c  */
#line 2432 "grammar.y"
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 760:

/* Line 1464 of yacc.c  */
#line 2436 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 761:

/* Line 1464 of yacc.c  */
#line 2437 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 762:

/* Line 1464 of yacc.c  */
#line 2438 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 763:

/* Line 1464 of yacc.c  */
#line 2439 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 764:

/* Line 1464 of yacc.c  */
#line 2440 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 765:

/* Line 1464 of yacc.c  */
#line 2441 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 766:

/* Line 1464 of yacc.c  */
#line 2442 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 767:

/* Line 1464 of yacc.c  */
#line 2443 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 768:

/* Line 1464 of yacc.c  */
#line 2447 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 769:

/* Line 1464 of yacc.c  */
#line 2448 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 770:

/* Line 1464 of yacc.c  */
#line 2449 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 771:

/* Line 1464 of yacc.c  */
#line 2450 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 772:

/* Line 1464 of yacc.c  */
#line 2451 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 773:

/* Line 1464 of yacc.c  */
#line 2452 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 774:

/* Line 1464 of yacc.c  */
#line 2453 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 775:

/* Line 1464 of yacc.c  */
#line 2454 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 776:

/* Line 1464 of yacc.c  */
#line 2455 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 777:

/* Line 1464 of yacc.c  */
#line 2456 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 778:

/* Line 1464 of yacc.c  */
#line 2460 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 779:

/* Line 1464 of yacc.c  */
#line 2461 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 780:

/* Line 1464 of yacc.c  */
#line 2462 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 781:

/* Line 1464 of yacc.c  */
#line 2463 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 782:

/* Line 1464 of yacc.c  */
#line 2464 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 783:

/* Line 1464 of yacc.c  */
#line 2465 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 784:

/* Line 1464 of yacc.c  */
#line 2466 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 785:

/* Line 1464 of yacc.c  */
#line 2467 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 786:

/* Line 1464 of yacc.c  */
#line 2468 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 787:

/* Line 1464 of yacc.c  */
#line 2469 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 788:

/* Line 1464 of yacc.c  */
#line 2473 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 789:

/* Line 1464 of yacc.c  */
#line 2474 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 790:

/* Line 1464 of yacc.c  */
#line 2475 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 791:

/* Line 1464 of yacc.c  */
#line 2476 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 792:

/* Line 1464 of yacc.c  */
#line 2477 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 793:

/* Line 1464 of yacc.c  */
#line 2478 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 794:

/* Line 1464 of yacc.c  */
#line 2479 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 795:

/* Line 1464 of yacc.c  */
#line 2480 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 796:

/* Line 1464 of yacc.c  */
#line 2481 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 797:

/* Line 1464 of yacc.c  */
#line 2482 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 798:

/* Line 1464 of yacc.c  */
#line 2483 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 799:

/* Line 1464 of yacc.c  */
#line 2484 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 800:

/* Line 1464 of yacc.c  */
#line 2488 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 801:

/* Line 1464 of yacc.c  */
#line 2489 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 802:

/* Line 1464 of yacc.c  */
#line 2490 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 803:

/* Line 1464 of yacc.c  */
#line 2491 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 804:

/* Line 1464 of yacc.c  */
#line 2492 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 805:

/* Line 1464 of yacc.c  */
#line 2493 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 806:

/* Line 1464 of yacc.c  */
#line 2494 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 807:

/* Line 1464 of yacc.c  */
#line 2495 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 808:

/* Line 1464 of yacc.c  */
#line 2496 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 809:

/* Line 1464 of yacc.c  */
#line 2497 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 810:

/* Line 1464 of yacc.c  */
#line 2501 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 811:

/* Line 1464 of yacc.c  */
#line 2502 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 812:

/* Line 1464 of yacc.c  */
#line 2506 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); ;}
    break;

  case 813:

/* Line 1464 of yacc.c  */
#line 2507 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); ;}
    break;

  case 814:

/* Line 1464 of yacc.c  */
#line 2508 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 815:

/* Line 1464 of yacc.c  */
#line 2509 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 816:

/* Line 1464 of yacc.c  */
#line 2510 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 817:

/* Line 1464 of yacc.c  */
#line 2511 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 818:

/* Line 1464 of yacc.c  */
#line 2512 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 819:

/* Line 1464 of yacc.c  */
#line 2513 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 820:

/* Line 1464 of yacc.c  */
#line 2515 "grammar.y"
    { _DeclClass((yyvsp[(1) - (1)].id)._class, (yyvsp[(1) - (1)].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 821:

/* Line 1464 of yacc.c  */
#line 2516 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); _DeclClass((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 822:

/* Line 1464 of yacc.c  */
#line 2519 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 823:

/* Line 1464 of yacc.c  */
#line 2527 "grammar.y"
    {
         (yyval.list) = (yyvsp[(1) - (5)].list);
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 825:

/* Line 1464 of yacc.c  */
#line 2537 "grammar.y"
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[(1) - (1)].specifierType), null, null)); POP_DEFAULT_ACCESS ;}
    break;

  case 826:

/* Line 1464 of yacc.c  */
#line 2541 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 827:

/* Line 1464 of yacc.c  */
#line 2542 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 828:

/* Line 1464 of yacc.c  */
#line 2543 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 829:

/* Line 1464 of yacc.c  */
#line 2544 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 830:

/* Line 1464 of yacc.c  */
#line 2545 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 831:

/* Line 1464 of yacc.c  */
#line 2546 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 832:

/* Line 1464 of yacc.c  */
#line 2547 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 833:

/* Line 1464 of yacc.c  */
#line 2548 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 834:

/* Line 1464 of yacc.c  */
#line 2550 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 835:

/* Line 1464 of yacc.c  */
#line 2558 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 836:

/* Line 1464 of yacc.c  */
#line 2566 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 837:

/* Line 1464 of yacc.c  */
#line 2567 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 838:

/* Line 1464 of yacc.c  */
#line 2568 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 839:

/* Line 1464 of yacc.c  */
#line 2569 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 840:

/* Line 1464 of yacc.c  */
#line 2570 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 841:

/* Line 1464 of yacc.c  */
#line 2571 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 842:

/* Line 1464 of yacc.c  */
#line 2572 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 843:

/* Line 1464 of yacc.c  */
#line 2573 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 844:

/* Line 1464 of yacc.c  */
#line 2574 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 845:

/* Line 1464 of yacc.c  */
#line 2575 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 846:

/* Line 1464 of yacc.c  */
#line 2576 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 847:

/* Line 1464 of yacc.c  */
#line 2577 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 848:

/* Line 1464 of yacc.c  */
#line 2579 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 849:

/* Line 1464 of yacc.c  */
#line 2587 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 850:

/* Line 1464 of yacc.c  */
#line 2595 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 851:

/* Line 1464 of yacc.c  */
#line 2596 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 852:

/* Line 1464 of yacc.c  */
#line 2597 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 853:

/* Line 1464 of yacc.c  */
#line 2598 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 854:

/* Line 1464 of yacc.c  */
#line 2599 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 855:

/* Line 1464 of yacc.c  */
#line 2600 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 856:

/* Line 1464 of yacc.c  */
#line 2601 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 857:

/* Line 1464 of yacc.c  */
#line 2602 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 858:

/* Line 1464 of yacc.c  */
#line 2603 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 859:

/* Line 1464 of yacc.c  */
#line 2604 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 860:

/* Line 1464 of yacc.c  */
#line 2605 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 861:

/* Line 1464 of yacc.c  */
#line 2606 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 862:

/* Line 1464 of yacc.c  */
#line 2608 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 863:

/* Line 1464 of yacc.c  */
#line 2616 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 864:

/* Line 1464 of yacc.c  */
#line 2624 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 865:

/* Line 1464 of yacc.c  */
#line 2625 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 866:

/* Line 1464 of yacc.c  */
#line 2629 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)))); ;}
    break;

  case 867:

/* Line 1464 of yacc.c  */
#line 2630 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 868:

/* Line 1464 of yacc.c  */
#line 2631 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 869:

/* Line 1464 of yacc.c  */
#line 2632 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 870:

/* Line 1464 of yacc.c  */
#line 2633 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 872:

/* Line 1464 of yacc.c  */
#line 2639 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (1)].specifier).name, "::", strlen((yyvsp[(1) - (1)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (1)].specifier).name;
      (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier(s));
      FreeSpecifier((yyvsp[(1) - (1)].specifier));
   ;}
    break;

  case 873:

/* Line 1464 of yacc.c  */
#line 2645 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier("uint")); ;}
    break;

  case 874:

/* Line 1464 of yacc.c  */
#line 2648 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 875:

/* Line 1464 of yacc.c  */
#line 2657 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 876:

/* Line 1464 of yacc.c  */
#line 2666 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, (yyvsp[(3) - (4)].specifier));
      ;}
    break;

  case 877:

/* Line 1464 of yacc.c  */
#line 2675 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (3)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, null);
      ;}
    break;

  case 878:

/* Line 1464 of yacc.c  */
#line 2683 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 879:

/* Line 1464 of yacc.c  */
#line 2684 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 880:

/* Line 1464 of yacc.c  */
#line 2685 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 881:

/* Line 1464 of yacc.c  */
#line 2686 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 882:

/* Line 1464 of yacc.c  */
#line 2690 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 883:

/* Line 1464 of yacc.c  */
#line 2691 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 884:

/* Line 1464 of yacc.c  */
#line 2692 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 885:

/* Line 1464 of yacc.c  */
#line 2693 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 886:

/* Line 1464 of yacc.c  */
#line 2694 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 887:

/* Line 1464 of yacc.c  */
#line 2695 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 888:

/* Line 1464 of yacc.c  */
#line 2696 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 889:

/* Line 1464 of yacc.c  */
#line 2697 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 890:

/* Line 1464 of yacc.c  */
#line 2698 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 892:

/* Line 1464 of yacc.c  */
#line 2706 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 893:

/* Line 1464 of yacc.c  */
#line 2707 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 894:

/* Line 1464 of yacc.c  */
#line 2708 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 895:

/* Line 1464 of yacc.c  */
#line 2709 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 896:

/* Line 1464 of yacc.c  */
#line 2710 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 897:

/* Line 1464 of yacc.c  */
#line 2716 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 898:

/* Line 1464 of yacc.c  */
#line 2725 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 899:

/* Line 1464 of yacc.c  */
#line 2734 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 900:

/* Line 1464 of yacc.c  */
#line 2743 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 904:

/* Line 1464 of yacc.c  */
#line 2766 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 905:

/* Line 1464 of yacc.c  */
#line 2767 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 906:

/* Line 1464 of yacc.c  */
#line 2768 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 907:

/* Line 1464 of yacc.c  */
#line 2769 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 908:

/* Line 1464 of yacc.c  */
#line 2770 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 909:

/* Line 1464 of yacc.c  */
#line 2776 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 910:

/* Line 1464 of yacc.c  */
#line 2785 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 911:

/* Line 1464 of yacc.c  */
#line 2794 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 912:

/* Line 1464 of yacc.c  */
#line 2803 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 915:

/* Line 1464 of yacc.c  */
#line 2866 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 916:

/* Line 1464 of yacc.c  */
#line 2867 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 917:

/* Line 1464 of yacc.c  */
#line 2868 "grammar.y"
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 918:

/* Line 1464 of yacc.c  */
#line 2870 "grammar.y"
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[(3) - (4)].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[(3) - (4)].string);
      ;}
    break;

  case 919:

/* Line 1464 of yacc.c  */
#line 2881 "grammar.y"
    { (yyval.i) = ATTRIB; ;}
    break;

  case 920:

/* Line 1464 of yacc.c  */
#line 2882 "grammar.y"
    { (yyval.i) = ATTRIB_DEP; ;}
    break;

  case 921:

/* Line 1464 of yacc.c  */
#line 2883 "grammar.y"
    { (yyval.i) = __ATTRIB; ;}
    break;

  case 922:

/* Line 1464 of yacc.c  */
#line 2888 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 923:

/* Line 1464 of yacc.c  */
#line 2889 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 924:

/* Line 1464 of yacc.c  */
#line 2890 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 925:

/* Line 1464 of yacc.c  */
#line 2891 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 926:

/* Line 1464 of yacc.c  */
#line 2892 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 927:

/* Line 1464 of yacc.c  */
#line 2896 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (1)].string), null); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 928:

/* Line 1464 of yacc.c  */
#line 2897 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (4)].string), MkExpBrackets((yyvsp[(3) - (4)].list))); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 929:

/* Line 1464 of yacc.c  */
#line 2901 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attribute)); ;}
    break;

  case 930:

/* Line 1464 of yacc.c  */
#line 2902 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attribute)); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 931:

/* Line 1464 of yacc.c  */
#line 2903 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].attribute)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 932:

/* Line 1464 of yacc.c  */
#line 2907 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (6)].i), (yyvsp[(4) - (6)].list)); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 933:

/* Line 1464 of yacc.c  */
#line 2908 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (5)].i), null); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 934:

/* Line 1464 of yacc.c  */
#line 2912 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 935:

/* Line 1464 of yacc.c  */
#line 2913 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 936:

/* Line 1464 of yacc.c  */
#line 2914 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, null); ;}
    break;

  case 937:

/* Line 1464 of yacc.c  */
#line 2915 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 938:

/* Line 1464 of yacc.c  */
#line 2916 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 939:

/* Line 1464 of yacc.c  */
#line 2917 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[(2) - (3)].specifier)); ;}
    break;

  case 940:

/* Line 1464 of yacc.c  */
#line 2918 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 941:

/* Line 1464 of yacc.c  */
#line 2919 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 942:

/* Line 1464 of yacc.c  */
#line 2920 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 943:

/* Line 1464 of yacc.c  */
#line 2921 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 944:

/* Line 1464 of yacc.c  */
#line 2922 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 945:

/* Line 1464 of yacc.c  */
#line 2923 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 946:

/* Line 1464 of yacc.c  */
#line 2924 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 947:

/* Line 1464 of yacc.c  */
#line 2925 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 948:

/* Line 1464 of yacc.c  */
#line 2926 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 949:

/* Line 1464 of yacc.c  */
#line 2927 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 950:

/* Line 1464 of yacc.c  */
#line 2931 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 951:

/* Line 1464 of yacc.c  */
#line 2932 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 952:

/* Line 1464 of yacc.c  */
#line 2933 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 953:

/* Line 1464 of yacc.c  */
#line 2934 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 954:

/* Line 1464 of yacc.c  */
#line 2935 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 955:

/* Line 1464 of yacc.c  */
#line 2936 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 956:

/* Line 1464 of yacc.c  */
#line 2937 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 957:

/* Line 1464 of yacc.c  */
#line 2938 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 958:

/* Line 1464 of yacc.c  */
#line 2942 "grammar.y"
    { (yyval.pointer) = MkPointer(null, null); ;}
    break;

  case 959:

/* Line 1464 of yacc.c  */
#line 2943 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (2)].list), null); ;}
    break;

  case 960:

/* Line 1464 of yacc.c  */
#line 2944 "grammar.y"
    { (yyval.pointer) = MkPointer(null, (yyvsp[(2) - (2)].pointer)); ;}
    break;

  case 961:

/* Line 1464 of yacc.c  */
#line 2945 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].pointer)); ;}
    break;

  case 962:

/* Line 1464 of yacc.c  */
#line 2949 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 964:

/* Line 1464 of yacc.c  */
#line 2951 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 965:

/* Line 1464 of yacc.c  */
#line 2952 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 966:

/* Line 1464 of yacc.c  */
#line 2953 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 967:

/* Line 1464 of yacc.c  */
#line 2957 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 969:

/* Line 1464 of yacc.c  */
#line 2959 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 970:

/* Line 1464 of yacc.c  */
#line 2960 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 971:

/* Line 1464 of yacc.c  */
#line 2961 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 973:

/* Line 1464 of yacc.c  */
#line 2967 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 974:

/* Line 1464 of yacc.c  */
#line 2969 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 975:

/* Line 1464 of yacc.c  */
#line 2971 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 976:

/* Line 1464 of yacc.c  */
#line 2973 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 978:

/* Line 1464 of yacc.c  */
#line 2979 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 979:

/* Line 1464 of yacc.c  */
#line 2981 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 980:

/* Line 1464 of yacc.c  */
#line 2983 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 982:

/* Line 1464 of yacc.c  */
#line 2988 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 983:

/* Line 1464 of yacc.c  */
#line 2989 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 984:

/* Line 1464 of yacc.c  */
#line 2990 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 986:

/* Line 1464 of yacc.c  */
#line 2995 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 987:

/* Line 1464 of yacc.c  */
#line 2996 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 988:

/* Line 1464 of yacc.c  */
#line 2997 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 990:

/* Line 1464 of yacc.c  */
#line 3002 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 991:

/* Line 1464 of yacc.c  */
#line 3003 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 992:

/* Line 1464 of yacc.c  */
#line 3004 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 994:

/* Line 1464 of yacc.c  */
#line 3009 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 995:

/* Line 1464 of yacc.c  */
#line 3010 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 996:

/* Line 1464 of yacc.c  */
#line 3011 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 998:

/* Line 1464 of yacc.c  */
#line 3016 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 999:

/* Line 1464 of yacc.c  */
#line 3017 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1000:

/* Line 1464 of yacc.c  */
#line 3018 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1001:

/* Line 1464 of yacc.c  */
#line 3022 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1002:

/* Line 1464 of yacc.c  */
#line 3023 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1003:

/* Line 1464 of yacc.c  */
#line 3025 "grammar.y"
    {
         Compiler_Warning($"extra comma\n");
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      ;}
    break;

  case 1004:

/* Line 1464 of yacc.c  */
#line 3041 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1005:

/* Line 1464 of yacc.c  */
#line 3042 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1006:

/* Line 1464 of yacc.c  */
#line 3043 "grammar.y"
    { yyerror(); (yyval.initializer) = MkInitializerList((yyvsp[(2) - (2)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1007:

/* Line 1464 of yacc.c  */
#line 3045 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (5)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (5)]);
            exp.loc = (yylsp[(3) - (5)]);
            ListAdd((yyvsp[(2) - (5)].list), init);
         }
      ;}
    break;

  case 1008:

/* Line 1464 of yacc.c  */
#line 3058 "grammar.y"
    {
         yyerror();
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (3)]);
            exp.loc = (yylsp[(3) - (3)]);
            ListAdd((yyvsp[(2) - (3)].list), init);
         }
      ;}
    break;

  case 1009:

/* Line 1464 of yacc.c  */
#line 3074 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1010:

/* Line 1464 of yacc.c  */
#line 3076 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1011:

/* Line 1464 of yacc.c  */
#line 3080 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1012:

/* Line 1464 of yacc.c  */
#line 3081 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1013:

/* Line 1464 of yacc.c  */
#line 3085 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1014:

/* Line 1464 of yacc.c  */
#line 3086 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1015:

/* Line 1464 of yacc.c  */
#line 3087 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1016:

/* Line 1464 of yacc.c  */
#line 3088 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1017:

/* Line 1464 of yacc.c  */
#line 3091 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1018:

/* Line 1464 of yacc.c  */
#line 3092 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1019:

/* Line 1464 of yacc.c  */
#line 3096 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1020:

/* Line 1464 of yacc.c  */
#line 3097 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1021:

/* Line 1464 of yacc.c  */
#line 3098 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1022:

/* Line 1464 of yacc.c  */
#line 3102 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1023:

/* Line 1464 of yacc.c  */
#line 3106 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1024:

/* Line 1464 of yacc.c  */
#line 3110 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1025:

/* Line 1464 of yacc.c  */
#line 3111 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1026:

/* Line 1464 of yacc.c  */
#line 3112 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("uint")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1027:

/* Line 1464 of yacc.c  */
#line 3113 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("int64")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1028:

/* Line 1464 of yacc.c  */
#line 3114 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("__int128")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1029:

/* Line 1464 of yacc.c  */
#line 3116 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
      (yyval.list) = MkList();
      ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier(s)), null));
      ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator));
      FreeSpecifier((yyvsp[(1) - (3)].specifier));
   ;}
    break;

  case 1030:

/* Line 1464 of yacc.c  */
#line 3124 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1031:

/* Line 1464 of yacc.c  */
#line 3133 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1032:

/* Line 1464 of yacc.c  */
#line 3134 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].initDeclarator)); ;}
    break;

  case 1033:

/* Line 1464 of yacc.c  */
#line 3135 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1034:

/* Line 1464 of yacc.c  */
#line 3136 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1035:

/* Line 1464 of yacc.c  */
#line 3140 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1036:

/* Line 1464 of yacc.c  */
#line 3141 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1037:

/* Line 1464 of yacc.c  */
#line 3145 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1038:

/* Line 1464 of yacc.c  */
#line 3146 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1039:

/* Line 1464 of yacc.c  */
#line 3151 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1040:

/* Line 1464 of yacc.c  */
#line 3152 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1041:

/* Line 1464 of yacc.c  */
#line 3153 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), MkDeclaratorPointer(MkPointer(null,null), null)); ;}
    break;

  case 1042:

/* Line 1464 of yacc.c  */
#line 3154 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1043:

/* Line 1464 of yacc.c  */
#line 3155 "grammar.y"
    { (yyval.typeName) = MkTypeNameGuessDecl((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1044:

/* Line 1464 of yacc.c  */
#line 3157 "grammar.y"
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); ;}
    break;

  case 1045:

/* Line 1464 of yacc.c  */
#line 3175 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1046:

/* Line 1464 of yacc.c  */
#line 3176 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1047:

/* Line 1464 of yacc.c  */
#line 3180 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1048:

/* Line 1464 of yacc.c  */
#line 3181 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1049:

/* Line 1464 of yacc.c  */
#line 3182 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1050:

/* Line 1464 of yacc.c  */
#line 3183 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1051:

/* Line 1464 of yacc.c  */
#line 3184 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1052:

/* Line 1464 of yacc.c  */
#line 3185 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1053:

/* Line 1464 of yacc.c  */
#line 3187 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1054:

/* Line 1464 of yacc.c  */
#line 3188 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1055:

/* Line 1464 of yacc.c  */
#line 3189 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1056:

/* Line 1464 of yacc.c  */
#line 3190 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1057:

/* Line 1464 of yacc.c  */
#line 3194 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1058:

/* Line 1464 of yacc.c  */
#line 3195 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1059:

/* Line 1464 of yacc.c  */
#line 3196 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1060:

/* Line 1464 of yacc.c  */
#line 3197 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1061:

/* Line 1464 of yacc.c  */
#line 3198 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1062:

/* Line 1464 of yacc.c  */
#line 3200 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1063:

/* Line 1464 of yacc.c  */
#line 3201 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1064:

/* Line 1464 of yacc.c  */
#line 3202 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1066:

/* Line 1464 of yacc.c  */
#line 3207 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1067:

/* Line 1464 of yacc.c  */
#line 3208 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1068:

/* Line 1464 of yacc.c  */
#line 3209 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1069:

/* Line 1464 of yacc.c  */
#line 3210 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1070:

/* Line 1464 of yacc.c  */
#line 3211 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); ;}
    break;

  case 1072:

/* Line 1464 of yacc.c  */
#line 3216 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 1075:

/* Line 1464 of yacc.c  */
#line 3223 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 1077:

/* Line 1464 of yacc.c  */
#line 3225 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1078:

/* Line 1464 of yacc.c  */
#line 3226 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1079:

/* Line 1464 of yacc.c  */
#line 3227 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1087:

/* Line 1464 of yacc.c  */
#line 3238 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1088:

/* Line 1464 of yacc.c  */
#line 3239 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1089:

/* Line 1464 of yacc.c  */
#line 3240 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1090:

/* Line 1464 of yacc.c  */
#line 3241 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1091:

/* Line 1464 of yacc.c  */
#line 3242 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1092:

/* Line 1464 of yacc.c  */
#line 3243 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1093:

/* Line 1464 of yacc.c  */
#line 3244 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (1)].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1094:

/* Line 1464 of yacc.c  */
#line 3248 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (1)].string), null, null); (yyval.asmField).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1095:

/* Line 1464 of yacc.c  */
#line 3249 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (4)].string), (yyvsp[(3) - (4)].exp), null); (yyval.asmField).loc = (yyloc); ;}
    break;

  case 1096:

/* Line 1464 of yacc.c  */
#line 3250 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(4) - (7)].string), (yyvsp[(6) - (7)].exp), (yyvsp[(2) - (7)].id)); (yyval.asmField).loc = (yyloc); ;}
    break;

  case 1097:

/* Line 1464 of yacc.c  */
#line 3254 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].asmField)); ;}
    break;

  case 1098:

/* Line 1464 of yacc.c  */
#line 3255 "grammar.y"
    { ListAdd((yyval.list), (yyvsp[(3) - (3)].asmField)); ;}
    break;

  case 1099:

/* Line 1464 of yacc.c  */
#line 3256 "grammar.y"
    { (yyval.list) = null; ;}
    break;

  case 1100:

/* Line 1464 of yacc.c  */
#line 3260 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (6)].specifier), (yyvsp[(4) - (6)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1101:

/* Line 1464 of yacc.c  */
#line 3261 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), (yyvsp[(6) - (8)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1102:

/* Line 1464 of yacc.c  */
#line 3262 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1103:

/* Line 1464 of yacc.c  */
#line 3263 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (12)].specifier), (yyvsp[(4) - (12)].string), (yyvsp[(6) - (12)].list), (yyvsp[(8) - (12)].list), (yyvsp[(10) - (12)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1104:

/* Line 1464 of yacc.c  */
#line 3265 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), null, (yyvsp[(6) - (8)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1105:

/* Line 1464 of yacc.c  */
#line 3266 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), null, (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1106:

/* Line 1464 of yacc.c  */
#line 3267 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), null, (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1107:

/* Line 1464 of yacc.c  */
#line 3269 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (5)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1108:

/* Line 1464 of yacc.c  */
#line 3270 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), (yyvsp[(5) - (7)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1109:

/* Line 1464 of yacc.c  */
#line 3271 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1110:

/* Line 1464 of yacc.c  */
#line 3272 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (11)].string), (yyvsp[(5) - (11)].list), (yyvsp[(7) - (11)].list), (yyvsp[(9) - (11)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1111:

/* Line 1464 of yacc.c  */
#line 3274 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), null, (yyvsp[(5) - (7)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1112:

/* Line 1464 of yacc.c  */
#line 3275 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), null, (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1113:

/* Line 1464 of yacc.c  */
#line 3276 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), null, (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1114:

/* Line 1464 of yacc.c  */
#line 3280 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1115:

/* Line 1464 of yacc.c  */
#line 3281 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1116:

/* Line 1464 of yacc.c  */
#line 3282 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1117:

/* Line 1464 of yacc.c  */
#line 3283 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1118:

/* Line 1464 of yacc.c  */
#line 3284 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1119:

/* Line 1464 of yacc.c  */
#line 3286 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1120:

/* Line 1464 of yacc.c  */
#line 3287 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1121:

/* Line 1464 of yacc.c  */
#line 3288 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1122:

/* Line 1464 of yacc.c  */
#line 3289 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1123:

/* Line 1464 of yacc.c  */
#line 3290 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1124:

/* Line 1464 of yacc.c  */
#line 3294 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1125:

/* Line 1464 of yacc.c  */
#line 3295 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1126:

/* Line 1464 of yacc.c  */
#line 3296 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1127:

/* Line 1464 of yacc.c  */
#line 3297 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1128:

/* Line 1464 of yacc.c  */
#line 3298 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (2)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (2)]).end; ;}
    break;

  case 1129:

/* Line 1464 of yacc.c  */
#line 3299 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1130:

/* Line 1464 of yacc.c  */
#line 3300 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1131:

/* Line 1464 of yacc.c  */
#line 3302 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1132:

/* Line 1464 of yacc.c  */
#line 3303 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1133:

/* Line 1464 of yacc.c  */
#line 3304 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1134:

/* Line 1464 of yacc.c  */
#line 3305 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1135:

/* Line 1464 of yacc.c  */
#line 3306 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1136:

/* Line 1464 of yacc.c  */
#line 3310 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = publicAccess; ;}
    break;

  case 1137:

/* Line 1464 of yacc.c  */
#line 3311 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = privateAccess; ;}
    break;

  case 1138:

/* Line 1464 of yacc.c  */
#line 3312 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = defaultAccess; ;}
    break;

  case 1139:

/* Line 1464 of yacc.c  */
#line 3316 "grammar.y"
    { (yyval.declMode) = publicAccess; ;}
    break;

  case 1140:

/* Line 1464 of yacc.c  */
#line 3317 "grammar.y"
    { (yyval.declMode) = privateAccess; ;}
    break;

  case 1141:

/* Line 1464 of yacc.c  */
#line 3321 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1142:

/* Line 1464 of yacc.c  */
#line 3322 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1143:

/* Line 1464 of yacc.c  */
#line 3323 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1144:

/* Line 1464 of yacc.c  */
#line 3324 "grammar.y"
    { (yyval.declaration) = (yyvsp[(1) - (2)].declaration); structDeclMode = defaultDeclMode; ;}
    break;

  case 1145:

/* Line 1464 of yacc.c  */
#line 3328 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1146:

/* Line 1464 of yacc.c  */
#line 3329 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1147:

/* Line 1464 of yacc.c  */
#line 3330 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1148:

/* Line 1464 of yacc.c  */
#line 3332 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1149:

/* Line 1464 of yacc.c  */
#line 3333 "grammar.y"
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1150:

/* Line 1464 of yacc.c  */
#line 3334 "grammar.y"
    { structDeclMode = declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[(3) - (6)].id), (yyvsp[(5) - (6)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1151:

/* Line 1464 of yacc.c  */
#line 3338 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); yyerrok; ;}
    break;

  case 1152:

/* Line 1464 of yacc.c  */
#line 3342 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1153:

/* Line 1464 of yacc.c  */
#line 3343 "grammar.y"
    { structDeclMode = defaultDeclMode;  ;}
    break;

  case 1154:

/* Line 1464 of yacc.c  */
#line 3345 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1155:

/* Line 1464 of yacc.c  */
#line 3346 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1156:

/* Line 1464 of yacc.c  */
#line 3347 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1157:

/* Line 1464 of yacc.c  */
#line 3351 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1158:

/* Line 1464 of yacc.c  */
#line 3352 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1159:

/* Line 1464 of yacc.c  */
#line 3353 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1160:

/* Line 1464 of yacc.c  */
#line 3354 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 1161:

/* Line 1464 of yacc.c  */
#line 3358 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); ;}
    break;

  case 1162:

/* Line 1464 of yacc.c  */
#line 3359 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); ;}
    break;

  case 1163:

/* Line 1464 of yacc.c  */
#line 3363 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1164:

/* Line 1464 of yacc.c  */
#line 3364 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1165:

/* Line 1464 of yacc.c  */
#line 3365 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1166:

/* Line 1464 of yacc.c  */
#line 3369 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1167:

/* Line 1464 of yacc.c  */
#line 3370 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1168:

/* Line 1464 of yacc.c  */
#line 3371 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1169:

/* Line 1464 of yacc.c  */
#line 3372 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1170:

/* Line 1464 of yacc.c  */
#line 3373 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1171:

/* Line 1464 of yacc.c  */
#line 3374 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1172:

/* Line 1464 of yacc.c  */
#line 3375 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1173:

/* Line 1464 of yacc.c  */
#line 3379 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1174:

/* Line 1464 of yacc.c  */
#line 3380 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1175:

/* Line 1464 of yacc.c  */
#line 3381 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1176:

/* Line 1464 of yacc.c  */
#line 3382 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1177:

/* Line 1464 of yacc.c  */
#line 3386 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1178:

/* Line 1464 of yacc.c  */
#line 3387 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1179:

/* Line 1464 of yacc.c  */
#line 3388 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1180:

/* Line 1464 of yacc.c  */
#line 3389 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1181:

/* Line 1464 of yacc.c  */
#line 3393 "grammar.y"
    { (yyval.context) = PushContext(); ;}
    break;

  case 1182:

/* Line 1464 of yacc.c  */
#line 3397 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1183:

/* Line 1464 of yacc.c  */
#line 3402 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1184:

/* Line 1464 of yacc.c  */
#line 3404 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[(1) - (1)].context); PopContext((yyvsp[(1) - (1)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1185:

/* Line 1464 of yacc.c  */
#line 3407 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1186:

/* Line 1464 of yacc.c  */
#line 3412 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1187:

/* Line 1464 of yacc.c  */
#line 3413 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1188:

/* Line 1464 of yacc.c  */
#line 3414 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1189:

/* Line 1464 of yacc.c  */
#line 3418 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1190:

/* Line 1464 of yacc.c  */
#line 3419 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1191:

/* Line 1464 of yacc.c  */
#line 3420 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1192:

/* Line 1464 of yacc.c  */
#line 3421 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1193:

/* Line 1464 of yacc.c  */
#line 3422 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1194:

/* Line 1464 of yacc.c  */
#line 3423 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1195:

/* Line 1464 of yacc.c  */
#line 3427 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (3)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1197:

/* Line 1464 of yacc.c  */
#line 3432 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1198:

/* Line 1464 of yacc.c  */
#line 3433 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1199:

/* Line 1464 of yacc.c  */
#line 3434 "grammar.y"
    { yyerror(); (yyval.stmt) = MkWhileStmt(null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1200:

/* Line 1464 of yacc.c  */
#line 3436 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (7)].stmt), (yyvsp[(5) - (7)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1201:

/* Line 1464 of yacc.c  */
#line 3437 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1202:

/* Line 1464 of yacc.c  */
#line 3439 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1203:

/* Line 1464 of yacc.c  */
#line 3440 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), null, null, (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1204:

/* Line 1464 of yacc.c  */
#line 3441 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1205:

/* Line 1464 of yacc.c  */
#line 3442 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1206:

/* Line 1464 of yacc.c  */
#line 3443 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1207:

/* Line 1464 of yacc.c  */
#line 3445 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (7)].id), (yyvsp[(5) - (7)].list), null, (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1208:

/* Line 1464 of yacc.c  */
#line 3446 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (9)].id), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1209:

/* Line 1464 of yacc.c  */
#line 3450 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1210:

/* Line 1464 of yacc.c  */
#line 3451 "grammar.y"
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[(3) - (4)].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[(3) - (4)]); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1211:

/* Line 1464 of yacc.c  */
#line 3452 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (4)].stmt), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1212:

/* Line 1464 of yacc.c  */
#line 3453 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), MkExpressionStmt((yyvsp[(4) - (5)].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[(4) - (5)]); ;}
    break;

  case 1213:

/* Line 1464 of yacc.c  */
#line 3457 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), (yyvsp[(4) - (5)].stmt), (yyvsp[(5) - (5)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1214:

/* Line 1464 of yacc.c  */
#line 3458 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1215:

/* Line 1464 of yacc.c  */
#line 3459 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1216:

/* Line 1464 of yacc.c  */
#line 3460 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1217:

/* Line 1464 of yacc.c  */
#line 3462 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1218:

/* Line 1464 of yacc.c  */
#line 3463 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1219:

/* Line 1464 of yacc.c  */
#line 3464 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1220:

/* Line 1464 of yacc.c  */
#line 3465 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (4)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1221:

/* Line 1464 of yacc.c  */
#line 3466 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (3)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1222:

/* Line 1464 of yacc.c  */
#line 3467 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (2)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1223:

/* Line 1464 of yacc.c  */
#line 3468 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1224:

/* Line 1464 of yacc.c  */
#line 3471 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1225:

/* Line 1464 of yacc.c  */
#line 3475 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1226:

/* Line 1464 of yacc.c  */
#line 3476 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (3)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1227:

/* Line 1464 of yacc.c  */
#line 3480 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1228:

/* Line 1464 of yacc.c  */
#line 3481 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1229:

/* Line 1464 of yacc.c  */
#line 3485 "grammar.y"
    { (yyval.stmt) = MkGotoStmt((yyvsp[(2) - (3)].id)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1230:

/* Line 1464 of yacc.c  */
#line 3486 "grammar.y"
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1231:

/* Line 1464 of yacc.c  */
#line 3487 "grammar.y"
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1232:

/* Line 1464 of yacc.c  */
#line 3488 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[(2) - (2)]); ;}
    break;

  case 1233:

/* Line 1464 of yacc.c  */
#line 3489 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1234:

/* Line 1464 of yacc.c  */
#line 3490 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1235:

/* Line 1464 of yacc.c  */
#line 3491 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1236:

/* Line 1464 of yacc.c  */
#line 3492 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1237:

/* Line 1464 of yacc.c  */
#line 3496 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1238:

/* Line 1464 of yacc.c  */
#line 3497 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (2)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1239:

/* Line 1464 of yacc.c  */
#line 3498 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[(1) - (1)]).end; ;}
    break;

  case 1240:

/* Line 1464 of yacc.c  */
#line 3499 "grammar.y"
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1241:

/* Line 1464 of yacc.c  */
#line 3505 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1242:

/* Line 1464 of yacc.c  */
#line 3507 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1243:

/* Line 1464 of yacc.c  */
#line 3508 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1244:

/* Line 1464 of yacc.c  */
#line 3510 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1245:

/* Line 1464 of yacc.c  */
#line 3512 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1246:

/* Line 1464 of yacc.c  */
#line 3513 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc);;}
    break;

  case 1247:

/* Line 1464 of yacc.c  */
#line 3516 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1248:

/* Line 1464 of yacc.c  */
#line 3517 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1249:

/* Line 1464 of yacc.c  */
#line 3518 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1250:

/* Line 1464 of yacc.c  */
#line 3519 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1251:

/* Line 1464 of yacc.c  */
#line 3520 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1252:

/* Line 1464 of yacc.c  */
#line 3521 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 1253:

/* Line 1464 of yacc.c  */
#line 3525 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 1254:

/* Line 1464 of yacc.c  */
#line 3527 "grammar.y"
    {
      int len1 = strlen((yyvsp[(1) - (2)].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[(1) - (2)].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[(1) - (2)].string);
   ;}
    break;

  case 1255:

/* Line 1464 of yacc.c  */
#line 3538 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1256:

/* Line 1464 of yacc.c  */
#line 3540 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1257:

/* Line 1464 of yacc.c  */
#line 3543 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; FreeList((yyvsp[(1) - (2)].list), FreeSpecifier); ;}
    break;

  case 1258:

/* Line 1464 of yacc.c  */
#line 3546 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1259:

/* Line 1464 of yacc.c  */
#line 3547 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(2) - (2)].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1260:

/* Line 1464 of yacc.c  */
#line 3548 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1261:

/* Line 1464 of yacc.c  */
#line 3550 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(2) - (3)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(2) - (3)].id));
      if(!isRemote)
         yyerror();
   ;}
    break;

  case 1262:

/* Line 1464 of yacc.c  */
#line 3559 "grammar.y"
    { (yyval.external) = null; ;}
    break;

  case 1263:

/* Line 1464 of yacc.c  */
#line 3561 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1264:

/* Line 1464 of yacc.c  */
#line 3563 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1265:

/* Line 1464 of yacc.c  */
#line 3564 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1266:

/* Line 1464 of yacc.c  */
#line 3565 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), normalImport, ((yyvsp[(1) - (3)].declMode) != defaultAccess) ? (yyvsp[(1) - (3)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1267:

/* Line 1464 of yacc.c  */
#line 3566 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), staticImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1268:

/* Line 1464 of yacc.c  */
#line 3568 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(3) - (4)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), isRemote ? remoteImport : normalImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(3) - (4)].id));
      structDeclMode = declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();
   ;}
    break;

  case 1269:

/* Line 1464 of yacc.c  */
#line 3577 "grammar.y"
    { defaultDeclMode = (yyvsp[(1) - (2)].declMode); (yyval.external) = null; ;}
    break;

  case 1270:

/* Line 1464 of yacc.c  */
#line 3578 "grammar.y"
    { defaultDeclMode = staticAccess; (yyval.external) = null; ;}
    break;

  case 1271:

/* Line 1464 of yacc.c  */
#line 3579 "grammar.y"
    { (yyval.external) = MkExternalNameSpace((yyvsp[(2) - (2)].id)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1272:

/* Line 1464 of yacc.c  */
#line 3580 "grammar.y"
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[(2) - (2)].specifier).name)); FreeSpecifier((yyvsp[(2) - (2)].specifier)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1273:

/* Line 1464 of yacc.c  */
#line 3581 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(1) - (1)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(1) - (1)].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1274:

/* Line 1464 of yacc.c  */
#line 3582 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(2) - (2)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(2) - (2)].dbtableDef).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1275:

/* Line 1464 of yacc.c  */
#line 3586 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyvsp[(1) - (1)]._class).loc; (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1276:

/* Line 1464 of yacc.c  */
#line 3588 "grammar.y"
    {
      yyerror();
      FreeList((yyvsp[(1) - (2)].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));
      (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc;
      (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      structDeclMode = declMode = defaultDeclMode;
   ;}
    break;

  case 1277:

/* Line 1464 of yacc.c  */
#line 3596 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyvsp[(1) - (1)].function).loc;  (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1278:

/* Line 1464 of yacc.c  */
#line 3598 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc; (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1279:

/* Line 1464 of yacc.c  */
#line 3599 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyvsp[(2) - (2)].function).loc; (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1280:

/* Line 1464 of yacc.c  */
#line 3602 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1281:

/* Line 1464 of yacc.c  */
#line 3603 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1282:

/* Line 1464 of yacc.c  */
#line 3607 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1283:

/* Line 1464 of yacc.c  */
#line 3608 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1284:

/* Line 1464 of yacc.c  */
#line 3609 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1287:

/* Line 1464 of yacc.c  */
#line 3615 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1288:

/* Line 1464 of yacc.c  */
#line 3616 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1289:

/* Line 1464 of yacc.c  */
#line 3618 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(2) - (2)]._class)); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), _class); _class.loc = (yylsp[(2) - (2)]);  (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1290:

/* Line 1464 of yacc.c  */
#line 3620 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(3) - (3)]._class)); (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), _class); _class.loc = (yylsp[(3) - (3)]);  (yyvsp[(3) - (3)]._class).declMode = ((yyvsp[(2) - (3)].declMode) != defaultAccess) ? (yyvsp[(2) - (3)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1293:

/* Line 1464 of yacc.c  */
#line 3626 "grammar.y"
    { ast = MkList(); ;}
    break;

  case 1294:

/* Line 1464 of yacc.c  */
#line 3630 "grammar.y"
    { Symbol symbol = DeclClassAddNameSpace((yyvsp[(3) - (6)].id)._class, (yyvsp[(3) - (6)].id).string); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1295:

/* Line 1464 of yacc.c  */
#line 3631 "grammar.y"
    { Symbol symbol = DeclClass((yyvsp[(3) - (6)].specifier).nsSpec, (yyvsp[(3) - (6)].specifier).name); FreeSpecifier((yyvsp[(3) - (6)].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1296:

/* Line 1464 of yacc.c  */
#line 3632 "grammar.y"
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (5)].string), null, (yyvsp[(4) - (5)].list)); ;}
    break;

  case 1297:

/* Line 1464 of yacc.c  */
#line 3636 "grammar.y"
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[(1) - (4)].list), null), (yyvsp[(2) - (4)].id), (yyvsp[(3) - (4)].string)); ;}
    break;

  case 1298:

/* Line 1464 of yacc.c  */
#line 3640 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(1) - (1)].id), ascending); ;}
    break;

  case 1299:

/* Line 1464 of yacc.c  */
#line 3641 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), descending); ;}
    break;

  case 1300:

/* Line 1464 of yacc.c  */
#line 3642 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), ascending); ;}
    break;

  case 1301:

/* Line 1464 of yacc.c  */
#line 3646 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbindexItem)); ;}
    break;

  case 1302:

/* Line 1464 of yacc.c  */
#line 3647 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].dbindexItem)); ;}
    break;

  case 1303:

/* Line 1464 of yacc.c  */
#line 3651 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (3)].list), null); ;}
    break;

  case 1304:

/* Line 1464 of yacc.c  */
#line 3652 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].id)); ;}
    break;

  case 1305:

/* Line 1464 of yacc.c  */
#line 3656 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1306:

/* Line 1464 of yacc.c  */
#line 3657 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1307:

/* Line 1464 of yacc.c  */
#line 3658 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1308:

/* Line 1464 of yacc.c  */
#line 3659 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1309:

/* Line 1464 of yacc.c  */
#line 3663 "grammar.y"
    { (yyval.exp) = MkExpDBOpen((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].exp)); ;}
    break;

  case 1310:

/* Line 1464 of yacc.c  */
#line 3667 "grammar.y"
    { (yyval.exp) = MkExpDBField((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1311:

/* Line 1464 of yacc.c  */
#line 3671 "grammar.y"
    { (yyval.exp) = MkExpDBIndex((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1312:

/* Line 1464 of yacc.c  */
#line 3675 "grammar.y"
    { (yyval.exp) = MkExpDBTable((yyvsp[(3) - (4)].string)); ;}
    break;



/* Line 1464 of yacc.c  */
#line 22681 "grammar.ec"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }

  yyerror_range[0] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[0] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[0] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;

  yyerror_range[1] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



/* Line 1684 of yacc.c  */
#line 3678 "grammar.y"


